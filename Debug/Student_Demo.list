
Student_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a560  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bcc  0800a620  0800a620  0001a620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1ec  0800b1ec  000229fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800b1ec  0800b1ec  000229fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b1ec  0800b1ec  000229fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1ec  0800b1ec  0001b1ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1f0  0800b1f0  0001b1f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000029fc  20000000  0800b1f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20002a00  0800dbf0  00022a00  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002b2c  0800dbf0  00022b2c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000229fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3ff  00000000  00000000  00022a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cde  00000000  00000000  0002de23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0002fb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00002a87  00000000  00000000  00030728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000e937  00000000  00000000  000331af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000aa3e5  00000000  00000000  00041ae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000ebecb  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000b20  00000000  00000000  000ebf20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e5c  00000000  00000000  000eca40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20002a00 	.word	0x20002a00
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800a604 	.word	0x0800a604

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20002a04 	.word	0x20002a04
 8000100:	0800a604 	.word	0x0800a604

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 fb69 	bl	8001b10 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fab9 	bl	80019c0 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fb5b 	bl	8001b10 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fb51 	bl	8001b10 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fae1 	bl	8001a44 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fad7 	bl	8001a44 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_lmul>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	46ce      	mov	lr, r9
 80004a8:	4647      	mov	r7, r8
 80004aa:	b580      	push	{r7, lr}
 80004ac:	0007      	movs	r7, r0
 80004ae:	4699      	mov	r9, r3
 80004b0:	0c3b      	lsrs	r3, r7, #16
 80004b2:	469c      	mov	ip, r3
 80004b4:	0413      	lsls	r3, r2, #16
 80004b6:	0c1b      	lsrs	r3, r3, #16
 80004b8:	001d      	movs	r5, r3
 80004ba:	000e      	movs	r6, r1
 80004bc:	4661      	mov	r1, ip
 80004be:	0400      	lsls	r0, r0, #16
 80004c0:	0c14      	lsrs	r4, r2, #16
 80004c2:	0c00      	lsrs	r0, r0, #16
 80004c4:	4345      	muls	r5, r0
 80004c6:	434b      	muls	r3, r1
 80004c8:	4360      	muls	r0, r4
 80004ca:	4361      	muls	r1, r4
 80004cc:	18c0      	adds	r0, r0, r3
 80004ce:	0c2c      	lsrs	r4, r5, #16
 80004d0:	1820      	adds	r0, r4, r0
 80004d2:	468c      	mov	ip, r1
 80004d4:	4283      	cmp	r3, r0
 80004d6:	d903      	bls.n	80004e0 <__aeabi_lmul+0x3c>
 80004d8:	2380      	movs	r3, #128	; 0x80
 80004da:	025b      	lsls	r3, r3, #9
 80004dc:	4698      	mov	r8, r3
 80004de:	44c4      	add	ip, r8
 80004e0:	4649      	mov	r1, r9
 80004e2:	4379      	muls	r1, r7
 80004e4:	4372      	muls	r2, r6
 80004e6:	0c03      	lsrs	r3, r0, #16
 80004e8:	4463      	add	r3, ip
 80004ea:	042d      	lsls	r5, r5, #16
 80004ec:	0c2d      	lsrs	r5, r5, #16
 80004ee:	18c9      	adds	r1, r1, r3
 80004f0:	0400      	lsls	r0, r0, #16
 80004f2:	1940      	adds	r0, r0, r5
 80004f4:	1889      	adds	r1, r1, r2
 80004f6:	bcc0      	pop	{r6, r7}
 80004f8:	46b9      	mov	r9, r7
 80004fa:	46b0      	mov	r8, r6
 80004fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fdiv>:
 8000500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000502:	464f      	mov	r7, r9
 8000504:	4646      	mov	r6, r8
 8000506:	46d6      	mov	lr, sl
 8000508:	0245      	lsls	r5, r0, #9
 800050a:	b5c0      	push	{r6, r7, lr}
 800050c:	0047      	lsls	r7, r0, #1
 800050e:	1c0c      	adds	r4, r1, #0
 8000510:	0a6d      	lsrs	r5, r5, #9
 8000512:	0e3f      	lsrs	r7, r7, #24
 8000514:	0fc6      	lsrs	r6, r0, #31
 8000516:	2f00      	cmp	r7, #0
 8000518:	d100      	bne.n	800051c <__aeabi_fdiv+0x1c>
 800051a:	e070      	b.n	80005fe <__aeabi_fdiv+0xfe>
 800051c:	2fff      	cmp	r7, #255	; 0xff
 800051e:	d100      	bne.n	8000522 <__aeabi_fdiv+0x22>
 8000520:	e075      	b.n	800060e <__aeabi_fdiv+0x10e>
 8000522:	00eb      	lsls	r3, r5, #3
 8000524:	2580      	movs	r5, #128	; 0x80
 8000526:	04ed      	lsls	r5, r5, #19
 8000528:	431d      	orrs	r5, r3
 800052a:	2300      	movs	r3, #0
 800052c:	4699      	mov	r9, r3
 800052e:	469a      	mov	sl, r3
 8000530:	3f7f      	subs	r7, #127	; 0x7f
 8000532:	0260      	lsls	r0, r4, #9
 8000534:	0a43      	lsrs	r3, r0, #9
 8000536:	4698      	mov	r8, r3
 8000538:	0063      	lsls	r3, r4, #1
 800053a:	0e1b      	lsrs	r3, r3, #24
 800053c:	0fe4      	lsrs	r4, r4, #31
 800053e:	2b00      	cmp	r3, #0
 8000540:	d04e      	beq.n	80005e0 <__aeabi_fdiv+0xe0>
 8000542:	2bff      	cmp	r3, #255	; 0xff
 8000544:	d046      	beq.n	80005d4 <__aeabi_fdiv+0xd4>
 8000546:	4642      	mov	r2, r8
 8000548:	00d0      	lsls	r0, r2, #3
 800054a:	2280      	movs	r2, #128	; 0x80
 800054c:	04d2      	lsls	r2, r2, #19
 800054e:	4302      	orrs	r2, r0
 8000550:	4690      	mov	r8, r2
 8000552:	2200      	movs	r2, #0
 8000554:	3b7f      	subs	r3, #127	; 0x7f
 8000556:	0031      	movs	r1, r6
 8000558:	1aff      	subs	r7, r7, r3
 800055a:	464b      	mov	r3, r9
 800055c:	4061      	eors	r1, r4
 800055e:	b2c9      	uxtb	r1, r1
 8000560:	4313      	orrs	r3, r2
 8000562:	2b0f      	cmp	r3, #15
 8000564:	d900      	bls.n	8000568 <__aeabi_fdiv+0x68>
 8000566:	e0b5      	b.n	80006d4 <__aeabi_fdiv+0x1d4>
 8000568:	486e      	ldr	r0, [pc, #440]	; (8000724 <__aeabi_fdiv+0x224>)
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	58c3      	ldr	r3, [r0, r3]
 800056e:	469f      	mov	pc, r3
 8000570:	2300      	movs	r3, #0
 8000572:	4698      	mov	r8, r3
 8000574:	0026      	movs	r6, r4
 8000576:	4645      	mov	r5, r8
 8000578:	4692      	mov	sl, r2
 800057a:	4653      	mov	r3, sl
 800057c:	2b02      	cmp	r3, #2
 800057e:	d100      	bne.n	8000582 <__aeabi_fdiv+0x82>
 8000580:	e089      	b.n	8000696 <__aeabi_fdiv+0x196>
 8000582:	2b03      	cmp	r3, #3
 8000584:	d100      	bne.n	8000588 <__aeabi_fdiv+0x88>
 8000586:	e09e      	b.n	80006c6 <__aeabi_fdiv+0x1c6>
 8000588:	2b01      	cmp	r3, #1
 800058a:	d018      	beq.n	80005be <__aeabi_fdiv+0xbe>
 800058c:	003b      	movs	r3, r7
 800058e:	337f      	adds	r3, #127	; 0x7f
 8000590:	2b00      	cmp	r3, #0
 8000592:	dd69      	ble.n	8000668 <__aeabi_fdiv+0x168>
 8000594:	076a      	lsls	r2, r5, #29
 8000596:	d004      	beq.n	80005a2 <__aeabi_fdiv+0xa2>
 8000598:	220f      	movs	r2, #15
 800059a:	402a      	ands	r2, r5
 800059c:	2a04      	cmp	r2, #4
 800059e:	d000      	beq.n	80005a2 <__aeabi_fdiv+0xa2>
 80005a0:	3504      	adds	r5, #4
 80005a2:	012a      	lsls	r2, r5, #4
 80005a4:	d503      	bpl.n	80005ae <__aeabi_fdiv+0xae>
 80005a6:	4b60      	ldr	r3, [pc, #384]	; (8000728 <__aeabi_fdiv+0x228>)
 80005a8:	401d      	ands	r5, r3
 80005aa:	003b      	movs	r3, r7
 80005ac:	3380      	adds	r3, #128	; 0x80
 80005ae:	2bfe      	cmp	r3, #254	; 0xfe
 80005b0:	dd00      	ble.n	80005b4 <__aeabi_fdiv+0xb4>
 80005b2:	e070      	b.n	8000696 <__aeabi_fdiv+0x196>
 80005b4:	01ad      	lsls	r5, r5, #6
 80005b6:	0a6d      	lsrs	r5, r5, #9
 80005b8:	b2d8      	uxtb	r0, r3
 80005ba:	e002      	b.n	80005c2 <__aeabi_fdiv+0xc2>
 80005bc:	000e      	movs	r6, r1
 80005be:	2000      	movs	r0, #0
 80005c0:	2500      	movs	r5, #0
 80005c2:	05c0      	lsls	r0, r0, #23
 80005c4:	4328      	orrs	r0, r5
 80005c6:	07f6      	lsls	r6, r6, #31
 80005c8:	4330      	orrs	r0, r6
 80005ca:	bce0      	pop	{r5, r6, r7}
 80005cc:	46ba      	mov	sl, r7
 80005ce:	46b1      	mov	r9, r6
 80005d0:	46a8      	mov	r8, r5
 80005d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d4:	4643      	mov	r3, r8
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d13f      	bne.n	800065a <__aeabi_fdiv+0x15a>
 80005da:	2202      	movs	r2, #2
 80005dc:	3fff      	subs	r7, #255	; 0xff
 80005de:	e003      	b.n	80005e8 <__aeabi_fdiv+0xe8>
 80005e0:	4643      	mov	r3, r8
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d12d      	bne.n	8000642 <__aeabi_fdiv+0x142>
 80005e6:	2201      	movs	r2, #1
 80005e8:	0031      	movs	r1, r6
 80005ea:	464b      	mov	r3, r9
 80005ec:	4061      	eors	r1, r4
 80005ee:	b2c9      	uxtb	r1, r1
 80005f0:	4313      	orrs	r3, r2
 80005f2:	2b0f      	cmp	r3, #15
 80005f4:	d834      	bhi.n	8000660 <__aeabi_fdiv+0x160>
 80005f6:	484d      	ldr	r0, [pc, #308]	; (800072c <__aeabi_fdiv+0x22c>)
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	58c3      	ldr	r3, [r0, r3]
 80005fc:	469f      	mov	pc, r3
 80005fe:	2d00      	cmp	r5, #0
 8000600:	d113      	bne.n	800062a <__aeabi_fdiv+0x12a>
 8000602:	2304      	movs	r3, #4
 8000604:	4699      	mov	r9, r3
 8000606:	3b03      	subs	r3, #3
 8000608:	2700      	movs	r7, #0
 800060a:	469a      	mov	sl, r3
 800060c:	e791      	b.n	8000532 <__aeabi_fdiv+0x32>
 800060e:	2d00      	cmp	r5, #0
 8000610:	d105      	bne.n	800061e <__aeabi_fdiv+0x11e>
 8000612:	2308      	movs	r3, #8
 8000614:	4699      	mov	r9, r3
 8000616:	3b06      	subs	r3, #6
 8000618:	27ff      	movs	r7, #255	; 0xff
 800061a:	469a      	mov	sl, r3
 800061c:	e789      	b.n	8000532 <__aeabi_fdiv+0x32>
 800061e:	230c      	movs	r3, #12
 8000620:	4699      	mov	r9, r3
 8000622:	3b09      	subs	r3, #9
 8000624:	27ff      	movs	r7, #255	; 0xff
 8000626:	469a      	mov	sl, r3
 8000628:	e783      	b.n	8000532 <__aeabi_fdiv+0x32>
 800062a:	0028      	movs	r0, r5
 800062c:	f002 f9c4 	bl	80029b8 <__clzsi2>
 8000630:	2776      	movs	r7, #118	; 0x76
 8000632:	1f43      	subs	r3, r0, #5
 8000634:	409d      	lsls	r5, r3
 8000636:	2300      	movs	r3, #0
 8000638:	427f      	negs	r7, r7
 800063a:	4699      	mov	r9, r3
 800063c:	469a      	mov	sl, r3
 800063e:	1a3f      	subs	r7, r7, r0
 8000640:	e777      	b.n	8000532 <__aeabi_fdiv+0x32>
 8000642:	4640      	mov	r0, r8
 8000644:	f002 f9b8 	bl	80029b8 <__clzsi2>
 8000648:	4642      	mov	r2, r8
 800064a:	1f43      	subs	r3, r0, #5
 800064c:	409a      	lsls	r2, r3
 800064e:	2376      	movs	r3, #118	; 0x76
 8000650:	425b      	negs	r3, r3
 8000652:	4690      	mov	r8, r2
 8000654:	1a1b      	subs	r3, r3, r0
 8000656:	2200      	movs	r2, #0
 8000658:	e77d      	b.n	8000556 <__aeabi_fdiv+0x56>
 800065a:	23ff      	movs	r3, #255	; 0xff
 800065c:	2203      	movs	r2, #3
 800065e:	e77a      	b.n	8000556 <__aeabi_fdiv+0x56>
 8000660:	000e      	movs	r6, r1
 8000662:	20ff      	movs	r0, #255	; 0xff
 8000664:	2500      	movs	r5, #0
 8000666:	e7ac      	b.n	80005c2 <__aeabi_fdiv+0xc2>
 8000668:	2001      	movs	r0, #1
 800066a:	1ac0      	subs	r0, r0, r3
 800066c:	281b      	cmp	r0, #27
 800066e:	dca6      	bgt.n	80005be <__aeabi_fdiv+0xbe>
 8000670:	379e      	adds	r7, #158	; 0x9e
 8000672:	002a      	movs	r2, r5
 8000674:	40bd      	lsls	r5, r7
 8000676:	40c2      	lsrs	r2, r0
 8000678:	1e6b      	subs	r3, r5, #1
 800067a:	419d      	sbcs	r5, r3
 800067c:	4315      	orrs	r5, r2
 800067e:	076b      	lsls	r3, r5, #29
 8000680:	d004      	beq.n	800068c <__aeabi_fdiv+0x18c>
 8000682:	230f      	movs	r3, #15
 8000684:	402b      	ands	r3, r5
 8000686:	2b04      	cmp	r3, #4
 8000688:	d000      	beq.n	800068c <__aeabi_fdiv+0x18c>
 800068a:	3504      	adds	r5, #4
 800068c:	016b      	lsls	r3, r5, #5
 800068e:	d544      	bpl.n	800071a <__aeabi_fdiv+0x21a>
 8000690:	2001      	movs	r0, #1
 8000692:	2500      	movs	r5, #0
 8000694:	e795      	b.n	80005c2 <__aeabi_fdiv+0xc2>
 8000696:	20ff      	movs	r0, #255	; 0xff
 8000698:	2500      	movs	r5, #0
 800069a:	e792      	b.n	80005c2 <__aeabi_fdiv+0xc2>
 800069c:	2580      	movs	r5, #128	; 0x80
 800069e:	2600      	movs	r6, #0
 80006a0:	20ff      	movs	r0, #255	; 0xff
 80006a2:	03ed      	lsls	r5, r5, #15
 80006a4:	e78d      	b.n	80005c2 <__aeabi_fdiv+0xc2>
 80006a6:	2300      	movs	r3, #0
 80006a8:	4698      	mov	r8, r3
 80006aa:	2080      	movs	r0, #128	; 0x80
 80006ac:	03c0      	lsls	r0, r0, #15
 80006ae:	4205      	tst	r5, r0
 80006b0:	d009      	beq.n	80006c6 <__aeabi_fdiv+0x1c6>
 80006b2:	4643      	mov	r3, r8
 80006b4:	4203      	tst	r3, r0
 80006b6:	d106      	bne.n	80006c6 <__aeabi_fdiv+0x1c6>
 80006b8:	4645      	mov	r5, r8
 80006ba:	4305      	orrs	r5, r0
 80006bc:	026d      	lsls	r5, r5, #9
 80006be:	0026      	movs	r6, r4
 80006c0:	20ff      	movs	r0, #255	; 0xff
 80006c2:	0a6d      	lsrs	r5, r5, #9
 80006c4:	e77d      	b.n	80005c2 <__aeabi_fdiv+0xc2>
 80006c6:	2080      	movs	r0, #128	; 0x80
 80006c8:	03c0      	lsls	r0, r0, #15
 80006ca:	4305      	orrs	r5, r0
 80006cc:	026d      	lsls	r5, r5, #9
 80006ce:	20ff      	movs	r0, #255	; 0xff
 80006d0:	0a6d      	lsrs	r5, r5, #9
 80006d2:	e776      	b.n	80005c2 <__aeabi_fdiv+0xc2>
 80006d4:	4642      	mov	r2, r8
 80006d6:	016b      	lsls	r3, r5, #5
 80006d8:	0150      	lsls	r0, r2, #5
 80006da:	4283      	cmp	r3, r0
 80006dc:	d219      	bcs.n	8000712 <__aeabi_fdiv+0x212>
 80006de:	221b      	movs	r2, #27
 80006e0:	2500      	movs	r5, #0
 80006e2:	3f01      	subs	r7, #1
 80006e4:	2601      	movs	r6, #1
 80006e6:	001c      	movs	r4, r3
 80006e8:	006d      	lsls	r5, r5, #1
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	2c00      	cmp	r4, #0
 80006ee:	db01      	blt.n	80006f4 <__aeabi_fdiv+0x1f4>
 80006f0:	4298      	cmp	r0, r3
 80006f2:	d801      	bhi.n	80006f8 <__aeabi_fdiv+0x1f8>
 80006f4:	1a1b      	subs	r3, r3, r0
 80006f6:	4335      	orrs	r5, r6
 80006f8:	3a01      	subs	r2, #1
 80006fa:	2a00      	cmp	r2, #0
 80006fc:	d1f3      	bne.n	80006e6 <__aeabi_fdiv+0x1e6>
 80006fe:	1e5a      	subs	r2, r3, #1
 8000700:	4193      	sbcs	r3, r2
 8000702:	431d      	orrs	r5, r3
 8000704:	003b      	movs	r3, r7
 8000706:	337f      	adds	r3, #127	; 0x7f
 8000708:	000e      	movs	r6, r1
 800070a:	2b00      	cmp	r3, #0
 800070c:	dd00      	ble.n	8000710 <__aeabi_fdiv+0x210>
 800070e:	e741      	b.n	8000594 <__aeabi_fdiv+0x94>
 8000710:	e7aa      	b.n	8000668 <__aeabi_fdiv+0x168>
 8000712:	221a      	movs	r2, #26
 8000714:	2501      	movs	r5, #1
 8000716:	1a1b      	subs	r3, r3, r0
 8000718:	e7e4      	b.n	80006e4 <__aeabi_fdiv+0x1e4>
 800071a:	01ad      	lsls	r5, r5, #6
 800071c:	2000      	movs	r0, #0
 800071e:	0a6d      	lsrs	r5, r5, #9
 8000720:	e74f      	b.n	80005c2 <__aeabi_fdiv+0xc2>
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	0800a728 	.word	0x0800a728
 8000728:	f7ffffff 	.word	0xf7ffffff
 800072c:	0800a768 	.word	0x0800a768

08000730 <__aeabi_fmul>:
 8000730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000732:	464f      	mov	r7, r9
 8000734:	4646      	mov	r6, r8
 8000736:	46d6      	mov	lr, sl
 8000738:	0244      	lsls	r4, r0, #9
 800073a:	0045      	lsls	r5, r0, #1
 800073c:	b5c0      	push	{r6, r7, lr}
 800073e:	0a64      	lsrs	r4, r4, #9
 8000740:	1c0f      	adds	r7, r1, #0
 8000742:	0e2d      	lsrs	r5, r5, #24
 8000744:	0fc6      	lsrs	r6, r0, #31
 8000746:	2d00      	cmp	r5, #0
 8000748:	d100      	bne.n	800074c <__aeabi_fmul+0x1c>
 800074a:	e08d      	b.n	8000868 <__aeabi_fmul+0x138>
 800074c:	2dff      	cmp	r5, #255	; 0xff
 800074e:	d100      	bne.n	8000752 <__aeabi_fmul+0x22>
 8000750:	e092      	b.n	8000878 <__aeabi_fmul+0x148>
 8000752:	2300      	movs	r3, #0
 8000754:	2080      	movs	r0, #128	; 0x80
 8000756:	4699      	mov	r9, r3
 8000758:	469a      	mov	sl, r3
 800075a:	00e4      	lsls	r4, r4, #3
 800075c:	04c0      	lsls	r0, r0, #19
 800075e:	4304      	orrs	r4, r0
 8000760:	3d7f      	subs	r5, #127	; 0x7f
 8000762:	0278      	lsls	r0, r7, #9
 8000764:	0a43      	lsrs	r3, r0, #9
 8000766:	4698      	mov	r8, r3
 8000768:	007b      	lsls	r3, r7, #1
 800076a:	0e1b      	lsrs	r3, r3, #24
 800076c:	0fff      	lsrs	r7, r7, #31
 800076e:	2b00      	cmp	r3, #0
 8000770:	d100      	bne.n	8000774 <__aeabi_fmul+0x44>
 8000772:	e070      	b.n	8000856 <__aeabi_fmul+0x126>
 8000774:	2bff      	cmp	r3, #255	; 0xff
 8000776:	d100      	bne.n	800077a <__aeabi_fmul+0x4a>
 8000778:	e086      	b.n	8000888 <__aeabi_fmul+0x158>
 800077a:	4642      	mov	r2, r8
 800077c:	00d0      	lsls	r0, r2, #3
 800077e:	2280      	movs	r2, #128	; 0x80
 8000780:	3b7f      	subs	r3, #127	; 0x7f
 8000782:	18ed      	adds	r5, r5, r3
 8000784:	2300      	movs	r3, #0
 8000786:	04d2      	lsls	r2, r2, #19
 8000788:	4302      	orrs	r2, r0
 800078a:	4690      	mov	r8, r2
 800078c:	469c      	mov	ip, r3
 800078e:	0031      	movs	r1, r6
 8000790:	464b      	mov	r3, r9
 8000792:	4079      	eors	r1, r7
 8000794:	1c68      	adds	r0, r5, #1
 8000796:	2b0f      	cmp	r3, #15
 8000798:	d81c      	bhi.n	80007d4 <__aeabi_fmul+0xa4>
 800079a:	4a76      	ldr	r2, [pc, #472]	; (8000974 <__aeabi_fmul+0x244>)
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	58d3      	ldr	r3, [r2, r3]
 80007a0:	469f      	mov	pc, r3
 80007a2:	0039      	movs	r1, r7
 80007a4:	4644      	mov	r4, r8
 80007a6:	46e2      	mov	sl, ip
 80007a8:	4653      	mov	r3, sl
 80007aa:	2b02      	cmp	r3, #2
 80007ac:	d00f      	beq.n	80007ce <__aeabi_fmul+0x9e>
 80007ae:	2b03      	cmp	r3, #3
 80007b0:	d100      	bne.n	80007b4 <__aeabi_fmul+0x84>
 80007b2:	e0d7      	b.n	8000964 <__aeabi_fmul+0x234>
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d137      	bne.n	8000828 <__aeabi_fmul+0xf8>
 80007b8:	2000      	movs	r0, #0
 80007ba:	2400      	movs	r4, #0
 80007bc:	05c0      	lsls	r0, r0, #23
 80007be:	4320      	orrs	r0, r4
 80007c0:	07c9      	lsls	r1, r1, #31
 80007c2:	4308      	orrs	r0, r1
 80007c4:	bce0      	pop	{r5, r6, r7}
 80007c6:	46ba      	mov	sl, r7
 80007c8:	46b1      	mov	r9, r6
 80007ca:	46a8      	mov	r8, r5
 80007cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ce:	20ff      	movs	r0, #255	; 0xff
 80007d0:	2400      	movs	r4, #0
 80007d2:	e7f3      	b.n	80007bc <__aeabi_fmul+0x8c>
 80007d4:	0c26      	lsrs	r6, r4, #16
 80007d6:	0424      	lsls	r4, r4, #16
 80007d8:	0c22      	lsrs	r2, r4, #16
 80007da:	4644      	mov	r4, r8
 80007dc:	0424      	lsls	r4, r4, #16
 80007de:	0c24      	lsrs	r4, r4, #16
 80007e0:	4643      	mov	r3, r8
 80007e2:	0027      	movs	r7, r4
 80007e4:	0c1b      	lsrs	r3, r3, #16
 80007e6:	4357      	muls	r7, r2
 80007e8:	4374      	muls	r4, r6
 80007ea:	435a      	muls	r2, r3
 80007ec:	435e      	muls	r6, r3
 80007ee:	1912      	adds	r2, r2, r4
 80007f0:	0c3b      	lsrs	r3, r7, #16
 80007f2:	189b      	adds	r3, r3, r2
 80007f4:	429c      	cmp	r4, r3
 80007f6:	d903      	bls.n	8000800 <__aeabi_fmul+0xd0>
 80007f8:	2280      	movs	r2, #128	; 0x80
 80007fa:	0252      	lsls	r2, r2, #9
 80007fc:	4694      	mov	ip, r2
 80007fe:	4466      	add	r6, ip
 8000800:	043f      	lsls	r7, r7, #16
 8000802:	041a      	lsls	r2, r3, #16
 8000804:	0c3f      	lsrs	r7, r7, #16
 8000806:	19d2      	adds	r2, r2, r7
 8000808:	0194      	lsls	r4, r2, #6
 800080a:	1e67      	subs	r7, r4, #1
 800080c:	41bc      	sbcs	r4, r7
 800080e:	0c1b      	lsrs	r3, r3, #16
 8000810:	0e92      	lsrs	r2, r2, #26
 8000812:	199b      	adds	r3, r3, r6
 8000814:	4314      	orrs	r4, r2
 8000816:	019b      	lsls	r3, r3, #6
 8000818:	431c      	orrs	r4, r3
 800081a:	011b      	lsls	r3, r3, #4
 800081c:	d400      	bmi.n	8000820 <__aeabi_fmul+0xf0>
 800081e:	e09b      	b.n	8000958 <__aeabi_fmul+0x228>
 8000820:	2301      	movs	r3, #1
 8000822:	0862      	lsrs	r2, r4, #1
 8000824:	401c      	ands	r4, r3
 8000826:	4314      	orrs	r4, r2
 8000828:	0002      	movs	r2, r0
 800082a:	327f      	adds	r2, #127	; 0x7f
 800082c:	2a00      	cmp	r2, #0
 800082e:	dd64      	ble.n	80008fa <__aeabi_fmul+0x1ca>
 8000830:	0763      	lsls	r3, r4, #29
 8000832:	d004      	beq.n	800083e <__aeabi_fmul+0x10e>
 8000834:	230f      	movs	r3, #15
 8000836:	4023      	ands	r3, r4
 8000838:	2b04      	cmp	r3, #4
 800083a:	d000      	beq.n	800083e <__aeabi_fmul+0x10e>
 800083c:	3404      	adds	r4, #4
 800083e:	0123      	lsls	r3, r4, #4
 8000840:	d503      	bpl.n	800084a <__aeabi_fmul+0x11a>
 8000842:	0002      	movs	r2, r0
 8000844:	4b4c      	ldr	r3, [pc, #304]	; (8000978 <__aeabi_fmul+0x248>)
 8000846:	3280      	adds	r2, #128	; 0x80
 8000848:	401c      	ands	r4, r3
 800084a:	2afe      	cmp	r2, #254	; 0xfe
 800084c:	dcbf      	bgt.n	80007ce <__aeabi_fmul+0x9e>
 800084e:	01a4      	lsls	r4, r4, #6
 8000850:	0a64      	lsrs	r4, r4, #9
 8000852:	b2d0      	uxtb	r0, r2
 8000854:	e7b2      	b.n	80007bc <__aeabi_fmul+0x8c>
 8000856:	4643      	mov	r3, r8
 8000858:	2b00      	cmp	r3, #0
 800085a:	d13d      	bne.n	80008d8 <__aeabi_fmul+0x1a8>
 800085c:	464a      	mov	r2, r9
 800085e:	3301      	adds	r3, #1
 8000860:	431a      	orrs	r2, r3
 8000862:	4691      	mov	r9, r2
 8000864:	469c      	mov	ip, r3
 8000866:	e792      	b.n	800078e <__aeabi_fmul+0x5e>
 8000868:	2c00      	cmp	r4, #0
 800086a:	d129      	bne.n	80008c0 <__aeabi_fmul+0x190>
 800086c:	2304      	movs	r3, #4
 800086e:	4699      	mov	r9, r3
 8000870:	3b03      	subs	r3, #3
 8000872:	2500      	movs	r5, #0
 8000874:	469a      	mov	sl, r3
 8000876:	e774      	b.n	8000762 <__aeabi_fmul+0x32>
 8000878:	2c00      	cmp	r4, #0
 800087a:	d11b      	bne.n	80008b4 <__aeabi_fmul+0x184>
 800087c:	2308      	movs	r3, #8
 800087e:	4699      	mov	r9, r3
 8000880:	3b06      	subs	r3, #6
 8000882:	25ff      	movs	r5, #255	; 0xff
 8000884:	469a      	mov	sl, r3
 8000886:	e76c      	b.n	8000762 <__aeabi_fmul+0x32>
 8000888:	4643      	mov	r3, r8
 800088a:	35ff      	adds	r5, #255	; 0xff
 800088c:	2b00      	cmp	r3, #0
 800088e:	d10b      	bne.n	80008a8 <__aeabi_fmul+0x178>
 8000890:	2302      	movs	r3, #2
 8000892:	464a      	mov	r2, r9
 8000894:	431a      	orrs	r2, r3
 8000896:	4691      	mov	r9, r2
 8000898:	469c      	mov	ip, r3
 800089a:	e778      	b.n	800078e <__aeabi_fmul+0x5e>
 800089c:	4653      	mov	r3, sl
 800089e:	0031      	movs	r1, r6
 80008a0:	2b02      	cmp	r3, #2
 80008a2:	d000      	beq.n	80008a6 <__aeabi_fmul+0x176>
 80008a4:	e783      	b.n	80007ae <__aeabi_fmul+0x7e>
 80008a6:	e792      	b.n	80007ce <__aeabi_fmul+0x9e>
 80008a8:	2303      	movs	r3, #3
 80008aa:	464a      	mov	r2, r9
 80008ac:	431a      	orrs	r2, r3
 80008ae:	4691      	mov	r9, r2
 80008b0:	469c      	mov	ip, r3
 80008b2:	e76c      	b.n	800078e <__aeabi_fmul+0x5e>
 80008b4:	230c      	movs	r3, #12
 80008b6:	4699      	mov	r9, r3
 80008b8:	3b09      	subs	r3, #9
 80008ba:	25ff      	movs	r5, #255	; 0xff
 80008bc:	469a      	mov	sl, r3
 80008be:	e750      	b.n	8000762 <__aeabi_fmul+0x32>
 80008c0:	0020      	movs	r0, r4
 80008c2:	f002 f879 	bl	80029b8 <__clzsi2>
 80008c6:	2576      	movs	r5, #118	; 0x76
 80008c8:	1f43      	subs	r3, r0, #5
 80008ca:	409c      	lsls	r4, r3
 80008cc:	2300      	movs	r3, #0
 80008ce:	426d      	negs	r5, r5
 80008d0:	4699      	mov	r9, r3
 80008d2:	469a      	mov	sl, r3
 80008d4:	1a2d      	subs	r5, r5, r0
 80008d6:	e744      	b.n	8000762 <__aeabi_fmul+0x32>
 80008d8:	4640      	mov	r0, r8
 80008da:	f002 f86d 	bl	80029b8 <__clzsi2>
 80008de:	4642      	mov	r2, r8
 80008e0:	1f43      	subs	r3, r0, #5
 80008e2:	409a      	lsls	r2, r3
 80008e4:	2300      	movs	r3, #0
 80008e6:	1a2d      	subs	r5, r5, r0
 80008e8:	4690      	mov	r8, r2
 80008ea:	469c      	mov	ip, r3
 80008ec:	3d76      	subs	r5, #118	; 0x76
 80008ee:	e74e      	b.n	800078e <__aeabi_fmul+0x5e>
 80008f0:	2480      	movs	r4, #128	; 0x80
 80008f2:	2100      	movs	r1, #0
 80008f4:	20ff      	movs	r0, #255	; 0xff
 80008f6:	03e4      	lsls	r4, r4, #15
 80008f8:	e760      	b.n	80007bc <__aeabi_fmul+0x8c>
 80008fa:	2301      	movs	r3, #1
 80008fc:	1a9b      	subs	r3, r3, r2
 80008fe:	2b1b      	cmp	r3, #27
 8000900:	dd00      	ble.n	8000904 <__aeabi_fmul+0x1d4>
 8000902:	e759      	b.n	80007b8 <__aeabi_fmul+0x88>
 8000904:	0022      	movs	r2, r4
 8000906:	309e      	adds	r0, #158	; 0x9e
 8000908:	40da      	lsrs	r2, r3
 800090a:	4084      	lsls	r4, r0
 800090c:	0013      	movs	r3, r2
 800090e:	1e62      	subs	r2, r4, #1
 8000910:	4194      	sbcs	r4, r2
 8000912:	431c      	orrs	r4, r3
 8000914:	0763      	lsls	r3, r4, #29
 8000916:	d004      	beq.n	8000922 <__aeabi_fmul+0x1f2>
 8000918:	230f      	movs	r3, #15
 800091a:	4023      	ands	r3, r4
 800091c:	2b04      	cmp	r3, #4
 800091e:	d000      	beq.n	8000922 <__aeabi_fmul+0x1f2>
 8000920:	3404      	adds	r4, #4
 8000922:	0163      	lsls	r3, r4, #5
 8000924:	d51a      	bpl.n	800095c <__aeabi_fmul+0x22c>
 8000926:	2001      	movs	r0, #1
 8000928:	2400      	movs	r4, #0
 800092a:	e747      	b.n	80007bc <__aeabi_fmul+0x8c>
 800092c:	2080      	movs	r0, #128	; 0x80
 800092e:	03c0      	lsls	r0, r0, #15
 8000930:	4204      	tst	r4, r0
 8000932:	d009      	beq.n	8000948 <__aeabi_fmul+0x218>
 8000934:	4643      	mov	r3, r8
 8000936:	4203      	tst	r3, r0
 8000938:	d106      	bne.n	8000948 <__aeabi_fmul+0x218>
 800093a:	4644      	mov	r4, r8
 800093c:	4304      	orrs	r4, r0
 800093e:	0264      	lsls	r4, r4, #9
 8000940:	0039      	movs	r1, r7
 8000942:	20ff      	movs	r0, #255	; 0xff
 8000944:	0a64      	lsrs	r4, r4, #9
 8000946:	e739      	b.n	80007bc <__aeabi_fmul+0x8c>
 8000948:	2080      	movs	r0, #128	; 0x80
 800094a:	03c0      	lsls	r0, r0, #15
 800094c:	4304      	orrs	r4, r0
 800094e:	0264      	lsls	r4, r4, #9
 8000950:	0031      	movs	r1, r6
 8000952:	20ff      	movs	r0, #255	; 0xff
 8000954:	0a64      	lsrs	r4, r4, #9
 8000956:	e731      	b.n	80007bc <__aeabi_fmul+0x8c>
 8000958:	0028      	movs	r0, r5
 800095a:	e765      	b.n	8000828 <__aeabi_fmul+0xf8>
 800095c:	01a4      	lsls	r4, r4, #6
 800095e:	2000      	movs	r0, #0
 8000960:	0a64      	lsrs	r4, r4, #9
 8000962:	e72b      	b.n	80007bc <__aeabi_fmul+0x8c>
 8000964:	2080      	movs	r0, #128	; 0x80
 8000966:	03c0      	lsls	r0, r0, #15
 8000968:	4304      	orrs	r4, r0
 800096a:	0264      	lsls	r4, r4, #9
 800096c:	20ff      	movs	r0, #255	; 0xff
 800096e:	0a64      	lsrs	r4, r4, #9
 8000970:	e724      	b.n	80007bc <__aeabi_fmul+0x8c>
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	0800a7a8 	.word	0x0800a7a8
 8000978:	f7ffffff 	.word	0xf7ffffff

0800097c <__aeabi_fsub>:
 800097c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800097e:	46ce      	mov	lr, r9
 8000980:	4647      	mov	r7, r8
 8000982:	0243      	lsls	r3, r0, #9
 8000984:	0a5b      	lsrs	r3, r3, #9
 8000986:	024e      	lsls	r6, r1, #9
 8000988:	00da      	lsls	r2, r3, #3
 800098a:	4694      	mov	ip, r2
 800098c:	0a72      	lsrs	r2, r6, #9
 800098e:	4691      	mov	r9, r2
 8000990:	0045      	lsls	r5, r0, #1
 8000992:	004a      	lsls	r2, r1, #1
 8000994:	b580      	push	{r7, lr}
 8000996:	0e2d      	lsrs	r5, r5, #24
 8000998:	001f      	movs	r7, r3
 800099a:	0fc4      	lsrs	r4, r0, #31
 800099c:	0e12      	lsrs	r2, r2, #24
 800099e:	0fc9      	lsrs	r1, r1, #31
 80009a0:	09b6      	lsrs	r6, r6, #6
 80009a2:	2aff      	cmp	r2, #255	; 0xff
 80009a4:	d05b      	beq.n	8000a5e <__aeabi_fsub+0xe2>
 80009a6:	2001      	movs	r0, #1
 80009a8:	4041      	eors	r1, r0
 80009aa:	428c      	cmp	r4, r1
 80009ac:	d039      	beq.n	8000a22 <__aeabi_fsub+0xa6>
 80009ae:	1aa8      	subs	r0, r5, r2
 80009b0:	2800      	cmp	r0, #0
 80009b2:	dd5a      	ble.n	8000a6a <__aeabi_fsub+0xee>
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	d06a      	beq.n	8000a8e <__aeabi_fsub+0x112>
 80009b8:	2dff      	cmp	r5, #255	; 0xff
 80009ba:	d100      	bne.n	80009be <__aeabi_fsub+0x42>
 80009bc:	e0d9      	b.n	8000b72 <__aeabi_fsub+0x1f6>
 80009be:	2280      	movs	r2, #128	; 0x80
 80009c0:	04d2      	lsls	r2, r2, #19
 80009c2:	4316      	orrs	r6, r2
 80009c4:	281b      	cmp	r0, #27
 80009c6:	dc00      	bgt.n	80009ca <__aeabi_fsub+0x4e>
 80009c8:	e0e9      	b.n	8000b9e <__aeabi_fsub+0x222>
 80009ca:	2001      	movs	r0, #1
 80009cc:	4663      	mov	r3, ip
 80009ce:	1a18      	subs	r0, r3, r0
 80009d0:	0143      	lsls	r3, r0, #5
 80009d2:	d400      	bmi.n	80009d6 <__aeabi_fsub+0x5a>
 80009d4:	e0b4      	b.n	8000b40 <__aeabi_fsub+0x1c4>
 80009d6:	0180      	lsls	r0, r0, #6
 80009d8:	0987      	lsrs	r7, r0, #6
 80009da:	0038      	movs	r0, r7
 80009dc:	f001 ffec 	bl	80029b8 <__clzsi2>
 80009e0:	3805      	subs	r0, #5
 80009e2:	4087      	lsls	r7, r0
 80009e4:	4285      	cmp	r5, r0
 80009e6:	dc00      	bgt.n	80009ea <__aeabi_fsub+0x6e>
 80009e8:	e0cc      	b.n	8000b84 <__aeabi_fsub+0x208>
 80009ea:	1a2d      	subs	r5, r5, r0
 80009ec:	48b5      	ldr	r0, [pc, #724]	; (8000cc4 <__aeabi_fsub+0x348>)
 80009ee:	4038      	ands	r0, r7
 80009f0:	0743      	lsls	r3, r0, #29
 80009f2:	d004      	beq.n	80009fe <__aeabi_fsub+0x82>
 80009f4:	230f      	movs	r3, #15
 80009f6:	4003      	ands	r3, r0
 80009f8:	2b04      	cmp	r3, #4
 80009fa:	d000      	beq.n	80009fe <__aeabi_fsub+0x82>
 80009fc:	3004      	adds	r0, #4
 80009fe:	0143      	lsls	r3, r0, #5
 8000a00:	d400      	bmi.n	8000a04 <__aeabi_fsub+0x88>
 8000a02:	e0a0      	b.n	8000b46 <__aeabi_fsub+0x1ca>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	; 0xfe
 8000a08:	d100      	bne.n	8000a0c <__aeabi_fsub+0x90>
 8000a0a:	e08d      	b.n	8000b28 <__aeabi_fsub+0x1ac>
 8000a0c:	0180      	lsls	r0, r0, #6
 8000a0e:	0a47      	lsrs	r7, r0, #9
 8000a10:	b2d2      	uxtb	r2, r2
 8000a12:	05d0      	lsls	r0, r2, #23
 8000a14:	4338      	orrs	r0, r7
 8000a16:	07e4      	lsls	r4, r4, #31
 8000a18:	4320      	orrs	r0, r4
 8000a1a:	bcc0      	pop	{r6, r7}
 8000a1c:	46b9      	mov	r9, r7
 8000a1e:	46b0      	mov	r8, r6
 8000a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a22:	1aa8      	subs	r0, r5, r2
 8000a24:	4680      	mov	r8, r0
 8000a26:	2800      	cmp	r0, #0
 8000a28:	dd45      	ble.n	8000ab6 <__aeabi_fsub+0x13a>
 8000a2a:	2a00      	cmp	r2, #0
 8000a2c:	d070      	beq.n	8000b10 <__aeabi_fsub+0x194>
 8000a2e:	2dff      	cmp	r5, #255	; 0xff
 8000a30:	d100      	bne.n	8000a34 <__aeabi_fsub+0xb8>
 8000a32:	e09e      	b.n	8000b72 <__aeabi_fsub+0x1f6>
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	04db      	lsls	r3, r3, #19
 8000a38:	431e      	orrs	r6, r3
 8000a3a:	4643      	mov	r3, r8
 8000a3c:	2b1b      	cmp	r3, #27
 8000a3e:	dc00      	bgt.n	8000a42 <__aeabi_fsub+0xc6>
 8000a40:	e0d2      	b.n	8000be8 <__aeabi_fsub+0x26c>
 8000a42:	2001      	movs	r0, #1
 8000a44:	4460      	add	r0, ip
 8000a46:	0143      	lsls	r3, r0, #5
 8000a48:	d57a      	bpl.n	8000b40 <__aeabi_fsub+0x1c4>
 8000a4a:	3501      	adds	r5, #1
 8000a4c:	2dff      	cmp	r5, #255	; 0xff
 8000a4e:	d06b      	beq.n	8000b28 <__aeabi_fsub+0x1ac>
 8000a50:	2301      	movs	r3, #1
 8000a52:	4a9d      	ldr	r2, [pc, #628]	; (8000cc8 <__aeabi_fsub+0x34c>)
 8000a54:	4003      	ands	r3, r0
 8000a56:	0840      	lsrs	r0, r0, #1
 8000a58:	4010      	ands	r0, r2
 8000a5a:	4318      	orrs	r0, r3
 8000a5c:	e7c8      	b.n	80009f0 <__aeabi_fsub+0x74>
 8000a5e:	2e00      	cmp	r6, #0
 8000a60:	d020      	beq.n	8000aa4 <__aeabi_fsub+0x128>
 8000a62:	428c      	cmp	r4, r1
 8000a64:	d023      	beq.n	8000aae <__aeabi_fsub+0x132>
 8000a66:	0028      	movs	r0, r5
 8000a68:	38ff      	subs	r0, #255	; 0xff
 8000a6a:	2800      	cmp	r0, #0
 8000a6c:	d039      	beq.n	8000ae2 <__aeabi_fsub+0x166>
 8000a6e:	1b57      	subs	r7, r2, r5
 8000a70:	2d00      	cmp	r5, #0
 8000a72:	d000      	beq.n	8000a76 <__aeabi_fsub+0xfa>
 8000a74:	e09d      	b.n	8000bb2 <__aeabi_fsub+0x236>
 8000a76:	4663      	mov	r3, ip
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d100      	bne.n	8000a7e <__aeabi_fsub+0x102>
 8000a7c:	e0db      	b.n	8000c36 <__aeabi_fsub+0x2ba>
 8000a7e:	1e7b      	subs	r3, r7, #1
 8000a80:	2f01      	cmp	r7, #1
 8000a82:	d100      	bne.n	8000a86 <__aeabi_fsub+0x10a>
 8000a84:	e10d      	b.n	8000ca2 <__aeabi_fsub+0x326>
 8000a86:	2fff      	cmp	r7, #255	; 0xff
 8000a88:	d071      	beq.n	8000b6e <__aeabi_fsub+0x1f2>
 8000a8a:	001f      	movs	r7, r3
 8000a8c:	e098      	b.n	8000bc0 <__aeabi_fsub+0x244>
 8000a8e:	2e00      	cmp	r6, #0
 8000a90:	d100      	bne.n	8000a94 <__aeabi_fsub+0x118>
 8000a92:	e0a7      	b.n	8000be4 <__aeabi_fsub+0x268>
 8000a94:	1e42      	subs	r2, r0, #1
 8000a96:	2801      	cmp	r0, #1
 8000a98:	d100      	bne.n	8000a9c <__aeabi_fsub+0x120>
 8000a9a:	e0e6      	b.n	8000c6a <__aeabi_fsub+0x2ee>
 8000a9c:	28ff      	cmp	r0, #255	; 0xff
 8000a9e:	d068      	beq.n	8000b72 <__aeabi_fsub+0x1f6>
 8000aa0:	0010      	movs	r0, r2
 8000aa2:	e78f      	b.n	80009c4 <__aeabi_fsub+0x48>
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	4041      	eors	r1, r0
 8000aa8:	42a1      	cmp	r1, r4
 8000aaa:	d000      	beq.n	8000aae <__aeabi_fsub+0x132>
 8000aac:	e77f      	b.n	80009ae <__aeabi_fsub+0x32>
 8000aae:	20ff      	movs	r0, #255	; 0xff
 8000ab0:	4240      	negs	r0, r0
 8000ab2:	4680      	mov	r8, r0
 8000ab4:	44a8      	add	r8, r5
 8000ab6:	4640      	mov	r0, r8
 8000ab8:	2800      	cmp	r0, #0
 8000aba:	d038      	beq.n	8000b2e <__aeabi_fsub+0x1b2>
 8000abc:	1b51      	subs	r1, r2, r5
 8000abe:	2d00      	cmp	r5, #0
 8000ac0:	d100      	bne.n	8000ac4 <__aeabi_fsub+0x148>
 8000ac2:	e0ae      	b.n	8000c22 <__aeabi_fsub+0x2a6>
 8000ac4:	2aff      	cmp	r2, #255	; 0xff
 8000ac6:	d100      	bne.n	8000aca <__aeabi_fsub+0x14e>
 8000ac8:	e0df      	b.n	8000c8a <__aeabi_fsub+0x30e>
 8000aca:	2380      	movs	r3, #128	; 0x80
 8000acc:	4660      	mov	r0, ip
 8000ace:	04db      	lsls	r3, r3, #19
 8000ad0:	4318      	orrs	r0, r3
 8000ad2:	4684      	mov	ip, r0
 8000ad4:	291b      	cmp	r1, #27
 8000ad6:	dc00      	bgt.n	8000ada <__aeabi_fsub+0x15e>
 8000ad8:	e0d9      	b.n	8000c8e <__aeabi_fsub+0x312>
 8000ada:	2001      	movs	r0, #1
 8000adc:	0015      	movs	r5, r2
 8000ade:	1980      	adds	r0, r0, r6
 8000ae0:	e7b1      	b.n	8000a46 <__aeabi_fsub+0xca>
 8000ae2:	20fe      	movs	r0, #254	; 0xfe
 8000ae4:	1c6a      	adds	r2, r5, #1
 8000ae6:	4210      	tst	r0, r2
 8000ae8:	d171      	bne.n	8000bce <__aeabi_fsub+0x252>
 8000aea:	2d00      	cmp	r5, #0
 8000aec:	d000      	beq.n	8000af0 <__aeabi_fsub+0x174>
 8000aee:	e0a6      	b.n	8000c3e <__aeabi_fsub+0x2c2>
 8000af0:	4663      	mov	r3, ip
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d100      	bne.n	8000af8 <__aeabi_fsub+0x17c>
 8000af6:	e0d9      	b.n	8000cac <__aeabi_fsub+0x330>
 8000af8:	2200      	movs	r2, #0
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	d100      	bne.n	8000b00 <__aeabi_fsub+0x184>
 8000afe:	e788      	b.n	8000a12 <__aeabi_fsub+0x96>
 8000b00:	1b98      	subs	r0, r3, r6
 8000b02:	0143      	lsls	r3, r0, #5
 8000b04:	d400      	bmi.n	8000b08 <__aeabi_fsub+0x18c>
 8000b06:	e0e1      	b.n	8000ccc <__aeabi_fsub+0x350>
 8000b08:	4663      	mov	r3, ip
 8000b0a:	000c      	movs	r4, r1
 8000b0c:	1af0      	subs	r0, r6, r3
 8000b0e:	e76f      	b.n	80009f0 <__aeabi_fsub+0x74>
 8000b10:	2e00      	cmp	r6, #0
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fsub+0x19a>
 8000b14:	e0b7      	b.n	8000c86 <__aeabi_fsub+0x30a>
 8000b16:	0002      	movs	r2, r0
 8000b18:	3a01      	subs	r2, #1
 8000b1a:	2801      	cmp	r0, #1
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_fsub+0x1a4>
 8000b1e:	e09c      	b.n	8000c5a <__aeabi_fsub+0x2de>
 8000b20:	28ff      	cmp	r0, #255	; 0xff
 8000b22:	d026      	beq.n	8000b72 <__aeabi_fsub+0x1f6>
 8000b24:	4690      	mov	r8, r2
 8000b26:	e788      	b.n	8000a3a <__aeabi_fsub+0xbe>
 8000b28:	22ff      	movs	r2, #255	; 0xff
 8000b2a:	2700      	movs	r7, #0
 8000b2c:	e771      	b.n	8000a12 <__aeabi_fsub+0x96>
 8000b2e:	20fe      	movs	r0, #254	; 0xfe
 8000b30:	1c6a      	adds	r2, r5, #1
 8000b32:	4210      	tst	r0, r2
 8000b34:	d064      	beq.n	8000c00 <__aeabi_fsub+0x284>
 8000b36:	2aff      	cmp	r2, #255	; 0xff
 8000b38:	d0f6      	beq.n	8000b28 <__aeabi_fsub+0x1ac>
 8000b3a:	0015      	movs	r5, r2
 8000b3c:	4466      	add	r6, ip
 8000b3e:	0870      	lsrs	r0, r6, #1
 8000b40:	0743      	lsls	r3, r0, #29
 8000b42:	d000      	beq.n	8000b46 <__aeabi_fsub+0x1ca>
 8000b44:	e756      	b.n	80009f4 <__aeabi_fsub+0x78>
 8000b46:	08c3      	lsrs	r3, r0, #3
 8000b48:	2dff      	cmp	r5, #255	; 0xff
 8000b4a:	d012      	beq.n	8000b72 <__aeabi_fsub+0x1f6>
 8000b4c:	025b      	lsls	r3, r3, #9
 8000b4e:	0a5f      	lsrs	r7, r3, #9
 8000b50:	b2ea      	uxtb	r2, r5
 8000b52:	e75e      	b.n	8000a12 <__aeabi_fsub+0x96>
 8000b54:	4662      	mov	r2, ip
 8000b56:	2a00      	cmp	r2, #0
 8000b58:	d100      	bne.n	8000b5c <__aeabi_fsub+0x1e0>
 8000b5a:	e096      	b.n	8000c8a <__aeabi_fsub+0x30e>
 8000b5c:	2e00      	cmp	r6, #0
 8000b5e:	d008      	beq.n	8000b72 <__aeabi_fsub+0x1f6>
 8000b60:	2280      	movs	r2, #128	; 0x80
 8000b62:	03d2      	lsls	r2, r2, #15
 8000b64:	4213      	tst	r3, r2
 8000b66:	d004      	beq.n	8000b72 <__aeabi_fsub+0x1f6>
 8000b68:	4648      	mov	r0, r9
 8000b6a:	4210      	tst	r0, r2
 8000b6c:	d101      	bne.n	8000b72 <__aeabi_fsub+0x1f6>
 8000b6e:	000c      	movs	r4, r1
 8000b70:	464b      	mov	r3, r9
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d0d8      	beq.n	8000b28 <__aeabi_fsub+0x1ac>
 8000b76:	2780      	movs	r7, #128	; 0x80
 8000b78:	03ff      	lsls	r7, r7, #15
 8000b7a:	431f      	orrs	r7, r3
 8000b7c:	027f      	lsls	r7, r7, #9
 8000b7e:	22ff      	movs	r2, #255	; 0xff
 8000b80:	0a7f      	lsrs	r7, r7, #9
 8000b82:	e746      	b.n	8000a12 <__aeabi_fsub+0x96>
 8000b84:	2320      	movs	r3, #32
 8000b86:	003a      	movs	r2, r7
 8000b88:	1b45      	subs	r5, r0, r5
 8000b8a:	0038      	movs	r0, r7
 8000b8c:	3501      	adds	r5, #1
 8000b8e:	40ea      	lsrs	r2, r5
 8000b90:	1b5d      	subs	r5, r3, r5
 8000b92:	40a8      	lsls	r0, r5
 8000b94:	1e43      	subs	r3, r0, #1
 8000b96:	4198      	sbcs	r0, r3
 8000b98:	2500      	movs	r5, #0
 8000b9a:	4310      	orrs	r0, r2
 8000b9c:	e728      	b.n	80009f0 <__aeabi_fsub+0x74>
 8000b9e:	2320      	movs	r3, #32
 8000ba0:	1a1b      	subs	r3, r3, r0
 8000ba2:	0032      	movs	r2, r6
 8000ba4:	409e      	lsls	r6, r3
 8000ba6:	40c2      	lsrs	r2, r0
 8000ba8:	0030      	movs	r0, r6
 8000baa:	1e43      	subs	r3, r0, #1
 8000bac:	4198      	sbcs	r0, r3
 8000bae:	4310      	orrs	r0, r2
 8000bb0:	e70c      	b.n	80009cc <__aeabi_fsub+0x50>
 8000bb2:	2aff      	cmp	r2, #255	; 0xff
 8000bb4:	d0db      	beq.n	8000b6e <__aeabi_fsub+0x1f2>
 8000bb6:	2380      	movs	r3, #128	; 0x80
 8000bb8:	4660      	mov	r0, ip
 8000bba:	04db      	lsls	r3, r3, #19
 8000bbc:	4318      	orrs	r0, r3
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	2f1b      	cmp	r7, #27
 8000bc2:	dd56      	ble.n	8000c72 <__aeabi_fsub+0x2f6>
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	000c      	movs	r4, r1
 8000bc8:	0015      	movs	r5, r2
 8000bca:	1a30      	subs	r0, r6, r0
 8000bcc:	e700      	b.n	80009d0 <__aeabi_fsub+0x54>
 8000bce:	4663      	mov	r3, ip
 8000bd0:	1b9f      	subs	r7, r3, r6
 8000bd2:	017b      	lsls	r3, r7, #5
 8000bd4:	d43d      	bmi.n	8000c52 <__aeabi_fsub+0x2d6>
 8000bd6:	2f00      	cmp	r7, #0
 8000bd8:	d000      	beq.n	8000bdc <__aeabi_fsub+0x260>
 8000bda:	e6fe      	b.n	80009da <__aeabi_fsub+0x5e>
 8000bdc:	2400      	movs	r4, #0
 8000bde:	2200      	movs	r2, #0
 8000be0:	2700      	movs	r7, #0
 8000be2:	e716      	b.n	8000a12 <__aeabi_fsub+0x96>
 8000be4:	0005      	movs	r5, r0
 8000be6:	e7af      	b.n	8000b48 <__aeabi_fsub+0x1cc>
 8000be8:	0032      	movs	r2, r6
 8000bea:	4643      	mov	r3, r8
 8000bec:	4641      	mov	r1, r8
 8000bee:	40da      	lsrs	r2, r3
 8000bf0:	2320      	movs	r3, #32
 8000bf2:	1a5b      	subs	r3, r3, r1
 8000bf4:	409e      	lsls	r6, r3
 8000bf6:	0030      	movs	r0, r6
 8000bf8:	1e43      	subs	r3, r0, #1
 8000bfa:	4198      	sbcs	r0, r3
 8000bfc:	4310      	orrs	r0, r2
 8000bfe:	e721      	b.n	8000a44 <__aeabi_fsub+0xc8>
 8000c00:	2d00      	cmp	r5, #0
 8000c02:	d1a7      	bne.n	8000b54 <__aeabi_fsub+0x1d8>
 8000c04:	4663      	mov	r3, ip
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d059      	beq.n	8000cbe <__aeabi_fsub+0x342>
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2e00      	cmp	r6, #0
 8000c0e:	d100      	bne.n	8000c12 <__aeabi_fsub+0x296>
 8000c10:	e6ff      	b.n	8000a12 <__aeabi_fsub+0x96>
 8000c12:	0030      	movs	r0, r6
 8000c14:	4460      	add	r0, ip
 8000c16:	0143      	lsls	r3, r0, #5
 8000c18:	d592      	bpl.n	8000b40 <__aeabi_fsub+0x1c4>
 8000c1a:	4b2a      	ldr	r3, [pc, #168]	; (8000cc4 <__aeabi_fsub+0x348>)
 8000c1c:	3501      	adds	r5, #1
 8000c1e:	4018      	ands	r0, r3
 8000c20:	e78e      	b.n	8000b40 <__aeabi_fsub+0x1c4>
 8000c22:	4663      	mov	r3, ip
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d047      	beq.n	8000cb8 <__aeabi_fsub+0x33c>
 8000c28:	1e4b      	subs	r3, r1, #1
 8000c2a:	2901      	cmp	r1, #1
 8000c2c:	d015      	beq.n	8000c5a <__aeabi_fsub+0x2de>
 8000c2e:	29ff      	cmp	r1, #255	; 0xff
 8000c30:	d02b      	beq.n	8000c8a <__aeabi_fsub+0x30e>
 8000c32:	0019      	movs	r1, r3
 8000c34:	e74e      	b.n	8000ad4 <__aeabi_fsub+0x158>
 8000c36:	000c      	movs	r4, r1
 8000c38:	464b      	mov	r3, r9
 8000c3a:	003d      	movs	r5, r7
 8000c3c:	e784      	b.n	8000b48 <__aeabi_fsub+0x1cc>
 8000c3e:	4662      	mov	r2, ip
 8000c40:	2a00      	cmp	r2, #0
 8000c42:	d18b      	bne.n	8000b5c <__aeabi_fsub+0x1e0>
 8000c44:	2e00      	cmp	r6, #0
 8000c46:	d192      	bne.n	8000b6e <__aeabi_fsub+0x1f2>
 8000c48:	2780      	movs	r7, #128	; 0x80
 8000c4a:	2400      	movs	r4, #0
 8000c4c:	22ff      	movs	r2, #255	; 0xff
 8000c4e:	03ff      	lsls	r7, r7, #15
 8000c50:	e6df      	b.n	8000a12 <__aeabi_fsub+0x96>
 8000c52:	4663      	mov	r3, ip
 8000c54:	000c      	movs	r4, r1
 8000c56:	1af7      	subs	r7, r6, r3
 8000c58:	e6bf      	b.n	80009da <__aeabi_fsub+0x5e>
 8000c5a:	0030      	movs	r0, r6
 8000c5c:	4460      	add	r0, ip
 8000c5e:	2501      	movs	r5, #1
 8000c60:	0143      	lsls	r3, r0, #5
 8000c62:	d400      	bmi.n	8000c66 <__aeabi_fsub+0x2ea>
 8000c64:	e76c      	b.n	8000b40 <__aeabi_fsub+0x1c4>
 8000c66:	2502      	movs	r5, #2
 8000c68:	e6f2      	b.n	8000a50 <__aeabi_fsub+0xd4>
 8000c6a:	4663      	mov	r3, ip
 8000c6c:	2501      	movs	r5, #1
 8000c6e:	1b98      	subs	r0, r3, r6
 8000c70:	e6ae      	b.n	80009d0 <__aeabi_fsub+0x54>
 8000c72:	2320      	movs	r3, #32
 8000c74:	4664      	mov	r4, ip
 8000c76:	4660      	mov	r0, ip
 8000c78:	40fc      	lsrs	r4, r7
 8000c7a:	1bdf      	subs	r7, r3, r7
 8000c7c:	40b8      	lsls	r0, r7
 8000c7e:	1e43      	subs	r3, r0, #1
 8000c80:	4198      	sbcs	r0, r3
 8000c82:	4320      	orrs	r0, r4
 8000c84:	e79f      	b.n	8000bc6 <__aeabi_fsub+0x24a>
 8000c86:	0005      	movs	r5, r0
 8000c88:	e75e      	b.n	8000b48 <__aeabi_fsub+0x1cc>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	e771      	b.n	8000b72 <__aeabi_fsub+0x1f6>
 8000c8e:	2320      	movs	r3, #32
 8000c90:	4665      	mov	r5, ip
 8000c92:	4660      	mov	r0, ip
 8000c94:	40cd      	lsrs	r5, r1
 8000c96:	1a59      	subs	r1, r3, r1
 8000c98:	4088      	lsls	r0, r1
 8000c9a:	1e43      	subs	r3, r0, #1
 8000c9c:	4198      	sbcs	r0, r3
 8000c9e:	4328      	orrs	r0, r5
 8000ca0:	e71c      	b.n	8000adc <__aeabi_fsub+0x160>
 8000ca2:	4663      	mov	r3, ip
 8000ca4:	000c      	movs	r4, r1
 8000ca6:	2501      	movs	r5, #1
 8000ca8:	1af0      	subs	r0, r6, r3
 8000caa:	e691      	b.n	80009d0 <__aeabi_fsub+0x54>
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d095      	beq.n	8000bdc <__aeabi_fsub+0x260>
 8000cb0:	000c      	movs	r4, r1
 8000cb2:	464f      	mov	r7, r9
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e6ac      	b.n	8000a12 <__aeabi_fsub+0x96>
 8000cb8:	464b      	mov	r3, r9
 8000cba:	000d      	movs	r5, r1
 8000cbc:	e744      	b.n	8000b48 <__aeabi_fsub+0x1cc>
 8000cbe:	464f      	mov	r7, r9
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e6a6      	b.n	8000a12 <__aeabi_fsub+0x96>
 8000cc4:	fbffffff 	.word	0xfbffffff
 8000cc8:	7dffffff 	.word	0x7dffffff
 8000ccc:	2800      	cmp	r0, #0
 8000cce:	d000      	beq.n	8000cd2 <__aeabi_fsub+0x356>
 8000cd0:	e736      	b.n	8000b40 <__aeabi_fsub+0x1c4>
 8000cd2:	2400      	movs	r4, #0
 8000cd4:	2700      	movs	r7, #0
 8000cd6:	e69c      	b.n	8000a12 <__aeabi_fsub+0x96>

08000cd8 <__aeabi_ui2f>:
 8000cd8:	b570      	push	{r4, r5, r6, lr}
 8000cda:	1e05      	subs	r5, r0, #0
 8000cdc:	d00e      	beq.n	8000cfc <__aeabi_ui2f+0x24>
 8000cde:	f001 fe6b 	bl	80029b8 <__clzsi2>
 8000ce2:	239e      	movs	r3, #158	; 0x9e
 8000ce4:	0004      	movs	r4, r0
 8000ce6:	1a1b      	subs	r3, r3, r0
 8000ce8:	2b96      	cmp	r3, #150	; 0x96
 8000cea:	dc0c      	bgt.n	8000d06 <__aeabi_ui2f+0x2e>
 8000cec:	2808      	cmp	r0, #8
 8000cee:	dd01      	ble.n	8000cf4 <__aeabi_ui2f+0x1c>
 8000cf0:	3c08      	subs	r4, #8
 8000cf2:	40a5      	lsls	r5, r4
 8000cf4:	026d      	lsls	r5, r5, #9
 8000cf6:	0a6d      	lsrs	r5, r5, #9
 8000cf8:	b2d8      	uxtb	r0, r3
 8000cfa:	e001      	b.n	8000d00 <__aeabi_ui2f+0x28>
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	2500      	movs	r5, #0
 8000d00:	05c0      	lsls	r0, r0, #23
 8000d02:	4328      	orrs	r0, r5
 8000d04:	bd70      	pop	{r4, r5, r6, pc}
 8000d06:	2b99      	cmp	r3, #153	; 0x99
 8000d08:	dd09      	ble.n	8000d1e <__aeabi_ui2f+0x46>
 8000d0a:	0002      	movs	r2, r0
 8000d0c:	0029      	movs	r1, r5
 8000d0e:	321b      	adds	r2, #27
 8000d10:	4091      	lsls	r1, r2
 8000d12:	1e4a      	subs	r2, r1, #1
 8000d14:	4191      	sbcs	r1, r2
 8000d16:	2205      	movs	r2, #5
 8000d18:	1a12      	subs	r2, r2, r0
 8000d1a:	40d5      	lsrs	r5, r2
 8000d1c:	430d      	orrs	r5, r1
 8000d1e:	2c05      	cmp	r4, #5
 8000d20:	dc12      	bgt.n	8000d48 <__aeabi_ui2f+0x70>
 8000d22:	0029      	movs	r1, r5
 8000d24:	4e0c      	ldr	r6, [pc, #48]	; (8000d58 <__aeabi_ui2f+0x80>)
 8000d26:	4031      	ands	r1, r6
 8000d28:	076a      	lsls	r2, r5, #29
 8000d2a:	d009      	beq.n	8000d40 <__aeabi_ui2f+0x68>
 8000d2c:	200f      	movs	r0, #15
 8000d2e:	4028      	ands	r0, r5
 8000d30:	2804      	cmp	r0, #4
 8000d32:	d005      	beq.n	8000d40 <__aeabi_ui2f+0x68>
 8000d34:	3104      	adds	r1, #4
 8000d36:	014a      	lsls	r2, r1, #5
 8000d38:	d502      	bpl.n	8000d40 <__aeabi_ui2f+0x68>
 8000d3a:	239f      	movs	r3, #159	; 0x9f
 8000d3c:	4031      	ands	r1, r6
 8000d3e:	1b1b      	subs	r3, r3, r4
 8000d40:	0189      	lsls	r1, r1, #6
 8000d42:	0a4d      	lsrs	r5, r1, #9
 8000d44:	b2d8      	uxtb	r0, r3
 8000d46:	e7db      	b.n	8000d00 <__aeabi_ui2f+0x28>
 8000d48:	1f62      	subs	r2, r4, #5
 8000d4a:	4095      	lsls	r5, r2
 8000d4c:	0029      	movs	r1, r5
 8000d4e:	4e02      	ldr	r6, [pc, #8]	; (8000d58 <__aeabi_ui2f+0x80>)
 8000d50:	4031      	ands	r1, r6
 8000d52:	076a      	lsls	r2, r5, #29
 8000d54:	d0f4      	beq.n	8000d40 <__aeabi_ui2f+0x68>
 8000d56:	e7e9      	b.n	8000d2c <__aeabi_ui2f+0x54>
 8000d58:	fbffffff 	.word	0xfbffffff

08000d5c <__aeabi_dadd>:
 8000d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d5e:	464f      	mov	r7, r9
 8000d60:	4646      	mov	r6, r8
 8000d62:	46d6      	mov	lr, sl
 8000d64:	000d      	movs	r5, r1
 8000d66:	0004      	movs	r4, r0
 8000d68:	b5c0      	push	{r6, r7, lr}
 8000d6a:	001f      	movs	r7, r3
 8000d6c:	0011      	movs	r1, r2
 8000d6e:	0328      	lsls	r0, r5, #12
 8000d70:	0f62      	lsrs	r2, r4, #29
 8000d72:	0a40      	lsrs	r0, r0, #9
 8000d74:	4310      	orrs	r0, r2
 8000d76:	007a      	lsls	r2, r7, #1
 8000d78:	0d52      	lsrs	r2, r2, #21
 8000d7a:	00e3      	lsls	r3, r4, #3
 8000d7c:	033c      	lsls	r4, r7, #12
 8000d7e:	4691      	mov	r9, r2
 8000d80:	0a64      	lsrs	r4, r4, #9
 8000d82:	0ffa      	lsrs	r2, r7, #31
 8000d84:	0f4f      	lsrs	r7, r1, #29
 8000d86:	006e      	lsls	r6, r5, #1
 8000d88:	4327      	orrs	r7, r4
 8000d8a:	4692      	mov	sl, r2
 8000d8c:	46b8      	mov	r8, r7
 8000d8e:	0d76      	lsrs	r6, r6, #21
 8000d90:	0fed      	lsrs	r5, r5, #31
 8000d92:	00c9      	lsls	r1, r1, #3
 8000d94:	4295      	cmp	r5, r2
 8000d96:	d100      	bne.n	8000d9a <__aeabi_dadd+0x3e>
 8000d98:	e099      	b.n	8000ece <__aeabi_dadd+0x172>
 8000d9a:	464c      	mov	r4, r9
 8000d9c:	1b34      	subs	r4, r6, r4
 8000d9e:	46a4      	mov	ip, r4
 8000da0:	2c00      	cmp	r4, #0
 8000da2:	dc00      	bgt.n	8000da6 <__aeabi_dadd+0x4a>
 8000da4:	e07c      	b.n	8000ea0 <__aeabi_dadd+0x144>
 8000da6:	464a      	mov	r2, r9
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	d100      	bne.n	8000dae <__aeabi_dadd+0x52>
 8000dac:	e0b8      	b.n	8000f20 <__aeabi_dadd+0x1c4>
 8000dae:	4ac5      	ldr	r2, [pc, #788]	; (80010c4 <__aeabi_dadd+0x368>)
 8000db0:	4296      	cmp	r6, r2
 8000db2:	d100      	bne.n	8000db6 <__aeabi_dadd+0x5a>
 8000db4:	e11c      	b.n	8000ff0 <__aeabi_dadd+0x294>
 8000db6:	2280      	movs	r2, #128	; 0x80
 8000db8:	003c      	movs	r4, r7
 8000dba:	0412      	lsls	r2, r2, #16
 8000dbc:	4314      	orrs	r4, r2
 8000dbe:	46a0      	mov	r8, r4
 8000dc0:	4662      	mov	r2, ip
 8000dc2:	2a38      	cmp	r2, #56	; 0x38
 8000dc4:	dd00      	ble.n	8000dc8 <__aeabi_dadd+0x6c>
 8000dc6:	e161      	b.n	800108c <__aeabi_dadd+0x330>
 8000dc8:	2a1f      	cmp	r2, #31
 8000dca:	dd00      	ble.n	8000dce <__aeabi_dadd+0x72>
 8000dcc:	e1cc      	b.n	8001168 <__aeabi_dadd+0x40c>
 8000dce:	4664      	mov	r4, ip
 8000dd0:	2220      	movs	r2, #32
 8000dd2:	1b12      	subs	r2, r2, r4
 8000dd4:	4644      	mov	r4, r8
 8000dd6:	4094      	lsls	r4, r2
 8000dd8:	000f      	movs	r7, r1
 8000dda:	46a1      	mov	r9, r4
 8000ddc:	4664      	mov	r4, ip
 8000dde:	4091      	lsls	r1, r2
 8000de0:	40e7      	lsrs	r7, r4
 8000de2:	464c      	mov	r4, r9
 8000de4:	1e4a      	subs	r2, r1, #1
 8000de6:	4191      	sbcs	r1, r2
 8000de8:	433c      	orrs	r4, r7
 8000dea:	4642      	mov	r2, r8
 8000dec:	4321      	orrs	r1, r4
 8000dee:	4664      	mov	r4, ip
 8000df0:	40e2      	lsrs	r2, r4
 8000df2:	1a80      	subs	r0, r0, r2
 8000df4:	1a5c      	subs	r4, r3, r1
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	419b      	sbcs	r3, r3
 8000dfa:	425f      	negs	r7, r3
 8000dfc:	1bc7      	subs	r7, r0, r7
 8000dfe:	023b      	lsls	r3, r7, #8
 8000e00:	d400      	bmi.n	8000e04 <__aeabi_dadd+0xa8>
 8000e02:	e0d0      	b.n	8000fa6 <__aeabi_dadd+0x24a>
 8000e04:	027f      	lsls	r7, r7, #9
 8000e06:	0a7f      	lsrs	r7, r7, #9
 8000e08:	2f00      	cmp	r7, #0
 8000e0a:	d100      	bne.n	8000e0e <__aeabi_dadd+0xb2>
 8000e0c:	e0ff      	b.n	800100e <__aeabi_dadd+0x2b2>
 8000e0e:	0038      	movs	r0, r7
 8000e10:	f001 fdd2 	bl	80029b8 <__clzsi2>
 8000e14:	0001      	movs	r1, r0
 8000e16:	3908      	subs	r1, #8
 8000e18:	2320      	movs	r3, #32
 8000e1a:	0022      	movs	r2, r4
 8000e1c:	1a5b      	subs	r3, r3, r1
 8000e1e:	408f      	lsls	r7, r1
 8000e20:	40da      	lsrs	r2, r3
 8000e22:	408c      	lsls	r4, r1
 8000e24:	4317      	orrs	r7, r2
 8000e26:	42b1      	cmp	r1, r6
 8000e28:	da00      	bge.n	8000e2c <__aeabi_dadd+0xd0>
 8000e2a:	e0ff      	b.n	800102c <__aeabi_dadd+0x2d0>
 8000e2c:	1b89      	subs	r1, r1, r6
 8000e2e:	1c4b      	adds	r3, r1, #1
 8000e30:	2b1f      	cmp	r3, #31
 8000e32:	dd00      	ble.n	8000e36 <__aeabi_dadd+0xda>
 8000e34:	e0a8      	b.n	8000f88 <__aeabi_dadd+0x22c>
 8000e36:	2220      	movs	r2, #32
 8000e38:	0039      	movs	r1, r7
 8000e3a:	1ad2      	subs	r2, r2, r3
 8000e3c:	0020      	movs	r0, r4
 8000e3e:	4094      	lsls	r4, r2
 8000e40:	4091      	lsls	r1, r2
 8000e42:	40d8      	lsrs	r0, r3
 8000e44:	1e62      	subs	r2, r4, #1
 8000e46:	4194      	sbcs	r4, r2
 8000e48:	40df      	lsrs	r7, r3
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	4301      	orrs	r1, r0
 8000e4e:	430c      	orrs	r4, r1
 8000e50:	0763      	lsls	r3, r4, #29
 8000e52:	d009      	beq.n	8000e68 <__aeabi_dadd+0x10c>
 8000e54:	230f      	movs	r3, #15
 8000e56:	4023      	ands	r3, r4
 8000e58:	2b04      	cmp	r3, #4
 8000e5a:	d005      	beq.n	8000e68 <__aeabi_dadd+0x10c>
 8000e5c:	1d23      	adds	r3, r4, #4
 8000e5e:	42a3      	cmp	r3, r4
 8000e60:	41a4      	sbcs	r4, r4
 8000e62:	4264      	negs	r4, r4
 8000e64:	193f      	adds	r7, r7, r4
 8000e66:	001c      	movs	r4, r3
 8000e68:	023b      	lsls	r3, r7, #8
 8000e6a:	d400      	bmi.n	8000e6e <__aeabi_dadd+0x112>
 8000e6c:	e09e      	b.n	8000fac <__aeabi_dadd+0x250>
 8000e6e:	4b95      	ldr	r3, [pc, #596]	; (80010c4 <__aeabi_dadd+0x368>)
 8000e70:	3601      	adds	r6, #1
 8000e72:	429e      	cmp	r6, r3
 8000e74:	d100      	bne.n	8000e78 <__aeabi_dadd+0x11c>
 8000e76:	e0b7      	b.n	8000fe8 <__aeabi_dadd+0x28c>
 8000e78:	4a93      	ldr	r2, [pc, #588]	; (80010c8 <__aeabi_dadd+0x36c>)
 8000e7a:	08e4      	lsrs	r4, r4, #3
 8000e7c:	4017      	ands	r7, r2
 8000e7e:	077b      	lsls	r3, r7, #29
 8000e80:	0571      	lsls	r1, r6, #21
 8000e82:	027f      	lsls	r7, r7, #9
 8000e84:	4323      	orrs	r3, r4
 8000e86:	0b3f      	lsrs	r7, r7, #12
 8000e88:	0d4a      	lsrs	r2, r1, #21
 8000e8a:	0512      	lsls	r2, r2, #20
 8000e8c:	433a      	orrs	r2, r7
 8000e8e:	07ed      	lsls	r5, r5, #31
 8000e90:	432a      	orrs	r2, r5
 8000e92:	0018      	movs	r0, r3
 8000e94:	0011      	movs	r1, r2
 8000e96:	bce0      	pop	{r5, r6, r7}
 8000e98:	46ba      	mov	sl, r7
 8000e9a:	46b1      	mov	r9, r6
 8000e9c:	46a8      	mov	r8, r5
 8000e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ea0:	2c00      	cmp	r4, #0
 8000ea2:	d04b      	beq.n	8000f3c <__aeabi_dadd+0x1e0>
 8000ea4:	464c      	mov	r4, r9
 8000ea6:	1ba4      	subs	r4, r4, r6
 8000ea8:	46a4      	mov	ip, r4
 8000eaa:	2e00      	cmp	r6, #0
 8000eac:	d000      	beq.n	8000eb0 <__aeabi_dadd+0x154>
 8000eae:	e123      	b.n	80010f8 <__aeabi_dadd+0x39c>
 8000eb0:	0004      	movs	r4, r0
 8000eb2:	431c      	orrs	r4, r3
 8000eb4:	d100      	bne.n	8000eb8 <__aeabi_dadd+0x15c>
 8000eb6:	e1af      	b.n	8001218 <__aeabi_dadd+0x4bc>
 8000eb8:	4662      	mov	r2, ip
 8000eba:	1e54      	subs	r4, r2, #1
 8000ebc:	2a01      	cmp	r2, #1
 8000ebe:	d100      	bne.n	8000ec2 <__aeabi_dadd+0x166>
 8000ec0:	e215      	b.n	80012ee <__aeabi_dadd+0x592>
 8000ec2:	4d80      	ldr	r5, [pc, #512]	; (80010c4 <__aeabi_dadd+0x368>)
 8000ec4:	45ac      	cmp	ip, r5
 8000ec6:	d100      	bne.n	8000eca <__aeabi_dadd+0x16e>
 8000ec8:	e1c8      	b.n	800125c <__aeabi_dadd+0x500>
 8000eca:	46a4      	mov	ip, r4
 8000ecc:	e11b      	b.n	8001106 <__aeabi_dadd+0x3aa>
 8000ece:	464a      	mov	r2, r9
 8000ed0:	1ab2      	subs	r2, r6, r2
 8000ed2:	4694      	mov	ip, r2
 8000ed4:	2a00      	cmp	r2, #0
 8000ed6:	dc00      	bgt.n	8000eda <__aeabi_dadd+0x17e>
 8000ed8:	e0ac      	b.n	8001034 <__aeabi_dadd+0x2d8>
 8000eda:	464a      	mov	r2, r9
 8000edc:	2a00      	cmp	r2, #0
 8000ede:	d043      	beq.n	8000f68 <__aeabi_dadd+0x20c>
 8000ee0:	4a78      	ldr	r2, [pc, #480]	; (80010c4 <__aeabi_dadd+0x368>)
 8000ee2:	4296      	cmp	r6, r2
 8000ee4:	d100      	bne.n	8000ee8 <__aeabi_dadd+0x18c>
 8000ee6:	e1af      	b.n	8001248 <__aeabi_dadd+0x4ec>
 8000ee8:	2280      	movs	r2, #128	; 0x80
 8000eea:	003c      	movs	r4, r7
 8000eec:	0412      	lsls	r2, r2, #16
 8000eee:	4314      	orrs	r4, r2
 8000ef0:	46a0      	mov	r8, r4
 8000ef2:	4662      	mov	r2, ip
 8000ef4:	2a38      	cmp	r2, #56	; 0x38
 8000ef6:	dc67      	bgt.n	8000fc8 <__aeabi_dadd+0x26c>
 8000ef8:	2a1f      	cmp	r2, #31
 8000efa:	dc00      	bgt.n	8000efe <__aeabi_dadd+0x1a2>
 8000efc:	e15f      	b.n	80011be <__aeabi_dadd+0x462>
 8000efe:	4647      	mov	r7, r8
 8000f00:	3a20      	subs	r2, #32
 8000f02:	40d7      	lsrs	r7, r2
 8000f04:	4662      	mov	r2, ip
 8000f06:	2a20      	cmp	r2, #32
 8000f08:	d005      	beq.n	8000f16 <__aeabi_dadd+0x1ba>
 8000f0a:	4664      	mov	r4, ip
 8000f0c:	2240      	movs	r2, #64	; 0x40
 8000f0e:	1b12      	subs	r2, r2, r4
 8000f10:	4644      	mov	r4, r8
 8000f12:	4094      	lsls	r4, r2
 8000f14:	4321      	orrs	r1, r4
 8000f16:	1e4a      	subs	r2, r1, #1
 8000f18:	4191      	sbcs	r1, r2
 8000f1a:	000c      	movs	r4, r1
 8000f1c:	433c      	orrs	r4, r7
 8000f1e:	e057      	b.n	8000fd0 <__aeabi_dadd+0x274>
 8000f20:	003a      	movs	r2, r7
 8000f22:	430a      	orrs	r2, r1
 8000f24:	d100      	bne.n	8000f28 <__aeabi_dadd+0x1cc>
 8000f26:	e105      	b.n	8001134 <__aeabi_dadd+0x3d8>
 8000f28:	0022      	movs	r2, r4
 8000f2a:	3a01      	subs	r2, #1
 8000f2c:	2c01      	cmp	r4, #1
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_dadd+0x1d6>
 8000f30:	e182      	b.n	8001238 <__aeabi_dadd+0x4dc>
 8000f32:	4c64      	ldr	r4, [pc, #400]	; (80010c4 <__aeabi_dadd+0x368>)
 8000f34:	45a4      	cmp	ip, r4
 8000f36:	d05b      	beq.n	8000ff0 <__aeabi_dadd+0x294>
 8000f38:	4694      	mov	ip, r2
 8000f3a:	e741      	b.n	8000dc0 <__aeabi_dadd+0x64>
 8000f3c:	4c63      	ldr	r4, [pc, #396]	; (80010cc <__aeabi_dadd+0x370>)
 8000f3e:	1c77      	adds	r7, r6, #1
 8000f40:	4227      	tst	r7, r4
 8000f42:	d000      	beq.n	8000f46 <__aeabi_dadd+0x1ea>
 8000f44:	e0c4      	b.n	80010d0 <__aeabi_dadd+0x374>
 8000f46:	0004      	movs	r4, r0
 8000f48:	431c      	orrs	r4, r3
 8000f4a:	2e00      	cmp	r6, #0
 8000f4c:	d000      	beq.n	8000f50 <__aeabi_dadd+0x1f4>
 8000f4e:	e169      	b.n	8001224 <__aeabi_dadd+0x4c8>
 8000f50:	2c00      	cmp	r4, #0
 8000f52:	d100      	bne.n	8000f56 <__aeabi_dadd+0x1fa>
 8000f54:	e1bf      	b.n	80012d6 <__aeabi_dadd+0x57a>
 8000f56:	4644      	mov	r4, r8
 8000f58:	430c      	orrs	r4, r1
 8000f5a:	d000      	beq.n	8000f5e <__aeabi_dadd+0x202>
 8000f5c:	e1d0      	b.n	8001300 <__aeabi_dadd+0x5a4>
 8000f5e:	0742      	lsls	r2, r0, #29
 8000f60:	08db      	lsrs	r3, r3, #3
 8000f62:	4313      	orrs	r3, r2
 8000f64:	08c0      	lsrs	r0, r0, #3
 8000f66:	e029      	b.n	8000fbc <__aeabi_dadd+0x260>
 8000f68:	003a      	movs	r2, r7
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	d100      	bne.n	8000f70 <__aeabi_dadd+0x214>
 8000f6e:	e170      	b.n	8001252 <__aeabi_dadd+0x4f6>
 8000f70:	4662      	mov	r2, ip
 8000f72:	4664      	mov	r4, ip
 8000f74:	3a01      	subs	r2, #1
 8000f76:	2c01      	cmp	r4, #1
 8000f78:	d100      	bne.n	8000f7c <__aeabi_dadd+0x220>
 8000f7a:	e0e0      	b.n	800113e <__aeabi_dadd+0x3e2>
 8000f7c:	4c51      	ldr	r4, [pc, #324]	; (80010c4 <__aeabi_dadd+0x368>)
 8000f7e:	45a4      	cmp	ip, r4
 8000f80:	d100      	bne.n	8000f84 <__aeabi_dadd+0x228>
 8000f82:	e161      	b.n	8001248 <__aeabi_dadd+0x4ec>
 8000f84:	4694      	mov	ip, r2
 8000f86:	e7b4      	b.n	8000ef2 <__aeabi_dadd+0x196>
 8000f88:	003a      	movs	r2, r7
 8000f8a:	391f      	subs	r1, #31
 8000f8c:	40ca      	lsrs	r2, r1
 8000f8e:	0011      	movs	r1, r2
 8000f90:	2b20      	cmp	r3, #32
 8000f92:	d003      	beq.n	8000f9c <__aeabi_dadd+0x240>
 8000f94:	2240      	movs	r2, #64	; 0x40
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	409f      	lsls	r7, r3
 8000f9a:	433c      	orrs	r4, r7
 8000f9c:	1e63      	subs	r3, r4, #1
 8000f9e:	419c      	sbcs	r4, r3
 8000fa0:	2700      	movs	r7, #0
 8000fa2:	2600      	movs	r6, #0
 8000fa4:	430c      	orrs	r4, r1
 8000fa6:	0763      	lsls	r3, r4, #29
 8000fa8:	d000      	beq.n	8000fac <__aeabi_dadd+0x250>
 8000faa:	e753      	b.n	8000e54 <__aeabi_dadd+0xf8>
 8000fac:	46b4      	mov	ip, r6
 8000fae:	08e4      	lsrs	r4, r4, #3
 8000fb0:	077b      	lsls	r3, r7, #29
 8000fb2:	4323      	orrs	r3, r4
 8000fb4:	08f8      	lsrs	r0, r7, #3
 8000fb6:	4a43      	ldr	r2, [pc, #268]	; (80010c4 <__aeabi_dadd+0x368>)
 8000fb8:	4594      	cmp	ip, r2
 8000fba:	d01d      	beq.n	8000ff8 <__aeabi_dadd+0x29c>
 8000fbc:	4662      	mov	r2, ip
 8000fbe:	0307      	lsls	r7, r0, #12
 8000fc0:	0552      	lsls	r2, r2, #21
 8000fc2:	0b3f      	lsrs	r7, r7, #12
 8000fc4:	0d52      	lsrs	r2, r2, #21
 8000fc6:	e760      	b.n	8000e8a <__aeabi_dadd+0x12e>
 8000fc8:	4644      	mov	r4, r8
 8000fca:	430c      	orrs	r4, r1
 8000fcc:	1e62      	subs	r2, r4, #1
 8000fce:	4194      	sbcs	r4, r2
 8000fd0:	18e4      	adds	r4, r4, r3
 8000fd2:	429c      	cmp	r4, r3
 8000fd4:	419b      	sbcs	r3, r3
 8000fd6:	425f      	negs	r7, r3
 8000fd8:	183f      	adds	r7, r7, r0
 8000fda:	023b      	lsls	r3, r7, #8
 8000fdc:	d5e3      	bpl.n	8000fa6 <__aeabi_dadd+0x24a>
 8000fde:	4b39      	ldr	r3, [pc, #228]	; (80010c4 <__aeabi_dadd+0x368>)
 8000fe0:	3601      	adds	r6, #1
 8000fe2:	429e      	cmp	r6, r3
 8000fe4:	d000      	beq.n	8000fe8 <__aeabi_dadd+0x28c>
 8000fe6:	e0b5      	b.n	8001154 <__aeabi_dadd+0x3f8>
 8000fe8:	0032      	movs	r2, r6
 8000fea:	2700      	movs	r7, #0
 8000fec:	2300      	movs	r3, #0
 8000fee:	e74c      	b.n	8000e8a <__aeabi_dadd+0x12e>
 8000ff0:	0742      	lsls	r2, r0, #29
 8000ff2:	08db      	lsrs	r3, r3, #3
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	08c0      	lsrs	r0, r0, #3
 8000ff8:	001a      	movs	r2, r3
 8000ffa:	4302      	orrs	r2, r0
 8000ffc:	d100      	bne.n	8001000 <__aeabi_dadd+0x2a4>
 8000ffe:	e1e1      	b.n	80013c4 <__aeabi_dadd+0x668>
 8001000:	2780      	movs	r7, #128	; 0x80
 8001002:	033f      	lsls	r7, r7, #12
 8001004:	4307      	orrs	r7, r0
 8001006:	033f      	lsls	r7, r7, #12
 8001008:	4a2e      	ldr	r2, [pc, #184]	; (80010c4 <__aeabi_dadd+0x368>)
 800100a:	0b3f      	lsrs	r7, r7, #12
 800100c:	e73d      	b.n	8000e8a <__aeabi_dadd+0x12e>
 800100e:	0020      	movs	r0, r4
 8001010:	f001 fcd2 	bl	80029b8 <__clzsi2>
 8001014:	0001      	movs	r1, r0
 8001016:	3118      	adds	r1, #24
 8001018:	291f      	cmp	r1, #31
 800101a:	dc00      	bgt.n	800101e <__aeabi_dadd+0x2c2>
 800101c:	e6fc      	b.n	8000e18 <__aeabi_dadd+0xbc>
 800101e:	3808      	subs	r0, #8
 8001020:	4084      	lsls	r4, r0
 8001022:	0027      	movs	r7, r4
 8001024:	2400      	movs	r4, #0
 8001026:	42b1      	cmp	r1, r6
 8001028:	db00      	blt.n	800102c <__aeabi_dadd+0x2d0>
 800102a:	e6ff      	b.n	8000e2c <__aeabi_dadd+0xd0>
 800102c:	4a26      	ldr	r2, [pc, #152]	; (80010c8 <__aeabi_dadd+0x36c>)
 800102e:	1a76      	subs	r6, r6, r1
 8001030:	4017      	ands	r7, r2
 8001032:	e70d      	b.n	8000e50 <__aeabi_dadd+0xf4>
 8001034:	2a00      	cmp	r2, #0
 8001036:	d02f      	beq.n	8001098 <__aeabi_dadd+0x33c>
 8001038:	464a      	mov	r2, r9
 800103a:	1b92      	subs	r2, r2, r6
 800103c:	4694      	mov	ip, r2
 800103e:	2e00      	cmp	r6, #0
 8001040:	d100      	bne.n	8001044 <__aeabi_dadd+0x2e8>
 8001042:	e0ad      	b.n	80011a0 <__aeabi_dadd+0x444>
 8001044:	4a1f      	ldr	r2, [pc, #124]	; (80010c4 <__aeabi_dadd+0x368>)
 8001046:	4591      	cmp	r9, r2
 8001048:	d100      	bne.n	800104c <__aeabi_dadd+0x2f0>
 800104a:	e10f      	b.n	800126c <__aeabi_dadd+0x510>
 800104c:	2280      	movs	r2, #128	; 0x80
 800104e:	0412      	lsls	r2, r2, #16
 8001050:	4310      	orrs	r0, r2
 8001052:	4662      	mov	r2, ip
 8001054:	2a38      	cmp	r2, #56	; 0x38
 8001056:	dd00      	ble.n	800105a <__aeabi_dadd+0x2fe>
 8001058:	e10f      	b.n	800127a <__aeabi_dadd+0x51e>
 800105a:	2a1f      	cmp	r2, #31
 800105c:	dd00      	ble.n	8001060 <__aeabi_dadd+0x304>
 800105e:	e180      	b.n	8001362 <__aeabi_dadd+0x606>
 8001060:	4664      	mov	r4, ip
 8001062:	2220      	movs	r2, #32
 8001064:	001e      	movs	r6, r3
 8001066:	1b12      	subs	r2, r2, r4
 8001068:	4667      	mov	r7, ip
 800106a:	0004      	movs	r4, r0
 800106c:	4093      	lsls	r3, r2
 800106e:	4094      	lsls	r4, r2
 8001070:	40fe      	lsrs	r6, r7
 8001072:	1e5a      	subs	r2, r3, #1
 8001074:	4193      	sbcs	r3, r2
 8001076:	40f8      	lsrs	r0, r7
 8001078:	4334      	orrs	r4, r6
 800107a:	431c      	orrs	r4, r3
 800107c:	4480      	add	r8, r0
 800107e:	1864      	adds	r4, r4, r1
 8001080:	428c      	cmp	r4, r1
 8001082:	41bf      	sbcs	r7, r7
 8001084:	427f      	negs	r7, r7
 8001086:	464e      	mov	r6, r9
 8001088:	4447      	add	r7, r8
 800108a:	e7a6      	b.n	8000fda <__aeabi_dadd+0x27e>
 800108c:	4642      	mov	r2, r8
 800108e:	430a      	orrs	r2, r1
 8001090:	0011      	movs	r1, r2
 8001092:	1e4a      	subs	r2, r1, #1
 8001094:	4191      	sbcs	r1, r2
 8001096:	e6ad      	b.n	8000df4 <__aeabi_dadd+0x98>
 8001098:	4c0c      	ldr	r4, [pc, #48]	; (80010cc <__aeabi_dadd+0x370>)
 800109a:	1c72      	adds	r2, r6, #1
 800109c:	4222      	tst	r2, r4
 800109e:	d000      	beq.n	80010a2 <__aeabi_dadd+0x346>
 80010a0:	e0a1      	b.n	80011e6 <__aeabi_dadd+0x48a>
 80010a2:	0002      	movs	r2, r0
 80010a4:	431a      	orrs	r2, r3
 80010a6:	2e00      	cmp	r6, #0
 80010a8:	d000      	beq.n	80010ac <__aeabi_dadd+0x350>
 80010aa:	e0fa      	b.n	80012a2 <__aeabi_dadd+0x546>
 80010ac:	2a00      	cmp	r2, #0
 80010ae:	d100      	bne.n	80010b2 <__aeabi_dadd+0x356>
 80010b0:	e145      	b.n	800133e <__aeabi_dadd+0x5e2>
 80010b2:	003a      	movs	r2, r7
 80010b4:	430a      	orrs	r2, r1
 80010b6:	d000      	beq.n	80010ba <__aeabi_dadd+0x35e>
 80010b8:	e146      	b.n	8001348 <__aeabi_dadd+0x5ec>
 80010ba:	0742      	lsls	r2, r0, #29
 80010bc:	08db      	lsrs	r3, r3, #3
 80010be:	4313      	orrs	r3, r2
 80010c0:	08c0      	lsrs	r0, r0, #3
 80010c2:	e77b      	b.n	8000fbc <__aeabi_dadd+0x260>
 80010c4:	000007ff 	.word	0x000007ff
 80010c8:	ff7fffff 	.word	0xff7fffff
 80010cc:	000007fe 	.word	0x000007fe
 80010d0:	4647      	mov	r7, r8
 80010d2:	1a5c      	subs	r4, r3, r1
 80010d4:	1bc2      	subs	r2, r0, r7
 80010d6:	42a3      	cmp	r3, r4
 80010d8:	41bf      	sbcs	r7, r7
 80010da:	427f      	negs	r7, r7
 80010dc:	46b9      	mov	r9, r7
 80010de:	0017      	movs	r7, r2
 80010e0:	464a      	mov	r2, r9
 80010e2:	1abf      	subs	r7, r7, r2
 80010e4:	023a      	lsls	r2, r7, #8
 80010e6:	d500      	bpl.n	80010ea <__aeabi_dadd+0x38e>
 80010e8:	e08d      	b.n	8001206 <__aeabi_dadd+0x4aa>
 80010ea:	0023      	movs	r3, r4
 80010ec:	433b      	orrs	r3, r7
 80010ee:	d000      	beq.n	80010f2 <__aeabi_dadd+0x396>
 80010f0:	e68a      	b.n	8000e08 <__aeabi_dadd+0xac>
 80010f2:	2000      	movs	r0, #0
 80010f4:	2500      	movs	r5, #0
 80010f6:	e761      	b.n	8000fbc <__aeabi_dadd+0x260>
 80010f8:	4cb4      	ldr	r4, [pc, #720]	; (80013cc <__aeabi_dadd+0x670>)
 80010fa:	45a1      	cmp	r9, r4
 80010fc:	d100      	bne.n	8001100 <__aeabi_dadd+0x3a4>
 80010fe:	e0ad      	b.n	800125c <__aeabi_dadd+0x500>
 8001100:	2480      	movs	r4, #128	; 0x80
 8001102:	0424      	lsls	r4, r4, #16
 8001104:	4320      	orrs	r0, r4
 8001106:	4664      	mov	r4, ip
 8001108:	2c38      	cmp	r4, #56	; 0x38
 800110a:	dc3d      	bgt.n	8001188 <__aeabi_dadd+0x42c>
 800110c:	4662      	mov	r2, ip
 800110e:	2c1f      	cmp	r4, #31
 8001110:	dd00      	ble.n	8001114 <__aeabi_dadd+0x3b8>
 8001112:	e0b7      	b.n	8001284 <__aeabi_dadd+0x528>
 8001114:	2520      	movs	r5, #32
 8001116:	001e      	movs	r6, r3
 8001118:	1b2d      	subs	r5, r5, r4
 800111a:	0004      	movs	r4, r0
 800111c:	40ab      	lsls	r3, r5
 800111e:	40ac      	lsls	r4, r5
 8001120:	40d6      	lsrs	r6, r2
 8001122:	40d0      	lsrs	r0, r2
 8001124:	4642      	mov	r2, r8
 8001126:	1e5d      	subs	r5, r3, #1
 8001128:	41ab      	sbcs	r3, r5
 800112a:	4334      	orrs	r4, r6
 800112c:	1a12      	subs	r2, r2, r0
 800112e:	4690      	mov	r8, r2
 8001130:	4323      	orrs	r3, r4
 8001132:	e02c      	b.n	800118e <__aeabi_dadd+0x432>
 8001134:	0742      	lsls	r2, r0, #29
 8001136:	08db      	lsrs	r3, r3, #3
 8001138:	4313      	orrs	r3, r2
 800113a:	08c0      	lsrs	r0, r0, #3
 800113c:	e73b      	b.n	8000fb6 <__aeabi_dadd+0x25a>
 800113e:	185c      	adds	r4, r3, r1
 8001140:	429c      	cmp	r4, r3
 8001142:	419b      	sbcs	r3, r3
 8001144:	4440      	add	r0, r8
 8001146:	425b      	negs	r3, r3
 8001148:	18c7      	adds	r7, r0, r3
 800114a:	2601      	movs	r6, #1
 800114c:	023b      	lsls	r3, r7, #8
 800114e:	d400      	bmi.n	8001152 <__aeabi_dadd+0x3f6>
 8001150:	e729      	b.n	8000fa6 <__aeabi_dadd+0x24a>
 8001152:	2602      	movs	r6, #2
 8001154:	4a9e      	ldr	r2, [pc, #632]	; (80013d0 <__aeabi_dadd+0x674>)
 8001156:	0863      	lsrs	r3, r4, #1
 8001158:	4017      	ands	r7, r2
 800115a:	2201      	movs	r2, #1
 800115c:	4014      	ands	r4, r2
 800115e:	431c      	orrs	r4, r3
 8001160:	07fb      	lsls	r3, r7, #31
 8001162:	431c      	orrs	r4, r3
 8001164:	087f      	lsrs	r7, r7, #1
 8001166:	e673      	b.n	8000e50 <__aeabi_dadd+0xf4>
 8001168:	4644      	mov	r4, r8
 800116a:	3a20      	subs	r2, #32
 800116c:	40d4      	lsrs	r4, r2
 800116e:	4662      	mov	r2, ip
 8001170:	2a20      	cmp	r2, #32
 8001172:	d005      	beq.n	8001180 <__aeabi_dadd+0x424>
 8001174:	4667      	mov	r7, ip
 8001176:	2240      	movs	r2, #64	; 0x40
 8001178:	1bd2      	subs	r2, r2, r7
 800117a:	4647      	mov	r7, r8
 800117c:	4097      	lsls	r7, r2
 800117e:	4339      	orrs	r1, r7
 8001180:	1e4a      	subs	r2, r1, #1
 8001182:	4191      	sbcs	r1, r2
 8001184:	4321      	orrs	r1, r4
 8001186:	e635      	b.n	8000df4 <__aeabi_dadd+0x98>
 8001188:	4303      	orrs	r3, r0
 800118a:	1e58      	subs	r0, r3, #1
 800118c:	4183      	sbcs	r3, r0
 800118e:	1acc      	subs	r4, r1, r3
 8001190:	42a1      	cmp	r1, r4
 8001192:	41bf      	sbcs	r7, r7
 8001194:	4643      	mov	r3, r8
 8001196:	427f      	negs	r7, r7
 8001198:	4655      	mov	r5, sl
 800119a:	464e      	mov	r6, r9
 800119c:	1bdf      	subs	r7, r3, r7
 800119e:	e62e      	b.n	8000dfe <__aeabi_dadd+0xa2>
 80011a0:	0002      	movs	r2, r0
 80011a2:	431a      	orrs	r2, r3
 80011a4:	d100      	bne.n	80011a8 <__aeabi_dadd+0x44c>
 80011a6:	e0bd      	b.n	8001324 <__aeabi_dadd+0x5c8>
 80011a8:	4662      	mov	r2, ip
 80011aa:	4664      	mov	r4, ip
 80011ac:	3a01      	subs	r2, #1
 80011ae:	2c01      	cmp	r4, #1
 80011b0:	d100      	bne.n	80011b4 <__aeabi_dadd+0x458>
 80011b2:	e0e5      	b.n	8001380 <__aeabi_dadd+0x624>
 80011b4:	4c85      	ldr	r4, [pc, #532]	; (80013cc <__aeabi_dadd+0x670>)
 80011b6:	45a4      	cmp	ip, r4
 80011b8:	d058      	beq.n	800126c <__aeabi_dadd+0x510>
 80011ba:	4694      	mov	ip, r2
 80011bc:	e749      	b.n	8001052 <__aeabi_dadd+0x2f6>
 80011be:	4664      	mov	r4, ip
 80011c0:	2220      	movs	r2, #32
 80011c2:	1b12      	subs	r2, r2, r4
 80011c4:	4644      	mov	r4, r8
 80011c6:	4094      	lsls	r4, r2
 80011c8:	000f      	movs	r7, r1
 80011ca:	46a1      	mov	r9, r4
 80011cc:	4664      	mov	r4, ip
 80011ce:	4091      	lsls	r1, r2
 80011d0:	40e7      	lsrs	r7, r4
 80011d2:	464c      	mov	r4, r9
 80011d4:	1e4a      	subs	r2, r1, #1
 80011d6:	4191      	sbcs	r1, r2
 80011d8:	433c      	orrs	r4, r7
 80011da:	4642      	mov	r2, r8
 80011dc:	430c      	orrs	r4, r1
 80011de:	4661      	mov	r1, ip
 80011e0:	40ca      	lsrs	r2, r1
 80011e2:	1880      	adds	r0, r0, r2
 80011e4:	e6f4      	b.n	8000fd0 <__aeabi_dadd+0x274>
 80011e6:	4c79      	ldr	r4, [pc, #484]	; (80013cc <__aeabi_dadd+0x670>)
 80011e8:	42a2      	cmp	r2, r4
 80011ea:	d100      	bne.n	80011ee <__aeabi_dadd+0x492>
 80011ec:	e6fd      	b.n	8000fea <__aeabi_dadd+0x28e>
 80011ee:	1859      	adds	r1, r3, r1
 80011f0:	4299      	cmp	r1, r3
 80011f2:	419b      	sbcs	r3, r3
 80011f4:	4440      	add	r0, r8
 80011f6:	425f      	negs	r7, r3
 80011f8:	19c7      	adds	r7, r0, r7
 80011fa:	07fc      	lsls	r4, r7, #31
 80011fc:	0849      	lsrs	r1, r1, #1
 80011fe:	0016      	movs	r6, r2
 8001200:	430c      	orrs	r4, r1
 8001202:	087f      	lsrs	r7, r7, #1
 8001204:	e6cf      	b.n	8000fa6 <__aeabi_dadd+0x24a>
 8001206:	1acc      	subs	r4, r1, r3
 8001208:	42a1      	cmp	r1, r4
 800120a:	41bf      	sbcs	r7, r7
 800120c:	4643      	mov	r3, r8
 800120e:	427f      	negs	r7, r7
 8001210:	1a18      	subs	r0, r3, r0
 8001212:	4655      	mov	r5, sl
 8001214:	1bc7      	subs	r7, r0, r7
 8001216:	e5f7      	b.n	8000e08 <__aeabi_dadd+0xac>
 8001218:	08c9      	lsrs	r1, r1, #3
 800121a:	077b      	lsls	r3, r7, #29
 800121c:	4655      	mov	r5, sl
 800121e:	430b      	orrs	r3, r1
 8001220:	08f8      	lsrs	r0, r7, #3
 8001222:	e6c8      	b.n	8000fb6 <__aeabi_dadd+0x25a>
 8001224:	2c00      	cmp	r4, #0
 8001226:	d000      	beq.n	800122a <__aeabi_dadd+0x4ce>
 8001228:	e081      	b.n	800132e <__aeabi_dadd+0x5d2>
 800122a:	4643      	mov	r3, r8
 800122c:	430b      	orrs	r3, r1
 800122e:	d115      	bne.n	800125c <__aeabi_dadd+0x500>
 8001230:	2080      	movs	r0, #128	; 0x80
 8001232:	2500      	movs	r5, #0
 8001234:	0300      	lsls	r0, r0, #12
 8001236:	e6e3      	b.n	8001000 <__aeabi_dadd+0x2a4>
 8001238:	1a5c      	subs	r4, r3, r1
 800123a:	42a3      	cmp	r3, r4
 800123c:	419b      	sbcs	r3, r3
 800123e:	1bc7      	subs	r7, r0, r7
 8001240:	425b      	negs	r3, r3
 8001242:	2601      	movs	r6, #1
 8001244:	1aff      	subs	r7, r7, r3
 8001246:	e5da      	b.n	8000dfe <__aeabi_dadd+0xa2>
 8001248:	0742      	lsls	r2, r0, #29
 800124a:	08db      	lsrs	r3, r3, #3
 800124c:	4313      	orrs	r3, r2
 800124e:	08c0      	lsrs	r0, r0, #3
 8001250:	e6d2      	b.n	8000ff8 <__aeabi_dadd+0x29c>
 8001252:	0742      	lsls	r2, r0, #29
 8001254:	08db      	lsrs	r3, r3, #3
 8001256:	4313      	orrs	r3, r2
 8001258:	08c0      	lsrs	r0, r0, #3
 800125a:	e6ac      	b.n	8000fb6 <__aeabi_dadd+0x25a>
 800125c:	4643      	mov	r3, r8
 800125e:	4642      	mov	r2, r8
 8001260:	08c9      	lsrs	r1, r1, #3
 8001262:	075b      	lsls	r3, r3, #29
 8001264:	4655      	mov	r5, sl
 8001266:	430b      	orrs	r3, r1
 8001268:	08d0      	lsrs	r0, r2, #3
 800126a:	e6c5      	b.n	8000ff8 <__aeabi_dadd+0x29c>
 800126c:	4643      	mov	r3, r8
 800126e:	4642      	mov	r2, r8
 8001270:	075b      	lsls	r3, r3, #29
 8001272:	08c9      	lsrs	r1, r1, #3
 8001274:	430b      	orrs	r3, r1
 8001276:	08d0      	lsrs	r0, r2, #3
 8001278:	e6be      	b.n	8000ff8 <__aeabi_dadd+0x29c>
 800127a:	4303      	orrs	r3, r0
 800127c:	001c      	movs	r4, r3
 800127e:	1e63      	subs	r3, r4, #1
 8001280:	419c      	sbcs	r4, r3
 8001282:	e6fc      	b.n	800107e <__aeabi_dadd+0x322>
 8001284:	0002      	movs	r2, r0
 8001286:	3c20      	subs	r4, #32
 8001288:	40e2      	lsrs	r2, r4
 800128a:	0014      	movs	r4, r2
 800128c:	4662      	mov	r2, ip
 800128e:	2a20      	cmp	r2, #32
 8001290:	d003      	beq.n	800129a <__aeabi_dadd+0x53e>
 8001292:	2540      	movs	r5, #64	; 0x40
 8001294:	1aad      	subs	r5, r5, r2
 8001296:	40a8      	lsls	r0, r5
 8001298:	4303      	orrs	r3, r0
 800129a:	1e58      	subs	r0, r3, #1
 800129c:	4183      	sbcs	r3, r0
 800129e:	4323      	orrs	r3, r4
 80012a0:	e775      	b.n	800118e <__aeabi_dadd+0x432>
 80012a2:	2a00      	cmp	r2, #0
 80012a4:	d0e2      	beq.n	800126c <__aeabi_dadd+0x510>
 80012a6:	003a      	movs	r2, r7
 80012a8:	430a      	orrs	r2, r1
 80012aa:	d0cd      	beq.n	8001248 <__aeabi_dadd+0x4ec>
 80012ac:	0742      	lsls	r2, r0, #29
 80012ae:	08db      	lsrs	r3, r3, #3
 80012b0:	4313      	orrs	r3, r2
 80012b2:	2280      	movs	r2, #128	; 0x80
 80012b4:	08c0      	lsrs	r0, r0, #3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	4210      	tst	r0, r2
 80012ba:	d006      	beq.n	80012ca <__aeabi_dadd+0x56e>
 80012bc:	08fc      	lsrs	r4, r7, #3
 80012be:	4214      	tst	r4, r2
 80012c0:	d103      	bne.n	80012ca <__aeabi_dadd+0x56e>
 80012c2:	0020      	movs	r0, r4
 80012c4:	08cb      	lsrs	r3, r1, #3
 80012c6:	077a      	lsls	r2, r7, #29
 80012c8:	4313      	orrs	r3, r2
 80012ca:	0f5a      	lsrs	r2, r3, #29
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	0752      	lsls	r2, r2, #29
 80012d0:	08db      	lsrs	r3, r3, #3
 80012d2:	4313      	orrs	r3, r2
 80012d4:	e690      	b.n	8000ff8 <__aeabi_dadd+0x29c>
 80012d6:	4643      	mov	r3, r8
 80012d8:	430b      	orrs	r3, r1
 80012da:	d100      	bne.n	80012de <__aeabi_dadd+0x582>
 80012dc:	e709      	b.n	80010f2 <__aeabi_dadd+0x396>
 80012de:	4643      	mov	r3, r8
 80012e0:	4642      	mov	r2, r8
 80012e2:	08c9      	lsrs	r1, r1, #3
 80012e4:	075b      	lsls	r3, r3, #29
 80012e6:	4655      	mov	r5, sl
 80012e8:	430b      	orrs	r3, r1
 80012ea:	08d0      	lsrs	r0, r2, #3
 80012ec:	e666      	b.n	8000fbc <__aeabi_dadd+0x260>
 80012ee:	1acc      	subs	r4, r1, r3
 80012f0:	42a1      	cmp	r1, r4
 80012f2:	4189      	sbcs	r1, r1
 80012f4:	1a3f      	subs	r7, r7, r0
 80012f6:	4249      	negs	r1, r1
 80012f8:	4655      	mov	r5, sl
 80012fa:	2601      	movs	r6, #1
 80012fc:	1a7f      	subs	r7, r7, r1
 80012fe:	e57e      	b.n	8000dfe <__aeabi_dadd+0xa2>
 8001300:	4642      	mov	r2, r8
 8001302:	1a5c      	subs	r4, r3, r1
 8001304:	1a87      	subs	r7, r0, r2
 8001306:	42a3      	cmp	r3, r4
 8001308:	4192      	sbcs	r2, r2
 800130a:	4252      	negs	r2, r2
 800130c:	1abf      	subs	r7, r7, r2
 800130e:	023a      	lsls	r2, r7, #8
 8001310:	d53d      	bpl.n	800138e <__aeabi_dadd+0x632>
 8001312:	1acc      	subs	r4, r1, r3
 8001314:	42a1      	cmp	r1, r4
 8001316:	4189      	sbcs	r1, r1
 8001318:	4643      	mov	r3, r8
 800131a:	4249      	negs	r1, r1
 800131c:	1a1f      	subs	r7, r3, r0
 800131e:	4655      	mov	r5, sl
 8001320:	1a7f      	subs	r7, r7, r1
 8001322:	e595      	b.n	8000e50 <__aeabi_dadd+0xf4>
 8001324:	077b      	lsls	r3, r7, #29
 8001326:	08c9      	lsrs	r1, r1, #3
 8001328:	430b      	orrs	r3, r1
 800132a:	08f8      	lsrs	r0, r7, #3
 800132c:	e643      	b.n	8000fb6 <__aeabi_dadd+0x25a>
 800132e:	4644      	mov	r4, r8
 8001330:	08db      	lsrs	r3, r3, #3
 8001332:	430c      	orrs	r4, r1
 8001334:	d130      	bne.n	8001398 <__aeabi_dadd+0x63c>
 8001336:	0742      	lsls	r2, r0, #29
 8001338:	4313      	orrs	r3, r2
 800133a:	08c0      	lsrs	r0, r0, #3
 800133c:	e65c      	b.n	8000ff8 <__aeabi_dadd+0x29c>
 800133e:	077b      	lsls	r3, r7, #29
 8001340:	08c9      	lsrs	r1, r1, #3
 8001342:	430b      	orrs	r3, r1
 8001344:	08f8      	lsrs	r0, r7, #3
 8001346:	e639      	b.n	8000fbc <__aeabi_dadd+0x260>
 8001348:	185c      	adds	r4, r3, r1
 800134a:	429c      	cmp	r4, r3
 800134c:	419b      	sbcs	r3, r3
 800134e:	4440      	add	r0, r8
 8001350:	425b      	negs	r3, r3
 8001352:	18c7      	adds	r7, r0, r3
 8001354:	023b      	lsls	r3, r7, #8
 8001356:	d400      	bmi.n	800135a <__aeabi_dadd+0x5fe>
 8001358:	e625      	b.n	8000fa6 <__aeabi_dadd+0x24a>
 800135a:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <__aeabi_dadd+0x674>)
 800135c:	2601      	movs	r6, #1
 800135e:	401f      	ands	r7, r3
 8001360:	e621      	b.n	8000fa6 <__aeabi_dadd+0x24a>
 8001362:	0004      	movs	r4, r0
 8001364:	3a20      	subs	r2, #32
 8001366:	40d4      	lsrs	r4, r2
 8001368:	4662      	mov	r2, ip
 800136a:	2a20      	cmp	r2, #32
 800136c:	d004      	beq.n	8001378 <__aeabi_dadd+0x61c>
 800136e:	2240      	movs	r2, #64	; 0x40
 8001370:	4666      	mov	r6, ip
 8001372:	1b92      	subs	r2, r2, r6
 8001374:	4090      	lsls	r0, r2
 8001376:	4303      	orrs	r3, r0
 8001378:	1e5a      	subs	r2, r3, #1
 800137a:	4193      	sbcs	r3, r2
 800137c:	431c      	orrs	r4, r3
 800137e:	e67e      	b.n	800107e <__aeabi_dadd+0x322>
 8001380:	185c      	adds	r4, r3, r1
 8001382:	428c      	cmp	r4, r1
 8001384:	4189      	sbcs	r1, r1
 8001386:	4440      	add	r0, r8
 8001388:	4249      	negs	r1, r1
 800138a:	1847      	adds	r7, r0, r1
 800138c:	e6dd      	b.n	800114a <__aeabi_dadd+0x3ee>
 800138e:	0023      	movs	r3, r4
 8001390:	433b      	orrs	r3, r7
 8001392:	d100      	bne.n	8001396 <__aeabi_dadd+0x63a>
 8001394:	e6ad      	b.n	80010f2 <__aeabi_dadd+0x396>
 8001396:	e606      	b.n	8000fa6 <__aeabi_dadd+0x24a>
 8001398:	0744      	lsls	r4, r0, #29
 800139a:	4323      	orrs	r3, r4
 800139c:	2480      	movs	r4, #128	; 0x80
 800139e:	08c0      	lsrs	r0, r0, #3
 80013a0:	0324      	lsls	r4, r4, #12
 80013a2:	4220      	tst	r0, r4
 80013a4:	d008      	beq.n	80013b8 <__aeabi_dadd+0x65c>
 80013a6:	4642      	mov	r2, r8
 80013a8:	08d6      	lsrs	r6, r2, #3
 80013aa:	4226      	tst	r6, r4
 80013ac:	d104      	bne.n	80013b8 <__aeabi_dadd+0x65c>
 80013ae:	4655      	mov	r5, sl
 80013b0:	0030      	movs	r0, r6
 80013b2:	08cb      	lsrs	r3, r1, #3
 80013b4:	0751      	lsls	r1, r2, #29
 80013b6:	430b      	orrs	r3, r1
 80013b8:	0f5a      	lsrs	r2, r3, #29
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	08db      	lsrs	r3, r3, #3
 80013be:	0752      	lsls	r2, r2, #29
 80013c0:	4313      	orrs	r3, r2
 80013c2:	e619      	b.n	8000ff8 <__aeabi_dadd+0x29c>
 80013c4:	2300      	movs	r3, #0
 80013c6:	4a01      	ldr	r2, [pc, #4]	; (80013cc <__aeabi_dadd+0x670>)
 80013c8:	001f      	movs	r7, r3
 80013ca:	e55e      	b.n	8000e8a <__aeabi_dadd+0x12e>
 80013cc:	000007ff 	.word	0x000007ff
 80013d0:	ff7fffff 	.word	0xff7fffff

080013d4 <__aeabi_ddiv>:
 80013d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013d6:	4657      	mov	r7, sl
 80013d8:	464e      	mov	r6, r9
 80013da:	4645      	mov	r5, r8
 80013dc:	46de      	mov	lr, fp
 80013de:	b5e0      	push	{r5, r6, r7, lr}
 80013e0:	4681      	mov	r9, r0
 80013e2:	0005      	movs	r5, r0
 80013e4:	030c      	lsls	r4, r1, #12
 80013e6:	0048      	lsls	r0, r1, #1
 80013e8:	4692      	mov	sl, r2
 80013ea:	001f      	movs	r7, r3
 80013ec:	b085      	sub	sp, #20
 80013ee:	0b24      	lsrs	r4, r4, #12
 80013f0:	0d40      	lsrs	r0, r0, #21
 80013f2:	0fce      	lsrs	r6, r1, #31
 80013f4:	2800      	cmp	r0, #0
 80013f6:	d100      	bne.n	80013fa <__aeabi_ddiv+0x26>
 80013f8:	e156      	b.n	80016a8 <__aeabi_ddiv+0x2d4>
 80013fa:	4bd4      	ldr	r3, [pc, #848]	; (800174c <__aeabi_ddiv+0x378>)
 80013fc:	4298      	cmp	r0, r3
 80013fe:	d100      	bne.n	8001402 <__aeabi_ddiv+0x2e>
 8001400:	e172      	b.n	80016e8 <__aeabi_ddiv+0x314>
 8001402:	0f6b      	lsrs	r3, r5, #29
 8001404:	00e4      	lsls	r4, r4, #3
 8001406:	431c      	orrs	r4, r3
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	041b      	lsls	r3, r3, #16
 800140c:	4323      	orrs	r3, r4
 800140e:	4698      	mov	r8, r3
 8001410:	4bcf      	ldr	r3, [pc, #828]	; (8001750 <__aeabi_ddiv+0x37c>)
 8001412:	00ed      	lsls	r5, r5, #3
 8001414:	469b      	mov	fp, r3
 8001416:	2300      	movs	r3, #0
 8001418:	4699      	mov	r9, r3
 800141a:	4483      	add	fp, r0
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	033c      	lsls	r4, r7, #12
 8001420:	007b      	lsls	r3, r7, #1
 8001422:	4650      	mov	r0, sl
 8001424:	0b24      	lsrs	r4, r4, #12
 8001426:	0d5b      	lsrs	r3, r3, #21
 8001428:	0fff      	lsrs	r7, r7, #31
 800142a:	2b00      	cmp	r3, #0
 800142c:	d100      	bne.n	8001430 <__aeabi_ddiv+0x5c>
 800142e:	e11f      	b.n	8001670 <__aeabi_ddiv+0x29c>
 8001430:	4ac6      	ldr	r2, [pc, #792]	; (800174c <__aeabi_ddiv+0x378>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d100      	bne.n	8001438 <__aeabi_ddiv+0x64>
 8001436:	e162      	b.n	80016fe <__aeabi_ddiv+0x32a>
 8001438:	49c5      	ldr	r1, [pc, #788]	; (8001750 <__aeabi_ddiv+0x37c>)
 800143a:	0f42      	lsrs	r2, r0, #29
 800143c:	468c      	mov	ip, r1
 800143e:	00e4      	lsls	r4, r4, #3
 8001440:	4659      	mov	r1, fp
 8001442:	4314      	orrs	r4, r2
 8001444:	2280      	movs	r2, #128	; 0x80
 8001446:	4463      	add	r3, ip
 8001448:	0412      	lsls	r2, r2, #16
 800144a:	1acb      	subs	r3, r1, r3
 800144c:	4314      	orrs	r4, r2
 800144e:	469b      	mov	fp, r3
 8001450:	00c2      	lsls	r2, r0, #3
 8001452:	2000      	movs	r0, #0
 8001454:	0033      	movs	r3, r6
 8001456:	407b      	eors	r3, r7
 8001458:	469a      	mov	sl, r3
 800145a:	464b      	mov	r3, r9
 800145c:	2b0f      	cmp	r3, #15
 800145e:	d827      	bhi.n	80014b0 <__aeabi_ddiv+0xdc>
 8001460:	49bc      	ldr	r1, [pc, #752]	; (8001754 <__aeabi_ddiv+0x380>)
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	58cb      	ldr	r3, [r1, r3]
 8001466:	469f      	mov	pc, r3
 8001468:	46b2      	mov	sl, r6
 800146a:	9b00      	ldr	r3, [sp, #0]
 800146c:	2b02      	cmp	r3, #2
 800146e:	d016      	beq.n	800149e <__aeabi_ddiv+0xca>
 8001470:	2b03      	cmp	r3, #3
 8001472:	d100      	bne.n	8001476 <__aeabi_ddiv+0xa2>
 8001474:	e28e      	b.n	8001994 <__aeabi_ddiv+0x5c0>
 8001476:	2b01      	cmp	r3, #1
 8001478:	d000      	beq.n	800147c <__aeabi_ddiv+0xa8>
 800147a:	e0d9      	b.n	8001630 <__aeabi_ddiv+0x25c>
 800147c:	2300      	movs	r3, #0
 800147e:	2400      	movs	r4, #0
 8001480:	2500      	movs	r5, #0
 8001482:	4652      	mov	r2, sl
 8001484:	051b      	lsls	r3, r3, #20
 8001486:	4323      	orrs	r3, r4
 8001488:	07d2      	lsls	r2, r2, #31
 800148a:	4313      	orrs	r3, r2
 800148c:	0028      	movs	r0, r5
 800148e:	0019      	movs	r1, r3
 8001490:	b005      	add	sp, #20
 8001492:	bcf0      	pop	{r4, r5, r6, r7}
 8001494:	46bb      	mov	fp, r7
 8001496:	46b2      	mov	sl, r6
 8001498:	46a9      	mov	r9, r5
 800149a:	46a0      	mov	r8, r4
 800149c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800149e:	2400      	movs	r4, #0
 80014a0:	2500      	movs	r5, #0
 80014a2:	4baa      	ldr	r3, [pc, #680]	; (800174c <__aeabi_ddiv+0x378>)
 80014a4:	e7ed      	b.n	8001482 <__aeabi_ddiv+0xae>
 80014a6:	46ba      	mov	sl, r7
 80014a8:	46a0      	mov	r8, r4
 80014aa:	0015      	movs	r5, r2
 80014ac:	9000      	str	r0, [sp, #0]
 80014ae:	e7dc      	b.n	800146a <__aeabi_ddiv+0x96>
 80014b0:	4544      	cmp	r4, r8
 80014b2:	d200      	bcs.n	80014b6 <__aeabi_ddiv+0xe2>
 80014b4:	e1c7      	b.n	8001846 <__aeabi_ddiv+0x472>
 80014b6:	d100      	bne.n	80014ba <__aeabi_ddiv+0xe6>
 80014b8:	e1c2      	b.n	8001840 <__aeabi_ddiv+0x46c>
 80014ba:	2301      	movs	r3, #1
 80014bc:	425b      	negs	r3, r3
 80014be:	469c      	mov	ip, r3
 80014c0:	002e      	movs	r6, r5
 80014c2:	4640      	mov	r0, r8
 80014c4:	2500      	movs	r5, #0
 80014c6:	44e3      	add	fp, ip
 80014c8:	0223      	lsls	r3, r4, #8
 80014ca:	0e14      	lsrs	r4, r2, #24
 80014cc:	431c      	orrs	r4, r3
 80014ce:	0c1b      	lsrs	r3, r3, #16
 80014d0:	4699      	mov	r9, r3
 80014d2:	0423      	lsls	r3, r4, #16
 80014d4:	0c1f      	lsrs	r7, r3, #16
 80014d6:	0212      	lsls	r2, r2, #8
 80014d8:	4649      	mov	r1, r9
 80014da:	9200      	str	r2, [sp, #0]
 80014dc:	9701      	str	r7, [sp, #4]
 80014de:	f7fe feb3 	bl	8000248 <__aeabi_uidivmod>
 80014e2:	0002      	movs	r2, r0
 80014e4:	437a      	muls	r2, r7
 80014e6:	040b      	lsls	r3, r1, #16
 80014e8:	0c31      	lsrs	r1, r6, #16
 80014ea:	4680      	mov	r8, r0
 80014ec:	4319      	orrs	r1, r3
 80014ee:	428a      	cmp	r2, r1
 80014f0:	d907      	bls.n	8001502 <__aeabi_ddiv+0x12e>
 80014f2:	2301      	movs	r3, #1
 80014f4:	425b      	negs	r3, r3
 80014f6:	469c      	mov	ip, r3
 80014f8:	1909      	adds	r1, r1, r4
 80014fa:	44e0      	add	r8, ip
 80014fc:	428c      	cmp	r4, r1
 80014fe:	d800      	bhi.n	8001502 <__aeabi_ddiv+0x12e>
 8001500:	e207      	b.n	8001912 <__aeabi_ddiv+0x53e>
 8001502:	1a88      	subs	r0, r1, r2
 8001504:	4649      	mov	r1, r9
 8001506:	f7fe fe9f 	bl	8000248 <__aeabi_uidivmod>
 800150a:	0409      	lsls	r1, r1, #16
 800150c:	468c      	mov	ip, r1
 800150e:	0431      	lsls	r1, r6, #16
 8001510:	4666      	mov	r6, ip
 8001512:	9a01      	ldr	r2, [sp, #4]
 8001514:	0c09      	lsrs	r1, r1, #16
 8001516:	4342      	muls	r2, r0
 8001518:	0003      	movs	r3, r0
 800151a:	4331      	orrs	r1, r6
 800151c:	428a      	cmp	r2, r1
 800151e:	d904      	bls.n	800152a <__aeabi_ddiv+0x156>
 8001520:	1909      	adds	r1, r1, r4
 8001522:	3b01      	subs	r3, #1
 8001524:	428c      	cmp	r4, r1
 8001526:	d800      	bhi.n	800152a <__aeabi_ddiv+0x156>
 8001528:	e1ed      	b.n	8001906 <__aeabi_ddiv+0x532>
 800152a:	1a88      	subs	r0, r1, r2
 800152c:	4642      	mov	r2, r8
 800152e:	0412      	lsls	r2, r2, #16
 8001530:	431a      	orrs	r2, r3
 8001532:	4690      	mov	r8, r2
 8001534:	4641      	mov	r1, r8
 8001536:	9b00      	ldr	r3, [sp, #0]
 8001538:	040e      	lsls	r6, r1, #16
 800153a:	0c1b      	lsrs	r3, r3, #16
 800153c:	001f      	movs	r7, r3
 800153e:	9302      	str	r3, [sp, #8]
 8001540:	9b00      	ldr	r3, [sp, #0]
 8001542:	0c36      	lsrs	r6, r6, #16
 8001544:	041b      	lsls	r3, r3, #16
 8001546:	0c19      	lsrs	r1, r3, #16
 8001548:	000b      	movs	r3, r1
 800154a:	4373      	muls	r3, r6
 800154c:	0c12      	lsrs	r2, r2, #16
 800154e:	437e      	muls	r6, r7
 8001550:	9103      	str	r1, [sp, #12]
 8001552:	4351      	muls	r1, r2
 8001554:	437a      	muls	r2, r7
 8001556:	0c1f      	lsrs	r7, r3, #16
 8001558:	46bc      	mov	ip, r7
 800155a:	1876      	adds	r6, r6, r1
 800155c:	4466      	add	r6, ip
 800155e:	42b1      	cmp	r1, r6
 8001560:	d903      	bls.n	800156a <__aeabi_ddiv+0x196>
 8001562:	2180      	movs	r1, #128	; 0x80
 8001564:	0249      	lsls	r1, r1, #9
 8001566:	468c      	mov	ip, r1
 8001568:	4462      	add	r2, ip
 800156a:	0c31      	lsrs	r1, r6, #16
 800156c:	188a      	adds	r2, r1, r2
 800156e:	0431      	lsls	r1, r6, #16
 8001570:	041e      	lsls	r6, r3, #16
 8001572:	0c36      	lsrs	r6, r6, #16
 8001574:	198e      	adds	r6, r1, r6
 8001576:	4290      	cmp	r0, r2
 8001578:	d302      	bcc.n	8001580 <__aeabi_ddiv+0x1ac>
 800157a:	d112      	bne.n	80015a2 <__aeabi_ddiv+0x1ce>
 800157c:	42b5      	cmp	r5, r6
 800157e:	d210      	bcs.n	80015a2 <__aeabi_ddiv+0x1ce>
 8001580:	4643      	mov	r3, r8
 8001582:	1e59      	subs	r1, r3, #1
 8001584:	9b00      	ldr	r3, [sp, #0]
 8001586:	469c      	mov	ip, r3
 8001588:	4465      	add	r5, ip
 800158a:	001f      	movs	r7, r3
 800158c:	429d      	cmp	r5, r3
 800158e:	419b      	sbcs	r3, r3
 8001590:	425b      	negs	r3, r3
 8001592:	191b      	adds	r3, r3, r4
 8001594:	18c0      	adds	r0, r0, r3
 8001596:	4284      	cmp	r4, r0
 8001598:	d200      	bcs.n	800159c <__aeabi_ddiv+0x1c8>
 800159a:	e1a0      	b.n	80018de <__aeabi_ddiv+0x50a>
 800159c:	d100      	bne.n	80015a0 <__aeabi_ddiv+0x1cc>
 800159e:	e19b      	b.n	80018d8 <__aeabi_ddiv+0x504>
 80015a0:	4688      	mov	r8, r1
 80015a2:	1bae      	subs	r6, r5, r6
 80015a4:	42b5      	cmp	r5, r6
 80015a6:	41ad      	sbcs	r5, r5
 80015a8:	1a80      	subs	r0, r0, r2
 80015aa:	426d      	negs	r5, r5
 80015ac:	1b40      	subs	r0, r0, r5
 80015ae:	4284      	cmp	r4, r0
 80015b0:	d100      	bne.n	80015b4 <__aeabi_ddiv+0x1e0>
 80015b2:	e1d5      	b.n	8001960 <__aeabi_ddiv+0x58c>
 80015b4:	4649      	mov	r1, r9
 80015b6:	f7fe fe47 	bl	8000248 <__aeabi_uidivmod>
 80015ba:	9a01      	ldr	r2, [sp, #4]
 80015bc:	040b      	lsls	r3, r1, #16
 80015be:	4342      	muls	r2, r0
 80015c0:	0c31      	lsrs	r1, r6, #16
 80015c2:	0005      	movs	r5, r0
 80015c4:	4319      	orrs	r1, r3
 80015c6:	428a      	cmp	r2, r1
 80015c8:	d900      	bls.n	80015cc <__aeabi_ddiv+0x1f8>
 80015ca:	e16c      	b.n	80018a6 <__aeabi_ddiv+0x4d2>
 80015cc:	1a88      	subs	r0, r1, r2
 80015ce:	4649      	mov	r1, r9
 80015d0:	f7fe fe3a 	bl	8000248 <__aeabi_uidivmod>
 80015d4:	9a01      	ldr	r2, [sp, #4]
 80015d6:	0436      	lsls	r6, r6, #16
 80015d8:	4342      	muls	r2, r0
 80015da:	0409      	lsls	r1, r1, #16
 80015dc:	0c36      	lsrs	r6, r6, #16
 80015de:	0003      	movs	r3, r0
 80015e0:	430e      	orrs	r6, r1
 80015e2:	42b2      	cmp	r2, r6
 80015e4:	d900      	bls.n	80015e8 <__aeabi_ddiv+0x214>
 80015e6:	e153      	b.n	8001890 <__aeabi_ddiv+0x4bc>
 80015e8:	9803      	ldr	r0, [sp, #12]
 80015ea:	1ab6      	subs	r6, r6, r2
 80015ec:	0002      	movs	r2, r0
 80015ee:	042d      	lsls	r5, r5, #16
 80015f0:	431d      	orrs	r5, r3
 80015f2:	9f02      	ldr	r7, [sp, #8]
 80015f4:	042b      	lsls	r3, r5, #16
 80015f6:	0c1b      	lsrs	r3, r3, #16
 80015f8:	435a      	muls	r2, r3
 80015fa:	437b      	muls	r3, r7
 80015fc:	469c      	mov	ip, r3
 80015fe:	0c29      	lsrs	r1, r5, #16
 8001600:	4348      	muls	r0, r1
 8001602:	0c13      	lsrs	r3, r2, #16
 8001604:	4484      	add	ip, r0
 8001606:	4463      	add	r3, ip
 8001608:	4379      	muls	r1, r7
 800160a:	4298      	cmp	r0, r3
 800160c:	d903      	bls.n	8001616 <__aeabi_ddiv+0x242>
 800160e:	2080      	movs	r0, #128	; 0x80
 8001610:	0240      	lsls	r0, r0, #9
 8001612:	4684      	mov	ip, r0
 8001614:	4461      	add	r1, ip
 8001616:	0c18      	lsrs	r0, r3, #16
 8001618:	0412      	lsls	r2, r2, #16
 800161a:	041b      	lsls	r3, r3, #16
 800161c:	0c12      	lsrs	r2, r2, #16
 800161e:	1841      	adds	r1, r0, r1
 8001620:	189b      	adds	r3, r3, r2
 8001622:	428e      	cmp	r6, r1
 8001624:	d200      	bcs.n	8001628 <__aeabi_ddiv+0x254>
 8001626:	e0ff      	b.n	8001828 <__aeabi_ddiv+0x454>
 8001628:	d100      	bne.n	800162c <__aeabi_ddiv+0x258>
 800162a:	e0fa      	b.n	8001822 <__aeabi_ddiv+0x44e>
 800162c:	2301      	movs	r3, #1
 800162e:	431d      	orrs	r5, r3
 8001630:	4a49      	ldr	r2, [pc, #292]	; (8001758 <__aeabi_ddiv+0x384>)
 8001632:	445a      	add	r2, fp
 8001634:	2a00      	cmp	r2, #0
 8001636:	dc00      	bgt.n	800163a <__aeabi_ddiv+0x266>
 8001638:	e0aa      	b.n	8001790 <__aeabi_ddiv+0x3bc>
 800163a:	076b      	lsls	r3, r5, #29
 800163c:	d000      	beq.n	8001640 <__aeabi_ddiv+0x26c>
 800163e:	e13d      	b.n	80018bc <__aeabi_ddiv+0x4e8>
 8001640:	08ed      	lsrs	r5, r5, #3
 8001642:	4643      	mov	r3, r8
 8001644:	01db      	lsls	r3, r3, #7
 8001646:	d506      	bpl.n	8001656 <__aeabi_ddiv+0x282>
 8001648:	4642      	mov	r2, r8
 800164a:	4b44      	ldr	r3, [pc, #272]	; (800175c <__aeabi_ddiv+0x388>)
 800164c:	401a      	ands	r2, r3
 800164e:	4690      	mov	r8, r2
 8001650:	2280      	movs	r2, #128	; 0x80
 8001652:	00d2      	lsls	r2, r2, #3
 8001654:	445a      	add	r2, fp
 8001656:	4b42      	ldr	r3, [pc, #264]	; (8001760 <__aeabi_ddiv+0x38c>)
 8001658:	429a      	cmp	r2, r3
 800165a:	dd00      	ble.n	800165e <__aeabi_ddiv+0x28a>
 800165c:	e71f      	b.n	800149e <__aeabi_ddiv+0xca>
 800165e:	4643      	mov	r3, r8
 8001660:	075b      	lsls	r3, r3, #29
 8001662:	431d      	orrs	r5, r3
 8001664:	4643      	mov	r3, r8
 8001666:	0552      	lsls	r2, r2, #21
 8001668:	025c      	lsls	r4, r3, #9
 800166a:	0b24      	lsrs	r4, r4, #12
 800166c:	0d53      	lsrs	r3, r2, #21
 800166e:	e708      	b.n	8001482 <__aeabi_ddiv+0xae>
 8001670:	4652      	mov	r2, sl
 8001672:	4322      	orrs	r2, r4
 8001674:	d100      	bne.n	8001678 <__aeabi_ddiv+0x2a4>
 8001676:	e07b      	b.n	8001770 <__aeabi_ddiv+0x39c>
 8001678:	2c00      	cmp	r4, #0
 800167a:	d100      	bne.n	800167e <__aeabi_ddiv+0x2aa>
 800167c:	e0fa      	b.n	8001874 <__aeabi_ddiv+0x4a0>
 800167e:	0020      	movs	r0, r4
 8001680:	f001 f99a 	bl	80029b8 <__clzsi2>
 8001684:	0002      	movs	r2, r0
 8001686:	3a0b      	subs	r2, #11
 8001688:	231d      	movs	r3, #29
 800168a:	0001      	movs	r1, r0
 800168c:	1a9b      	subs	r3, r3, r2
 800168e:	4652      	mov	r2, sl
 8001690:	3908      	subs	r1, #8
 8001692:	40da      	lsrs	r2, r3
 8001694:	408c      	lsls	r4, r1
 8001696:	4314      	orrs	r4, r2
 8001698:	4652      	mov	r2, sl
 800169a:	408a      	lsls	r2, r1
 800169c:	4b31      	ldr	r3, [pc, #196]	; (8001764 <__aeabi_ddiv+0x390>)
 800169e:	4458      	add	r0, fp
 80016a0:	469b      	mov	fp, r3
 80016a2:	4483      	add	fp, r0
 80016a4:	2000      	movs	r0, #0
 80016a6:	e6d5      	b.n	8001454 <__aeabi_ddiv+0x80>
 80016a8:	464b      	mov	r3, r9
 80016aa:	4323      	orrs	r3, r4
 80016ac:	4698      	mov	r8, r3
 80016ae:	d044      	beq.n	800173a <__aeabi_ddiv+0x366>
 80016b0:	2c00      	cmp	r4, #0
 80016b2:	d100      	bne.n	80016b6 <__aeabi_ddiv+0x2e2>
 80016b4:	e0ce      	b.n	8001854 <__aeabi_ddiv+0x480>
 80016b6:	0020      	movs	r0, r4
 80016b8:	f001 f97e 	bl	80029b8 <__clzsi2>
 80016bc:	0001      	movs	r1, r0
 80016be:	0002      	movs	r2, r0
 80016c0:	390b      	subs	r1, #11
 80016c2:	231d      	movs	r3, #29
 80016c4:	1a5b      	subs	r3, r3, r1
 80016c6:	4649      	mov	r1, r9
 80016c8:	0010      	movs	r0, r2
 80016ca:	40d9      	lsrs	r1, r3
 80016cc:	3808      	subs	r0, #8
 80016ce:	4084      	lsls	r4, r0
 80016d0:	000b      	movs	r3, r1
 80016d2:	464d      	mov	r5, r9
 80016d4:	4323      	orrs	r3, r4
 80016d6:	4698      	mov	r8, r3
 80016d8:	4085      	lsls	r5, r0
 80016da:	4823      	ldr	r0, [pc, #140]	; (8001768 <__aeabi_ddiv+0x394>)
 80016dc:	1a83      	subs	r3, r0, r2
 80016de:	469b      	mov	fp, r3
 80016e0:	2300      	movs	r3, #0
 80016e2:	4699      	mov	r9, r3
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	e69a      	b.n	800141e <__aeabi_ddiv+0x4a>
 80016e8:	464b      	mov	r3, r9
 80016ea:	4323      	orrs	r3, r4
 80016ec:	4698      	mov	r8, r3
 80016ee:	d11d      	bne.n	800172c <__aeabi_ddiv+0x358>
 80016f0:	2308      	movs	r3, #8
 80016f2:	4699      	mov	r9, r3
 80016f4:	3b06      	subs	r3, #6
 80016f6:	2500      	movs	r5, #0
 80016f8:	4683      	mov	fp, r0
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	e68f      	b.n	800141e <__aeabi_ddiv+0x4a>
 80016fe:	4652      	mov	r2, sl
 8001700:	4322      	orrs	r2, r4
 8001702:	d109      	bne.n	8001718 <__aeabi_ddiv+0x344>
 8001704:	2302      	movs	r3, #2
 8001706:	4649      	mov	r1, r9
 8001708:	4319      	orrs	r1, r3
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <__aeabi_ddiv+0x398>)
 800170c:	4689      	mov	r9, r1
 800170e:	469c      	mov	ip, r3
 8001710:	2400      	movs	r4, #0
 8001712:	2002      	movs	r0, #2
 8001714:	44e3      	add	fp, ip
 8001716:	e69d      	b.n	8001454 <__aeabi_ddiv+0x80>
 8001718:	2303      	movs	r3, #3
 800171a:	464a      	mov	r2, r9
 800171c:	431a      	orrs	r2, r3
 800171e:	4b13      	ldr	r3, [pc, #76]	; (800176c <__aeabi_ddiv+0x398>)
 8001720:	4691      	mov	r9, r2
 8001722:	469c      	mov	ip, r3
 8001724:	4652      	mov	r2, sl
 8001726:	2003      	movs	r0, #3
 8001728:	44e3      	add	fp, ip
 800172a:	e693      	b.n	8001454 <__aeabi_ddiv+0x80>
 800172c:	230c      	movs	r3, #12
 800172e:	4699      	mov	r9, r3
 8001730:	3b09      	subs	r3, #9
 8001732:	46a0      	mov	r8, r4
 8001734:	4683      	mov	fp, r0
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	e671      	b.n	800141e <__aeabi_ddiv+0x4a>
 800173a:	2304      	movs	r3, #4
 800173c:	4699      	mov	r9, r3
 800173e:	2300      	movs	r3, #0
 8001740:	469b      	mov	fp, r3
 8001742:	3301      	adds	r3, #1
 8001744:	2500      	movs	r5, #0
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	e669      	b.n	800141e <__aeabi_ddiv+0x4a>
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	000007ff 	.word	0x000007ff
 8001750:	fffffc01 	.word	0xfffffc01
 8001754:	0800a7e8 	.word	0x0800a7e8
 8001758:	000003ff 	.word	0x000003ff
 800175c:	feffffff 	.word	0xfeffffff
 8001760:	000007fe 	.word	0x000007fe
 8001764:	000003f3 	.word	0x000003f3
 8001768:	fffffc0d 	.word	0xfffffc0d
 800176c:	fffff801 	.word	0xfffff801
 8001770:	4649      	mov	r1, r9
 8001772:	2301      	movs	r3, #1
 8001774:	4319      	orrs	r1, r3
 8001776:	4689      	mov	r9, r1
 8001778:	2400      	movs	r4, #0
 800177a:	2001      	movs	r0, #1
 800177c:	e66a      	b.n	8001454 <__aeabi_ddiv+0x80>
 800177e:	2300      	movs	r3, #0
 8001780:	2480      	movs	r4, #128	; 0x80
 8001782:	469a      	mov	sl, r3
 8001784:	2500      	movs	r5, #0
 8001786:	4b8a      	ldr	r3, [pc, #552]	; (80019b0 <__aeabi_ddiv+0x5dc>)
 8001788:	0324      	lsls	r4, r4, #12
 800178a:	e67a      	b.n	8001482 <__aeabi_ddiv+0xae>
 800178c:	2501      	movs	r5, #1
 800178e:	426d      	negs	r5, r5
 8001790:	2301      	movs	r3, #1
 8001792:	1a9b      	subs	r3, r3, r2
 8001794:	2b38      	cmp	r3, #56	; 0x38
 8001796:	dd00      	ble.n	800179a <__aeabi_ddiv+0x3c6>
 8001798:	e670      	b.n	800147c <__aeabi_ddiv+0xa8>
 800179a:	2b1f      	cmp	r3, #31
 800179c:	dc00      	bgt.n	80017a0 <__aeabi_ddiv+0x3cc>
 800179e:	e0bf      	b.n	8001920 <__aeabi_ddiv+0x54c>
 80017a0:	211f      	movs	r1, #31
 80017a2:	4249      	negs	r1, r1
 80017a4:	1a8a      	subs	r2, r1, r2
 80017a6:	4641      	mov	r1, r8
 80017a8:	40d1      	lsrs	r1, r2
 80017aa:	000a      	movs	r2, r1
 80017ac:	2b20      	cmp	r3, #32
 80017ae:	d004      	beq.n	80017ba <__aeabi_ddiv+0x3e6>
 80017b0:	4641      	mov	r1, r8
 80017b2:	4b80      	ldr	r3, [pc, #512]	; (80019b4 <__aeabi_ddiv+0x5e0>)
 80017b4:	445b      	add	r3, fp
 80017b6:	4099      	lsls	r1, r3
 80017b8:	430d      	orrs	r5, r1
 80017ba:	1e6b      	subs	r3, r5, #1
 80017bc:	419d      	sbcs	r5, r3
 80017be:	2307      	movs	r3, #7
 80017c0:	432a      	orrs	r2, r5
 80017c2:	001d      	movs	r5, r3
 80017c4:	2400      	movs	r4, #0
 80017c6:	4015      	ands	r5, r2
 80017c8:	4213      	tst	r3, r2
 80017ca:	d100      	bne.n	80017ce <__aeabi_ddiv+0x3fa>
 80017cc:	e0d4      	b.n	8001978 <__aeabi_ddiv+0x5a4>
 80017ce:	210f      	movs	r1, #15
 80017d0:	2300      	movs	r3, #0
 80017d2:	4011      	ands	r1, r2
 80017d4:	2904      	cmp	r1, #4
 80017d6:	d100      	bne.n	80017da <__aeabi_ddiv+0x406>
 80017d8:	e0cb      	b.n	8001972 <__aeabi_ddiv+0x59e>
 80017da:	1d11      	adds	r1, r2, #4
 80017dc:	4291      	cmp	r1, r2
 80017de:	4192      	sbcs	r2, r2
 80017e0:	4252      	negs	r2, r2
 80017e2:	189b      	adds	r3, r3, r2
 80017e4:	000a      	movs	r2, r1
 80017e6:	0219      	lsls	r1, r3, #8
 80017e8:	d400      	bmi.n	80017ec <__aeabi_ddiv+0x418>
 80017ea:	e0c2      	b.n	8001972 <__aeabi_ddiv+0x59e>
 80017ec:	2301      	movs	r3, #1
 80017ee:	2400      	movs	r4, #0
 80017f0:	2500      	movs	r5, #0
 80017f2:	e646      	b.n	8001482 <__aeabi_ddiv+0xae>
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	4641      	mov	r1, r8
 80017f8:	031b      	lsls	r3, r3, #12
 80017fa:	4219      	tst	r1, r3
 80017fc:	d008      	beq.n	8001810 <__aeabi_ddiv+0x43c>
 80017fe:	421c      	tst	r4, r3
 8001800:	d106      	bne.n	8001810 <__aeabi_ddiv+0x43c>
 8001802:	431c      	orrs	r4, r3
 8001804:	0324      	lsls	r4, r4, #12
 8001806:	46ba      	mov	sl, r7
 8001808:	0015      	movs	r5, r2
 800180a:	4b69      	ldr	r3, [pc, #420]	; (80019b0 <__aeabi_ddiv+0x5dc>)
 800180c:	0b24      	lsrs	r4, r4, #12
 800180e:	e638      	b.n	8001482 <__aeabi_ddiv+0xae>
 8001810:	2480      	movs	r4, #128	; 0x80
 8001812:	4643      	mov	r3, r8
 8001814:	0324      	lsls	r4, r4, #12
 8001816:	431c      	orrs	r4, r3
 8001818:	0324      	lsls	r4, r4, #12
 800181a:	46b2      	mov	sl, r6
 800181c:	4b64      	ldr	r3, [pc, #400]	; (80019b0 <__aeabi_ddiv+0x5dc>)
 800181e:	0b24      	lsrs	r4, r4, #12
 8001820:	e62f      	b.n	8001482 <__aeabi_ddiv+0xae>
 8001822:	2b00      	cmp	r3, #0
 8001824:	d100      	bne.n	8001828 <__aeabi_ddiv+0x454>
 8001826:	e703      	b.n	8001630 <__aeabi_ddiv+0x25c>
 8001828:	19a6      	adds	r6, r4, r6
 800182a:	1e68      	subs	r0, r5, #1
 800182c:	42a6      	cmp	r6, r4
 800182e:	d200      	bcs.n	8001832 <__aeabi_ddiv+0x45e>
 8001830:	e08d      	b.n	800194e <__aeabi_ddiv+0x57a>
 8001832:	428e      	cmp	r6, r1
 8001834:	d200      	bcs.n	8001838 <__aeabi_ddiv+0x464>
 8001836:	e0a3      	b.n	8001980 <__aeabi_ddiv+0x5ac>
 8001838:	d100      	bne.n	800183c <__aeabi_ddiv+0x468>
 800183a:	e0b3      	b.n	80019a4 <__aeabi_ddiv+0x5d0>
 800183c:	0005      	movs	r5, r0
 800183e:	e6f5      	b.n	800162c <__aeabi_ddiv+0x258>
 8001840:	42aa      	cmp	r2, r5
 8001842:	d900      	bls.n	8001846 <__aeabi_ddiv+0x472>
 8001844:	e639      	b.n	80014ba <__aeabi_ddiv+0xe6>
 8001846:	4643      	mov	r3, r8
 8001848:	07de      	lsls	r6, r3, #31
 800184a:	0858      	lsrs	r0, r3, #1
 800184c:	086b      	lsrs	r3, r5, #1
 800184e:	431e      	orrs	r6, r3
 8001850:	07ed      	lsls	r5, r5, #31
 8001852:	e639      	b.n	80014c8 <__aeabi_ddiv+0xf4>
 8001854:	4648      	mov	r0, r9
 8001856:	f001 f8af 	bl	80029b8 <__clzsi2>
 800185a:	0001      	movs	r1, r0
 800185c:	0002      	movs	r2, r0
 800185e:	3115      	adds	r1, #21
 8001860:	3220      	adds	r2, #32
 8001862:	291c      	cmp	r1, #28
 8001864:	dc00      	bgt.n	8001868 <__aeabi_ddiv+0x494>
 8001866:	e72c      	b.n	80016c2 <__aeabi_ddiv+0x2ee>
 8001868:	464b      	mov	r3, r9
 800186a:	3808      	subs	r0, #8
 800186c:	4083      	lsls	r3, r0
 800186e:	2500      	movs	r5, #0
 8001870:	4698      	mov	r8, r3
 8001872:	e732      	b.n	80016da <__aeabi_ddiv+0x306>
 8001874:	f001 f8a0 	bl	80029b8 <__clzsi2>
 8001878:	0003      	movs	r3, r0
 800187a:	001a      	movs	r2, r3
 800187c:	3215      	adds	r2, #21
 800187e:	3020      	adds	r0, #32
 8001880:	2a1c      	cmp	r2, #28
 8001882:	dc00      	bgt.n	8001886 <__aeabi_ddiv+0x4b2>
 8001884:	e700      	b.n	8001688 <__aeabi_ddiv+0x2b4>
 8001886:	4654      	mov	r4, sl
 8001888:	3b08      	subs	r3, #8
 800188a:	2200      	movs	r2, #0
 800188c:	409c      	lsls	r4, r3
 800188e:	e705      	b.n	800169c <__aeabi_ddiv+0x2c8>
 8001890:	1936      	adds	r6, r6, r4
 8001892:	3b01      	subs	r3, #1
 8001894:	42b4      	cmp	r4, r6
 8001896:	d900      	bls.n	800189a <__aeabi_ddiv+0x4c6>
 8001898:	e6a6      	b.n	80015e8 <__aeabi_ddiv+0x214>
 800189a:	42b2      	cmp	r2, r6
 800189c:	d800      	bhi.n	80018a0 <__aeabi_ddiv+0x4cc>
 800189e:	e6a3      	b.n	80015e8 <__aeabi_ddiv+0x214>
 80018a0:	1e83      	subs	r3, r0, #2
 80018a2:	1936      	adds	r6, r6, r4
 80018a4:	e6a0      	b.n	80015e8 <__aeabi_ddiv+0x214>
 80018a6:	1909      	adds	r1, r1, r4
 80018a8:	3d01      	subs	r5, #1
 80018aa:	428c      	cmp	r4, r1
 80018ac:	d900      	bls.n	80018b0 <__aeabi_ddiv+0x4dc>
 80018ae:	e68d      	b.n	80015cc <__aeabi_ddiv+0x1f8>
 80018b0:	428a      	cmp	r2, r1
 80018b2:	d800      	bhi.n	80018b6 <__aeabi_ddiv+0x4e2>
 80018b4:	e68a      	b.n	80015cc <__aeabi_ddiv+0x1f8>
 80018b6:	1e85      	subs	r5, r0, #2
 80018b8:	1909      	adds	r1, r1, r4
 80018ba:	e687      	b.n	80015cc <__aeabi_ddiv+0x1f8>
 80018bc:	230f      	movs	r3, #15
 80018be:	402b      	ands	r3, r5
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d100      	bne.n	80018c6 <__aeabi_ddiv+0x4f2>
 80018c4:	e6bc      	b.n	8001640 <__aeabi_ddiv+0x26c>
 80018c6:	2305      	movs	r3, #5
 80018c8:	425b      	negs	r3, r3
 80018ca:	42ab      	cmp	r3, r5
 80018cc:	419b      	sbcs	r3, r3
 80018ce:	3504      	adds	r5, #4
 80018d0:	425b      	negs	r3, r3
 80018d2:	08ed      	lsrs	r5, r5, #3
 80018d4:	4498      	add	r8, r3
 80018d6:	e6b4      	b.n	8001642 <__aeabi_ddiv+0x26e>
 80018d8:	42af      	cmp	r7, r5
 80018da:	d900      	bls.n	80018de <__aeabi_ddiv+0x50a>
 80018dc:	e660      	b.n	80015a0 <__aeabi_ddiv+0x1cc>
 80018de:	4282      	cmp	r2, r0
 80018e0:	d804      	bhi.n	80018ec <__aeabi_ddiv+0x518>
 80018e2:	d000      	beq.n	80018e6 <__aeabi_ddiv+0x512>
 80018e4:	e65c      	b.n	80015a0 <__aeabi_ddiv+0x1cc>
 80018e6:	42ae      	cmp	r6, r5
 80018e8:	d800      	bhi.n	80018ec <__aeabi_ddiv+0x518>
 80018ea:	e659      	b.n	80015a0 <__aeabi_ddiv+0x1cc>
 80018ec:	2302      	movs	r3, #2
 80018ee:	425b      	negs	r3, r3
 80018f0:	469c      	mov	ip, r3
 80018f2:	9b00      	ldr	r3, [sp, #0]
 80018f4:	44e0      	add	r8, ip
 80018f6:	469c      	mov	ip, r3
 80018f8:	4465      	add	r5, ip
 80018fa:	429d      	cmp	r5, r3
 80018fc:	419b      	sbcs	r3, r3
 80018fe:	425b      	negs	r3, r3
 8001900:	191b      	adds	r3, r3, r4
 8001902:	18c0      	adds	r0, r0, r3
 8001904:	e64d      	b.n	80015a2 <__aeabi_ddiv+0x1ce>
 8001906:	428a      	cmp	r2, r1
 8001908:	d800      	bhi.n	800190c <__aeabi_ddiv+0x538>
 800190a:	e60e      	b.n	800152a <__aeabi_ddiv+0x156>
 800190c:	1e83      	subs	r3, r0, #2
 800190e:	1909      	adds	r1, r1, r4
 8001910:	e60b      	b.n	800152a <__aeabi_ddiv+0x156>
 8001912:	428a      	cmp	r2, r1
 8001914:	d800      	bhi.n	8001918 <__aeabi_ddiv+0x544>
 8001916:	e5f4      	b.n	8001502 <__aeabi_ddiv+0x12e>
 8001918:	1e83      	subs	r3, r0, #2
 800191a:	4698      	mov	r8, r3
 800191c:	1909      	adds	r1, r1, r4
 800191e:	e5f0      	b.n	8001502 <__aeabi_ddiv+0x12e>
 8001920:	4925      	ldr	r1, [pc, #148]	; (80019b8 <__aeabi_ddiv+0x5e4>)
 8001922:	0028      	movs	r0, r5
 8001924:	4459      	add	r1, fp
 8001926:	408d      	lsls	r5, r1
 8001928:	4642      	mov	r2, r8
 800192a:	408a      	lsls	r2, r1
 800192c:	1e69      	subs	r1, r5, #1
 800192e:	418d      	sbcs	r5, r1
 8001930:	4641      	mov	r1, r8
 8001932:	40d8      	lsrs	r0, r3
 8001934:	40d9      	lsrs	r1, r3
 8001936:	4302      	orrs	r2, r0
 8001938:	432a      	orrs	r2, r5
 800193a:	000b      	movs	r3, r1
 800193c:	0751      	lsls	r1, r2, #29
 800193e:	d100      	bne.n	8001942 <__aeabi_ddiv+0x56e>
 8001940:	e751      	b.n	80017e6 <__aeabi_ddiv+0x412>
 8001942:	210f      	movs	r1, #15
 8001944:	4011      	ands	r1, r2
 8001946:	2904      	cmp	r1, #4
 8001948:	d000      	beq.n	800194c <__aeabi_ddiv+0x578>
 800194a:	e746      	b.n	80017da <__aeabi_ddiv+0x406>
 800194c:	e74b      	b.n	80017e6 <__aeabi_ddiv+0x412>
 800194e:	0005      	movs	r5, r0
 8001950:	428e      	cmp	r6, r1
 8001952:	d000      	beq.n	8001956 <__aeabi_ddiv+0x582>
 8001954:	e66a      	b.n	800162c <__aeabi_ddiv+0x258>
 8001956:	9a00      	ldr	r2, [sp, #0]
 8001958:	4293      	cmp	r3, r2
 800195a:	d000      	beq.n	800195e <__aeabi_ddiv+0x58a>
 800195c:	e666      	b.n	800162c <__aeabi_ddiv+0x258>
 800195e:	e667      	b.n	8001630 <__aeabi_ddiv+0x25c>
 8001960:	4a16      	ldr	r2, [pc, #88]	; (80019bc <__aeabi_ddiv+0x5e8>)
 8001962:	445a      	add	r2, fp
 8001964:	2a00      	cmp	r2, #0
 8001966:	dc00      	bgt.n	800196a <__aeabi_ddiv+0x596>
 8001968:	e710      	b.n	800178c <__aeabi_ddiv+0x3b8>
 800196a:	2301      	movs	r3, #1
 800196c:	2500      	movs	r5, #0
 800196e:	4498      	add	r8, r3
 8001970:	e667      	b.n	8001642 <__aeabi_ddiv+0x26e>
 8001972:	075d      	lsls	r5, r3, #29
 8001974:	025b      	lsls	r3, r3, #9
 8001976:	0b1c      	lsrs	r4, r3, #12
 8001978:	08d2      	lsrs	r2, r2, #3
 800197a:	2300      	movs	r3, #0
 800197c:	4315      	orrs	r5, r2
 800197e:	e580      	b.n	8001482 <__aeabi_ddiv+0xae>
 8001980:	9800      	ldr	r0, [sp, #0]
 8001982:	3d02      	subs	r5, #2
 8001984:	0042      	lsls	r2, r0, #1
 8001986:	4282      	cmp	r2, r0
 8001988:	41bf      	sbcs	r7, r7
 800198a:	427f      	negs	r7, r7
 800198c:	193c      	adds	r4, r7, r4
 800198e:	1936      	adds	r6, r6, r4
 8001990:	9200      	str	r2, [sp, #0]
 8001992:	e7dd      	b.n	8001950 <__aeabi_ddiv+0x57c>
 8001994:	2480      	movs	r4, #128	; 0x80
 8001996:	4643      	mov	r3, r8
 8001998:	0324      	lsls	r4, r4, #12
 800199a:	431c      	orrs	r4, r3
 800199c:	0324      	lsls	r4, r4, #12
 800199e:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <__aeabi_ddiv+0x5dc>)
 80019a0:	0b24      	lsrs	r4, r4, #12
 80019a2:	e56e      	b.n	8001482 <__aeabi_ddiv+0xae>
 80019a4:	9a00      	ldr	r2, [sp, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d3ea      	bcc.n	8001980 <__aeabi_ddiv+0x5ac>
 80019aa:	0005      	movs	r5, r0
 80019ac:	e7d3      	b.n	8001956 <__aeabi_ddiv+0x582>
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	000007ff 	.word	0x000007ff
 80019b4:	0000043e 	.word	0x0000043e
 80019b8:	0000041e 	.word	0x0000041e
 80019bc:	000003ff 	.word	0x000003ff

080019c0 <__eqdf2>:
 80019c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019c2:	464e      	mov	r6, r9
 80019c4:	4645      	mov	r5, r8
 80019c6:	46de      	mov	lr, fp
 80019c8:	4657      	mov	r7, sl
 80019ca:	4690      	mov	r8, r2
 80019cc:	b5e0      	push	{r5, r6, r7, lr}
 80019ce:	0017      	movs	r7, r2
 80019d0:	031a      	lsls	r2, r3, #12
 80019d2:	0b12      	lsrs	r2, r2, #12
 80019d4:	0005      	movs	r5, r0
 80019d6:	4684      	mov	ip, r0
 80019d8:	4819      	ldr	r0, [pc, #100]	; (8001a40 <__eqdf2+0x80>)
 80019da:	030e      	lsls	r6, r1, #12
 80019dc:	004c      	lsls	r4, r1, #1
 80019de:	4691      	mov	r9, r2
 80019e0:	005a      	lsls	r2, r3, #1
 80019e2:	0fdb      	lsrs	r3, r3, #31
 80019e4:	469b      	mov	fp, r3
 80019e6:	0b36      	lsrs	r6, r6, #12
 80019e8:	0d64      	lsrs	r4, r4, #21
 80019ea:	0fc9      	lsrs	r1, r1, #31
 80019ec:	0d52      	lsrs	r2, r2, #21
 80019ee:	4284      	cmp	r4, r0
 80019f0:	d019      	beq.n	8001a26 <__eqdf2+0x66>
 80019f2:	4282      	cmp	r2, r0
 80019f4:	d010      	beq.n	8001a18 <__eqdf2+0x58>
 80019f6:	2001      	movs	r0, #1
 80019f8:	4294      	cmp	r4, r2
 80019fa:	d10e      	bne.n	8001a1a <__eqdf2+0x5a>
 80019fc:	454e      	cmp	r6, r9
 80019fe:	d10c      	bne.n	8001a1a <__eqdf2+0x5a>
 8001a00:	2001      	movs	r0, #1
 8001a02:	45c4      	cmp	ip, r8
 8001a04:	d109      	bne.n	8001a1a <__eqdf2+0x5a>
 8001a06:	4559      	cmp	r1, fp
 8001a08:	d017      	beq.n	8001a3a <__eqdf2+0x7a>
 8001a0a:	2c00      	cmp	r4, #0
 8001a0c:	d105      	bne.n	8001a1a <__eqdf2+0x5a>
 8001a0e:	0030      	movs	r0, r6
 8001a10:	4328      	orrs	r0, r5
 8001a12:	1e43      	subs	r3, r0, #1
 8001a14:	4198      	sbcs	r0, r3
 8001a16:	e000      	b.n	8001a1a <__eqdf2+0x5a>
 8001a18:	2001      	movs	r0, #1
 8001a1a:	bcf0      	pop	{r4, r5, r6, r7}
 8001a1c:	46bb      	mov	fp, r7
 8001a1e:	46b2      	mov	sl, r6
 8001a20:	46a9      	mov	r9, r5
 8001a22:	46a0      	mov	r8, r4
 8001a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a26:	0033      	movs	r3, r6
 8001a28:	2001      	movs	r0, #1
 8001a2a:	432b      	orrs	r3, r5
 8001a2c:	d1f5      	bne.n	8001a1a <__eqdf2+0x5a>
 8001a2e:	42a2      	cmp	r2, r4
 8001a30:	d1f3      	bne.n	8001a1a <__eqdf2+0x5a>
 8001a32:	464b      	mov	r3, r9
 8001a34:	433b      	orrs	r3, r7
 8001a36:	d1f0      	bne.n	8001a1a <__eqdf2+0x5a>
 8001a38:	e7e2      	b.n	8001a00 <__eqdf2+0x40>
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	e7ed      	b.n	8001a1a <__eqdf2+0x5a>
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	000007ff 	.word	0x000007ff

08001a44 <__gedf2>:
 8001a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a46:	4647      	mov	r7, r8
 8001a48:	46ce      	mov	lr, r9
 8001a4a:	0004      	movs	r4, r0
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	0016      	movs	r6, r2
 8001a50:	031b      	lsls	r3, r3, #12
 8001a52:	0b1b      	lsrs	r3, r3, #12
 8001a54:	4d2d      	ldr	r5, [pc, #180]	; (8001b0c <__gedf2+0xc8>)
 8001a56:	004a      	lsls	r2, r1, #1
 8001a58:	4699      	mov	r9, r3
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	0043      	lsls	r3, r0, #1
 8001a5e:	030f      	lsls	r7, r1, #12
 8001a60:	46a4      	mov	ip, r4
 8001a62:	46b0      	mov	r8, r6
 8001a64:	0b3f      	lsrs	r7, r7, #12
 8001a66:	0d52      	lsrs	r2, r2, #21
 8001a68:	0fc9      	lsrs	r1, r1, #31
 8001a6a:	0d5b      	lsrs	r3, r3, #21
 8001a6c:	0fc0      	lsrs	r0, r0, #31
 8001a6e:	42aa      	cmp	r2, r5
 8001a70:	d021      	beq.n	8001ab6 <__gedf2+0x72>
 8001a72:	42ab      	cmp	r3, r5
 8001a74:	d013      	beq.n	8001a9e <__gedf2+0x5a>
 8001a76:	2a00      	cmp	r2, #0
 8001a78:	d122      	bne.n	8001ac0 <__gedf2+0x7c>
 8001a7a:	433c      	orrs	r4, r7
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d102      	bne.n	8001a86 <__gedf2+0x42>
 8001a80:	464d      	mov	r5, r9
 8001a82:	432e      	orrs	r6, r5
 8001a84:	d022      	beq.n	8001acc <__gedf2+0x88>
 8001a86:	2c00      	cmp	r4, #0
 8001a88:	d010      	beq.n	8001aac <__gedf2+0x68>
 8001a8a:	4281      	cmp	r1, r0
 8001a8c:	d022      	beq.n	8001ad4 <__gedf2+0x90>
 8001a8e:	2002      	movs	r0, #2
 8001a90:	3901      	subs	r1, #1
 8001a92:	4008      	ands	r0, r1
 8001a94:	3801      	subs	r0, #1
 8001a96:	bcc0      	pop	{r6, r7}
 8001a98:	46b9      	mov	r9, r7
 8001a9a:	46b0      	mov	r8, r6
 8001a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a9e:	464d      	mov	r5, r9
 8001aa0:	432e      	orrs	r6, r5
 8001aa2:	d129      	bne.n	8001af8 <__gedf2+0xb4>
 8001aa4:	2a00      	cmp	r2, #0
 8001aa6:	d1f0      	bne.n	8001a8a <__gedf2+0x46>
 8001aa8:	433c      	orrs	r4, r7
 8001aaa:	d1ee      	bne.n	8001a8a <__gedf2+0x46>
 8001aac:	2800      	cmp	r0, #0
 8001aae:	d1f2      	bne.n	8001a96 <__gedf2+0x52>
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	4240      	negs	r0, r0
 8001ab4:	e7ef      	b.n	8001a96 <__gedf2+0x52>
 8001ab6:	003d      	movs	r5, r7
 8001ab8:	4325      	orrs	r5, r4
 8001aba:	d11d      	bne.n	8001af8 <__gedf2+0xb4>
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d0ee      	beq.n	8001a9e <__gedf2+0x5a>
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1e2      	bne.n	8001a8a <__gedf2+0x46>
 8001ac4:	464c      	mov	r4, r9
 8001ac6:	4326      	orrs	r6, r4
 8001ac8:	d1df      	bne.n	8001a8a <__gedf2+0x46>
 8001aca:	e7e0      	b.n	8001a8e <__gedf2+0x4a>
 8001acc:	2000      	movs	r0, #0
 8001ace:	2c00      	cmp	r4, #0
 8001ad0:	d0e1      	beq.n	8001a96 <__gedf2+0x52>
 8001ad2:	e7dc      	b.n	8001a8e <__gedf2+0x4a>
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	dc0a      	bgt.n	8001aee <__gedf2+0xaa>
 8001ad8:	dbe8      	blt.n	8001aac <__gedf2+0x68>
 8001ada:	454f      	cmp	r7, r9
 8001adc:	d8d7      	bhi.n	8001a8e <__gedf2+0x4a>
 8001ade:	d00e      	beq.n	8001afe <__gedf2+0xba>
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	454f      	cmp	r7, r9
 8001ae4:	d2d7      	bcs.n	8001a96 <__gedf2+0x52>
 8001ae6:	2900      	cmp	r1, #0
 8001ae8:	d0e2      	beq.n	8001ab0 <__gedf2+0x6c>
 8001aea:	0008      	movs	r0, r1
 8001aec:	e7d3      	b.n	8001a96 <__gedf2+0x52>
 8001aee:	4243      	negs	r3, r0
 8001af0:	4158      	adcs	r0, r3
 8001af2:	0040      	lsls	r0, r0, #1
 8001af4:	3801      	subs	r0, #1
 8001af6:	e7ce      	b.n	8001a96 <__gedf2+0x52>
 8001af8:	2002      	movs	r0, #2
 8001afa:	4240      	negs	r0, r0
 8001afc:	e7cb      	b.n	8001a96 <__gedf2+0x52>
 8001afe:	45c4      	cmp	ip, r8
 8001b00:	d8c5      	bhi.n	8001a8e <__gedf2+0x4a>
 8001b02:	2000      	movs	r0, #0
 8001b04:	45c4      	cmp	ip, r8
 8001b06:	d2c6      	bcs.n	8001a96 <__gedf2+0x52>
 8001b08:	e7ed      	b.n	8001ae6 <__gedf2+0xa2>
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	000007ff 	.word	0x000007ff

08001b10 <__ledf2>:
 8001b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b12:	4647      	mov	r7, r8
 8001b14:	46ce      	mov	lr, r9
 8001b16:	0004      	movs	r4, r0
 8001b18:	0018      	movs	r0, r3
 8001b1a:	0016      	movs	r6, r2
 8001b1c:	031b      	lsls	r3, r3, #12
 8001b1e:	0b1b      	lsrs	r3, r3, #12
 8001b20:	4d2c      	ldr	r5, [pc, #176]	; (8001bd4 <__ledf2+0xc4>)
 8001b22:	004a      	lsls	r2, r1, #1
 8001b24:	4699      	mov	r9, r3
 8001b26:	b580      	push	{r7, lr}
 8001b28:	0043      	lsls	r3, r0, #1
 8001b2a:	030f      	lsls	r7, r1, #12
 8001b2c:	46a4      	mov	ip, r4
 8001b2e:	46b0      	mov	r8, r6
 8001b30:	0b3f      	lsrs	r7, r7, #12
 8001b32:	0d52      	lsrs	r2, r2, #21
 8001b34:	0fc9      	lsrs	r1, r1, #31
 8001b36:	0d5b      	lsrs	r3, r3, #21
 8001b38:	0fc0      	lsrs	r0, r0, #31
 8001b3a:	42aa      	cmp	r2, r5
 8001b3c:	d00d      	beq.n	8001b5a <__ledf2+0x4a>
 8001b3e:	42ab      	cmp	r3, r5
 8001b40:	d010      	beq.n	8001b64 <__ledf2+0x54>
 8001b42:	2a00      	cmp	r2, #0
 8001b44:	d127      	bne.n	8001b96 <__ledf2+0x86>
 8001b46:	433c      	orrs	r4, r7
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d111      	bne.n	8001b70 <__ledf2+0x60>
 8001b4c:	464d      	mov	r5, r9
 8001b4e:	432e      	orrs	r6, r5
 8001b50:	d10e      	bne.n	8001b70 <__ledf2+0x60>
 8001b52:	2000      	movs	r0, #0
 8001b54:	2c00      	cmp	r4, #0
 8001b56:	d015      	beq.n	8001b84 <__ledf2+0x74>
 8001b58:	e00e      	b.n	8001b78 <__ledf2+0x68>
 8001b5a:	003d      	movs	r5, r7
 8001b5c:	4325      	orrs	r5, r4
 8001b5e:	d110      	bne.n	8001b82 <__ledf2+0x72>
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d118      	bne.n	8001b96 <__ledf2+0x86>
 8001b64:	464d      	mov	r5, r9
 8001b66:	432e      	orrs	r6, r5
 8001b68:	d10b      	bne.n	8001b82 <__ledf2+0x72>
 8001b6a:	2a00      	cmp	r2, #0
 8001b6c:	d102      	bne.n	8001b74 <__ledf2+0x64>
 8001b6e:	433c      	orrs	r4, r7
 8001b70:	2c00      	cmp	r4, #0
 8001b72:	d00b      	beq.n	8001b8c <__ledf2+0x7c>
 8001b74:	4281      	cmp	r1, r0
 8001b76:	d014      	beq.n	8001ba2 <__ledf2+0x92>
 8001b78:	2002      	movs	r0, #2
 8001b7a:	3901      	subs	r1, #1
 8001b7c:	4008      	ands	r0, r1
 8001b7e:	3801      	subs	r0, #1
 8001b80:	e000      	b.n	8001b84 <__ledf2+0x74>
 8001b82:	2002      	movs	r0, #2
 8001b84:	bcc0      	pop	{r6, r7}
 8001b86:	46b9      	mov	r9, r7
 8001b88:	46b0      	mov	r8, r6
 8001b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b8c:	2800      	cmp	r0, #0
 8001b8e:	d1f9      	bne.n	8001b84 <__ledf2+0x74>
 8001b90:	2001      	movs	r0, #1
 8001b92:	4240      	negs	r0, r0
 8001b94:	e7f6      	b.n	8001b84 <__ledf2+0x74>
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1ec      	bne.n	8001b74 <__ledf2+0x64>
 8001b9a:	464c      	mov	r4, r9
 8001b9c:	4326      	orrs	r6, r4
 8001b9e:	d1e9      	bne.n	8001b74 <__ledf2+0x64>
 8001ba0:	e7ea      	b.n	8001b78 <__ledf2+0x68>
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	dd04      	ble.n	8001bb0 <__ledf2+0xa0>
 8001ba6:	4243      	negs	r3, r0
 8001ba8:	4158      	adcs	r0, r3
 8001baa:	0040      	lsls	r0, r0, #1
 8001bac:	3801      	subs	r0, #1
 8001bae:	e7e9      	b.n	8001b84 <__ledf2+0x74>
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	dbeb      	blt.n	8001b8c <__ledf2+0x7c>
 8001bb4:	454f      	cmp	r7, r9
 8001bb6:	d8df      	bhi.n	8001b78 <__ledf2+0x68>
 8001bb8:	d006      	beq.n	8001bc8 <__ledf2+0xb8>
 8001bba:	2000      	movs	r0, #0
 8001bbc:	454f      	cmp	r7, r9
 8001bbe:	d2e1      	bcs.n	8001b84 <__ledf2+0x74>
 8001bc0:	2900      	cmp	r1, #0
 8001bc2:	d0e5      	beq.n	8001b90 <__ledf2+0x80>
 8001bc4:	0008      	movs	r0, r1
 8001bc6:	e7dd      	b.n	8001b84 <__ledf2+0x74>
 8001bc8:	45c4      	cmp	ip, r8
 8001bca:	d8d5      	bhi.n	8001b78 <__ledf2+0x68>
 8001bcc:	2000      	movs	r0, #0
 8001bce:	45c4      	cmp	ip, r8
 8001bd0:	d2d8      	bcs.n	8001b84 <__ledf2+0x74>
 8001bd2:	e7f5      	b.n	8001bc0 <__ledf2+0xb0>
 8001bd4:	000007ff 	.word	0x000007ff

08001bd8 <__aeabi_dmul>:
 8001bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bda:	4657      	mov	r7, sl
 8001bdc:	464e      	mov	r6, r9
 8001bde:	4645      	mov	r5, r8
 8001be0:	46de      	mov	lr, fp
 8001be2:	b5e0      	push	{r5, r6, r7, lr}
 8001be4:	4698      	mov	r8, r3
 8001be6:	030c      	lsls	r4, r1, #12
 8001be8:	004b      	lsls	r3, r1, #1
 8001bea:	0006      	movs	r6, r0
 8001bec:	4692      	mov	sl, r2
 8001bee:	b087      	sub	sp, #28
 8001bf0:	0b24      	lsrs	r4, r4, #12
 8001bf2:	0d5b      	lsrs	r3, r3, #21
 8001bf4:	0fcf      	lsrs	r7, r1, #31
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d100      	bne.n	8001bfc <__aeabi_dmul+0x24>
 8001bfa:	e15c      	b.n	8001eb6 <__aeabi_dmul+0x2de>
 8001bfc:	4ad9      	ldr	r2, [pc, #868]	; (8001f64 <__aeabi_dmul+0x38c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d100      	bne.n	8001c04 <__aeabi_dmul+0x2c>
 8001c02:	e175      	b.n	8001ef0 <__aeabi_dmul+0x318>
 8001c04:	0f42      	lsrs	r2, r0, #29
 8001c06:	00e4      	lsls	r4, r4, #3
 8001c08:	4314      	orrs	r4, r2
 8001c0a:	2280      	movs	r2, #128	; 0x80
 8001c0c:	0412      	lsls	r2, r2, #16
 8001c0e:	4314      	orrs	r4, r2
 8001c10:	4ad5      	ldr	r2, [pc, #852]	; (8001f68 <__aeabi_dmul+0x390>)
 8001c12:	00c5      	lsls	r5, r0, #3
 8001c14:	4694      	mov	ip, r2
 8001c16:	4463      	add	r3, ip
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	4699      	mov	r9, r3
 8001c1e:	469b      	mov	fp, r3
 8001c20:	4643      	mov	r3, r8
 8001c22:	4642      	mov	r2, r8
 8001c24:	031e      	lsls	r6, r3, #12
 8001c26:	0fd2      	lsrs	r2, r2, #31
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4650      	mov	r0, sl
 8001c2c:	4690      	mov	r8, r2
 8001c2e:	0b36      	lsrs	r6, r6, #12
 8001c30:	0d5b      	lsrs	r3, r3, #21
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dmul+0x5e>
 8001c34:	e120      	b.n	8001e78 <__aeabi_dmul+0x2a0>
 8001c36:	4acb      	ldr	r2, [pc, #812]	; (8001f64 <__aeabi_dmul+0x38c>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d100      	bne.n	8001c3e <__aeabi_dmul+0x66>
 8001c3c:	e162      	b.n	8001f04 <__aeabi_dmul+0x32c>
 8001c3e:	49ca      	ldr	r1, [pc, #808]	; (8001f68 <__aeabi_dmul+0x390>)
 8001c40:	0f42      	lsrs	r2, r0, #29
 8001c42:	468c      	mov	ip, r1
 8001c44:	9900      	ldr	r1, [sp, #0]
 8001c46:	4463      	add	r3, ip
 8001c48:	00f6      	lsls	r6, r6, #3
 8001c4a:	468c      	mov	ip, r1
 8001c4c:	4316      	orrs	r6, r2
 8001c4e:	2280      	movs	r2, #128	; 0x80
 8001c50:	449c      	add	ip, r3
 8001c52:	0412      	lsls	r2, r2, #16
 8001c54:	4663      	mov	r3, ip
 8001c56:	4316      	orrs	r6, r2
 8001c58:	00c2      	lsls	r2, r0, #3
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	9900      	ldr	r1, [sp, #0]
 8001c60:	4643      	mov	r3, r8
 8001c62:	3101      	adds	r1, #1
 8001c64:	468c      	mov	ip, r1
 8001c66:	4649      	mov	r1, r9
 8001c68:	407b      	eors	r3, r7
 8001c6a:	9301      	str	r3, [sp, #4]
 8001c6c:	290f      	cmp	r1, #15
 8001c6e:	d826      	bhi.n	8001cbe <__aeabi_dmul+0xe6>
 8001c70:	4bbe      	ldr	r3, [pc, #760]	; (8001f6c <__aeabi_dmul+0x394>)
 8001c72:	0089      	lsls	r1, r1, #2
 8001c74:	5859      	ldr	r1, [r3, r1]
 8001c76:	468f      	mov	pc, r1
 8001c78:	4643      	mov	r3, r8
 8001c7a:	9301      	str	r3, [sp, #4]
 8001c7c:	0034      	movs	r4, r6
 8001c7e:	0015      	movs	r5, r2
 8001c80:	4683      	mov	fp, r0
 8001c82:	465b      	mov	r3, fp
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d016      	beq.n	8001cb6 <__aeabi_dmul+0xde>
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	d100      	bne.n	8001c8e <__aeabi_dmul+0xb6>
 8001c8c:	e203      	b.n	8002096 <__aeabi_dmul+0x4be>
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d000      	beq.n	8001c94 <__aeabi_dmul+0xbc>
 8001c92:	e0cd      	b.n	8001e30 <__aeabi_dmul+0x258>
 8001c94:	2200      	movs	r2, #0
 8001c96:	2400      	movs	r4, #0
 8001c98:	2500      	movs	r5, #0
 8001c9a:	9b01      	ldr	r3, [sp, #4]
 8001c9c:	0512      	lsls	r2, r2, #20
 8001c9e:	4322      	orrs	r2, r4
 8001ca0:	07db      	lsls	r3, r3, #31
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	0028      	movs	r0, r5
 8001ca6:	0011      	movs	r1, r2
 8001ca8:	b007      	add	sp, #28
 8001caa:	bcf0      	pop	{r4, r5, r6, r7}
 8001cac:	46bb      	mov	fp, r7
 8001cae:	46b2      	mov	sl, r6
 8001cb0:	46a9      	mov	r9, r5
 8001cb2:	46a0      	mov	r8, r4
 8001cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cb6:	2400      	movs	r4, #0
 8001cb8:	2500      	movs	r5, #0
 8001cba:	4aaa      	ldr	r2, [pc, #680]	; (8001f64 <__aeabi_dmul+0x38c>)
 8001cbc:	e7ed      	b.n	8001c9a <__aeabi_dmul+0xc2>
 8001cbe:	0c28      	lsrs	r0, r5, #16
 8001cc0:	042d      	lsls	r5, r5, #16
 8001cc2:	0c2d      	lsrs	r5, r5, #16
 8001cc4:	002b      	movs	r3, r5
 8001cc6:	0c11      	lsrs	r1, r2, #16
 8001cc8:	0412      	lsls	r2, r2, #16
 8001cca:	0c12      	lsrs	r2, r2, #16
 8001ccc:	4353      	muls	r3, r2
 8001cce:	4698      	mov	r8, r3
 8001cd0:	0013      	movs	r3, r2
 8001cd2:	002f      	movs	r7, r5
 8001cd4:	4343      	muls	r3, r0
 8001cd6:	4699      	mov	r9, r3
 8001cd8:	434f      	muls	r7, r1
 8001cda:	444f      	add	r7, r9
 8001cdc:	46bb      	mov	fp, r7
 8001cde:	4647      	mov	r7, r8
 8001ce0:	000b      	movs	r3, r1
 8001ce2:	0c3f      	lsrs	r7, r7, #16
 8001ce4:	46ba      	mov	sl, r7
 8001ce6:	4343      	muls	r3, r0
 8001ce8:	44da      	add	sl, fp
 8001cea:	9302      	str	r3, [sp, #8]
 8001cec:	45d1      	cmp	r9, sl
 8001cee:	d904      	bls.n	8001cfa <__aeabi_dmul+0x122>
 8001cf0:	2780      	movs	r7, #128	; 0x80
 8001cf2:	027f      	lsls	r7, r7, #9
 8001cf4:	46b9      	mov	r9, r7
 8001cf6:	444b      	add	r3, r9
 8001cf8:	9302      	str	r3, [sp, #8]
 8001cfa:	4653      	mov	r3, sl
 8001cfc:	0c1b      	lsrs	r3, r3, #16
 8001cfe:	469b      	mov	fp, r3
 8001d00:	4653      	mov	r3, sl
 8001d02:	041f      	lsls	r7, r3, #16
 8001d04:	4643      	mov	r3, r8
 8001d06:	041b      	lsls	r3, r3, #16
 8001d08:	0c1b      	lsrs	r3, r3, #16
 8001d0a:	4698      	mov	r8, r3
 8001d0c:	003b      	movs	r3, r7
 8001d0e:	4443      	add	r3, r8
 8001d10:	9304      	str	r3, [sp, #16]
 8001d12:	0c33      	lsrs	r3, r6, #16
 8001d14:	0436      	lsls	r6, r6, #16
 8001d16:	0c36      	lsrs	r6, r6, #16
 8001d18:	4698      	mov	r8, r3
 8001d1a:	0033      	movs	r3, r6
 8001d1c:	4343      	muls	r3, r0
 8001d1e:	4699      	mov	r9, r3
 8001d20:	4643      	mov	r3, r8
 8001d22:	4343      	muls	r3, r0
 8001d24:	002f      	movs	r7, r5
 8001d26:	469a      	mov	sl, r3
 8001d28:	4643      	mov	r3, r8
 8001d2a:	4377      	muls	r7, r6
 8001d2c:	435d      	muls	r5, r3
 8001d2e:	0c38      	lsrs	r0, r7, #16
 8001d30:	444d      	add	r5, r9
 8001d32:	1945      	adds	r5, r0, r5
 8001d34:	45a9      	cmp	r9, r5
 8001d36:	d903      	bls.n	8001d40 <__aeabi_dmul+0x168>
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	025b      	lsls	r3, r3, #9
 8001d3c:	4699      	mov	r9, r3
 8001d3e:	44ca      	add	sl, r9
 8001d40:	043f      	lsls	r7, r7, #16
 8001d42:	0c28      	lsrs	r0, r5, #16
 8001d44:	0c3f      	lsrs	r7, r7, #16
 8001d46:	042d      	lsls	r5, r5, #16
 8001d48:	19ed      	adds	r5, r5, r7
 8001d4a:	0c27      	lsrs	r7, r4, #16
 8001d4c:	0424      	lsls	r4, r4, #16
 8001d4e:	0c24      	lsrs	r4, r4, #16
 8001d50:	0003      	movs	r3, r0
 8001d52:	0020      	movs	r0, r4
 8001d54:	4350      	muls	r0, r2
 8001d56:	437a      	muls	r2, r7
 8001d58:	4691      	mov	r9, r2
 8001d5a:	003a      	movs	r2, r7
 8001d5c:	4453      	add	r3, sl
 8001d5e:	9305      	str	r3, [sp, #20]
 8001d60:	0c03      	lsrs	r3, r0, #16
 8001d62:	469a      	mov	sl, r3
 8001d64:	434a      	muls	r2, r1
 8001d66:	4361      	muls	r1, r4
 8001d68:	4449      	add	r1, r9
 8001d6a:	4451      	add	r1, sl
 8001d6c:	44ab      	add	fp, r5
 8001d6e:	4589      	cmp	r9, r1
 8001d70:	d903      	bls.n	8001d7a <__aeabi_dmul+0x1a2>
 8001d72:	2380      	movs	r3, #128	; 0x80
 8001d74:	025b      	lsls	r3, r3, #9
 8001d76:	4699      	mov	r9, r3
 8001d78:	444a      	add	r2, r9
 8001d7a:	0400      	lsls	r0, r0, #16
 8001d7c:	0c0b      	lsrs	r3, r1, #16
 8001d7e:	0c00      	lsrs	r0, r0, #16
 8001d80:	0409      	lsls	r1, r1, #16
 8001d82:	1809      	adds	r1, r1, r0
 8001d84:	0020      	movs	r0, r4
 8001d86:	4699      	mov	r9, r3
 8001d88:	4643      	mov	r3, r8
 8001d8a:	4370      	muls	r0, r6
 8001d8c:	435c      	muls	r4, r3
 8001d8e:	437e      	muls	r6, r7
 8001d90:	435f      	muls	r7, r3
 8001d92:	0c03      	lsrs	r3, r0, #16
 8001d94:	4698      	mov	r8, r3
 8001d96:	19a4      	adds	r4, r4, r6
 8001d98:	4444      	add	r4, r8
 8001d9a:	444a      	add	r2, r9
 8001d9c:	9703      	str	r7, [sp, #12]
 8001d9e:	42a6      	cmp	r6, r4
 8001da0:	d904      	bls.n	8001dac <__aeabi_dmul+0x1d4>
 8001da2:	2380      	movs	r3, #128	; 0x80
 8001da4:	025b      	lsls	r3, r3, #9
 8001da6:	4698      	mov	r8, r3
 8001da8:	4447      	add	r7, r8
 8001daa:	9703      	str	r7, [sp, #12]
 8001dac:	0423      	lsls	r3, r4, #16
 8001dae:	9e02      	ldr	r6, [sp, #8]
 8001db0:	469a      	mov	sl, r3
 8001db2:	9b05      	ldr	r3, [sp, #20]
 8001db4:	445e      	add	r6, fp
 8001db6:	4698      	mov	r8, r3
 8001db8:	42ae      	cmp	r6, r5
 8001dba:	41ad      	sbcs	r5, r5
 8001dbc:	1876      	adds	r6, r6, r1
 8001dbe:	428e      	cmp	r6, r1
 8001dc0:	4189      	sbcs	r1, r1
 8001dc2:	0400      	lsls	r0, r0, #16
 8001dc4:	0c00      	lsrs	r0, r0, #16
 8001dc6:	4450      	add	r0, sl
 8001dc8:	4440      	add	r0, r8
 8001dca:	426d      	negs	r5, r5
 8001dcc:	1947      	adds	r7, r0, r5
 8001dce:	46b8      	mov	r8, r7
 8001dd0:	4693      	mov	fp, r2
 8001dd2:	4249      	negs	r1, r1
 8001dd4:	4689      	mov	r9, r1
 8001dd6:	44c3      	add	fp, r8
 8001dd8:	44d9      	add	r9, fp
 8001dda:	4298      	cmp	r0, r3
 8001ddc:	4180      	sbcs	r0, r0
 8001dde:	45a8      	cmp	r8, r5
 8001de0:	41ad      	sbcs	r5, r5
 8001de2:	4593      	cmp	fp, r2
 8001de4:	4192      	sbcs	r2, r2
 8001de6:	4589      	cmp	r9, r1
 8001de8:	4189      	sbcs	r1, r1
 8001dea:	426d      	negs	r5, r5
 8001dec:	4240      	negs	r0, r0
 8001dee:	4328      	orrs	r0, r5
 8001df0:	0c24      	lsrs	r4, r4, #16
 8001df2:	4252      	negs	r2, r2
 8001df4:	4249      	negs	r1, r1
 8001df6:	430a      	orrs	r2, r1
 8001df8:	9b03      	ldr	r3, [sp, #12]
 8001dfa:	1900      	adds	r0, r0, r4
 8001dfc:	1880      	adds	r0, r0, r2
 8001dfe:	18c7      	adds	r7, r0, r3
 8001e00:	464b      	mov	r3, r9
 8001e02:	0ddc      	lsrs	r4, r3, #23
 8001e04:	9b04      	ldr	r3, [sp, #16]
 8001e06:	0275      	lsls	r5, r6, #9
 8001e08:	431d      	orrs	r5, r3
 8001e0a:	1e6a      	subs	r2, r5, #1
 8001e0c:	4195      	sbcs	r5, r2
 8001e0e:	464b      	mov	r3, r9
 8001e10:	0df6      	lsrs	r6, r6, #23
 8001e12:	027f      	lsls	r7, r7, #9
 8001e14:	4335      	orrs	r5, r6
 8001e16:	025a      	lsls	r2, r3, #9
 8001e18:	433c      	orrs	r4, r7
 8001e1a:	4315      	orrs	r5, r2
 8001e1c:	01fb      	lsls	r3, r7, #7
 8001e1e:	d400      	bmi.n	8001e22 <__aeabi_dmul+0x24a>
 8001e20:	e11c      	b.n	800205c <__aeabi_dmul+0x484>
 8001e22:	2101      	movs	r1, #1
 8001e24:	086a      	lsrs	r2, r5, #1
 8001e26:	400d      	ands	r5, r1
 8001e28:	4315      	orrs	r5, r2
 8001e2a:	07e2      	lsls	r2, r4, #31
 8001e2c:	4315      	orrs	r5, r2
 8001e2e:	0864      	lsrs	r4, r4, #1
 8001e30:	494f      	ldr	r1, [pc, #316]	; (8001f70 <__aeabi_dmul+0x398>)
 8001e32:	4461      	add	r1, ip
 8001e34:	2900      	cmp	r1, #0
 8001e36:	dc00      	bgt.n	8001e3a <__aeabi_dmul+0x262>
 8001e38:	e0b0      	b.n	8001f9c <__aeabi_dmul+0x3c4>
 8001e3a:	076b      	lsls	r3, r5, #29
 8001e3c:	d009      	beq.n	8001e52 <__aeabi_dmul+0x27a>
 8001e3e:	220f      	movs	r2, #15
 8001e40:	402a      	ands	r2, r5
 8001e42:	2a04      	cmp	r2, #4
 8001e44:	d005      	beq.n	8001e52 <__aeabi_dmul+0x27a>
 8001e46:	1d2a      	adds	r2, r5, #4
 8001e48:	42aa      	cmp	r2, r5
 8001e4a:	41ad      	sbcs	r5, r5
 8001e4c:	426d      	negs	r5, r5
 8001e4e:	1964      	adds	r4, r4, r5
 8001e50:	0015      	movs	r5, r2
 8001e52:	01e3      	lsls	r3, r4, #7
 8001e54:	d504      	bpl.n	8001e60 <__aeabi_dmul+0x288>
 8001e56:	2180      	movs	r1, #128	; 0x80
 8001e58:	4a46      	ldr	r2, [pc, #280]	; (8001f74 <__aeabi_dmul+0x39c>)
 8001e5a:	00c9      	lsls	r1, r1, #3
 8001e5c:	4014      	ands	r4, r2
 8001e5e:	4461      	add	r1, ip
 8001e60:	4a45      	ldr	r2, [pc, #276]	; (8001f78 <__aeabi_dmul+0x3a0>)
 8001e62:	4291      	cmp	r1, r2
 8001e64:	dd00      	ble.n	8001e68 <__aeabi_dmul+0x290>
 8001e66:	e726      	b.n	8001cb6 <__aeabi_dmul+0xde>
 8001e68:	0762      	lsls	r2, r4, #29
 8001e6a:	08ed      	lsrs	r5, r5, #3
 8001e6c:	0264      	lsls	r4, r4, #9
 8001e6e:	0549      	lsls	r1, r1, #21
 8001e70:	4315      	orrs	r5, r2
 8001e72:	0b24      	lsrs	r4, r4, #12
 8001e74:	0d4a      	lsrs	r2, r1, #21
 8001e76:	e710      	b.n	8001c9a <__aeabi_dmul+0xc2>
 8001e78:	4652      	mov	r2, sl
 8001e7a:	4332      	orrs	r2, r6
 8001e7c:	d100      	bne.n	8001e80 <__aeabi_dmul+0x2a8>
 8001e7e:	e07f      	b.n	8001f80 <__aeabi_dmul+0x3a8>
 8001e80:	2e00      	cmp	r6, #0
 8001e82:	d100      	bne.n	8001e86 <__aeabi_dmul+0x2ae>
 8001e84:	e0dc      	b.n	8002040 <__aeabi_dmul+0x468>
 8001e86:	0030      	movs	r0, r6
 8001e88:	f000 fd96 	bl	80029b8 <__clzsi2>
 8001e8c:	0002      	movs	r2, r0
 8001e8e:	3a0b      	subs	r2, #11
 8001e90:	231d      	movs	r3, #29
 8001e92:	0001      	movs	r1, r0
 8001e94:	1a9b      	subs	r3, r3, r2
 8001e96:	4652      	mov	r2, sl
 8001e98:	3908      	subs	r1, #8
 8001e9a:	40da      	lsrs	r2, r3
 8001e9c:	408e      	lsls	r6, r1
 8001e9e:	4316      	orrs	r6, r2
 8001ea0:	4652      	mov	r2, sl
 8001ea2:	408a      	lsls	r2, r1
 8001ea4:	9b00      	ldr	r3, [sp, #0]
 8001ea6:	4935      	ldr	r1, [pc, #212]	; (8001f7c <__aeabi_dmul+0x3a4>)
 8001ea8:	1a18      	subs	r0, r3, r0
 8001eaa:	0003      	movs	r3, r0
 8001eac:	468c      	mov	ip, r1
 8001eae:	4463      	add	r3, ip
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	e6d3      	b.n	8001c5e <__aeabi_dmul+0x86>
 8001eb6:	0025      	movs	r5, r4
 8001eb8:	4305      	orrs	r5, r0
 8001eba:	d04a      	beq.n	8001f52 <__aeabi_dmul+0x37a>
 8001ebc:	2c00      	cmp	r4, #0
 8001ebe:	d100      	bne.n	8001ec2 <__aeabi_dmul+0x2ea>
 8001ec0:	e0b0      	b.n	8002024 <__aeabi_dmul+0x44c>
 8001ec2:	0020      	movs	r0, r4
 8001ec4:	f000 fd78 	bl	80029b8 <__clzsi2>
 8001ec8:	0001      	movs	r1, r0
 8001eca:	0002      	movs	r2, r0
 8001ecc:	390b      	subs	r1, #11
 8001ece:	231d      	movs	r3, #29
 8001ed0:	0010      	movs	r0, r2
 8001ed2:	1a5b      	subs	r3, r3, r1
 8001ed4:	0031      	movs	r1, r6
 8001ed6:	0035      	movs	r5, r6
 8001ed8:	3808      	subs	r0, #8
 8001eda:	4084      	lsls	r4, r0
 8001edc:	40d9      	lsrs	r1, r3
 8001ede:	4085      	lsls	r5, r0
 8001ee0:	430c      	orrs	r4, r1
 8001ee2:	4826      	ldr	r0, [pc, #152]	; (8001f7c <__aeabi_dmul+0x3a4>)
 8001ee4:	1a83      	subs	r3, r0, r2
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	2300      	movs	r3, #0
 8001eea:	4699      	mov	r9, r3
 8001eec:	469b      	mov	fp, r3
 8001eee:	e697      	b.n	8001c20 <__aeabi_dmul+0x48>
 8001ef0:	0005      	movs	r5, r0
 8001ef2:	4325      	orrs	r5, r4
 8001ef4:	d126      	bne.n	8001f44 <__aeabi_dmul+0x36c>
 8001ef6:	2208      	movs	r2, #8
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	2302      	movs	r3, #2
 8001efc:	2400      	movs	r4, #0
 8001efe:	4691      	mov	r9, r2
 8001f00:	469b      	mov	fp, r3
 8001f02:	e68d      	b.n	8001c20 <__aeabi_dmul+0x48>
 8001f04:	4652      	mov	r2, sl
 8001f06:	9b00      	ldr	r3, [sp, #0]
 8001f08:	4332      	orrs	r2, r6
 8001f0a:	d110      	bne.n	8001f2e <__aeabi_dmul+0x356>
 8001f0c:	4915      	ldr	r1, [pc, #84]	; (8001f64 <__aeabi_dmul+0x38c>)
 8001f0e:	2600      	movs	r6, #0
 8001f10:	468c      	mov	ip, r1
 8001f12:	4463      	add	r3, ip
 8001f14:	4649      	mov	r1, r9
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	2302      	movs	r3, #2
 8001f1a:	4319      	orrs	r1, r3
 8001f1c:	4689      	mov	r9, r1
 8001f1e:	2002      	movs	r0, #2
 8001f20:	e69d      	b.n	8001c5e <__aeabi_dmul+0x86>
 8001f22:	465b      	mov	r3, fp
 8001f24:	9701      	str	r7, [sp, #4]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d000      	beq.n	8001f2c <__aeabi_dmul+0x354>
 8001f2a:	e6ad      	b.n	8001c88 <__aeabi_dmul+0xb0>
 8001f2c:	e6c3      	b.n	8001cb6 <__aeabi_dmul+0xde>
 8001f2e:	4a0d      	ldr	r2, [pc, #52]	; (8001f64 <__aeabi_dmul+0x38c>)
 8001f30:	2003      	movs	r0, #3
 8001f32:	4694      	mov	ip, r2
 8001f34:	4463      	add	r3, ip
 8001f36:	464a      	mov	r2, r9
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	4691      	mov	r9, r2
 8001f40:	4652      	mov	r2, sl
 8001f42:	e68c      	b.n	8001c5e <__aeabi_dmul+0x86>
 8001f44:	220c      	movs	r2, #12
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	2303      	movs	r3, #3
 8001f4a:	0005      	movs	r5, r0
 8001f4c:	4691      	mov	r9, r2
 8001f4e:	469b      	mov	fp, r3
 8001f50:	e666      	b.n	8001c20 <__aeabi_dmul+0x48>
 8001f52:	2304      	movs	r3, #4
 8001f54:	4699      	mov	r9, r3
 8001f56:	2300      	movs	r3, #0
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	2400      	movs	r4, #0
 8001f5e:	469b      	mov	fp, r3
 8001f60:	e65e      	b.n	8001c20 <__aeabi_dmul+0x48>
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	000007ff 	.word	0x000007ff
 8001f68:	fffffc01 	.word	0xfffffc01
 8001f6c:	0800a828 	.word	0x0800a828
 8001f70:	000003ff 	.word	0x000003ff
 8001f74:	feffffff 	.word	0xfeffffff
 8001f78:	000007fe 	.word	0x000007fe
 8001f7c:	fffffc0d 	.word	0xfffffc0d
 8001f80:	4649      	mov	r1, r9
 8001f82:	2301      	movs	r3, #1
 8001f84:	4319      	orrs	r1, r3
 8001f86:	4689      	mov	r9, r1
 8001f88:	2600      	movs	r6, #0
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	e667      	b.n	8001c5e <__aeabi_dmul+0x86>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	2480      	movs	r4, #128	; 0x80
 8001f92:	2500      	movs	r5, #0
 8001f94:	4a43      	ldr	r2, [pc, #268]	; (80020a4 <__aeabi_dmul+0x4cc>)
 8001f96:	9301      	str	r3, [sp, #4]
 8001f98:	0324      	lsls	r4, r4, #12
 8001f9a:	e67e      	b.n	8001c9a <__aeabi_dmul+0xc2>
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	1a40      	subs	r0, r0, r1
 8001fa0:	2838      	cmp	r0, #56	; 0x38
 8001fa2:	dd00      	ble.n	8001fa6 <__aeabi_dmul+0x3ce>
 8001fa4:	e676      	b.n	8001c94 <__aeabi_dmul+0xbc>
 8001fa6:	281f      	cmp	r0, #31
 8001fa8:	dd5b      	ble.n	8002062 <__aeabi_dmul+0x48a>
 8001faa:	221f      	movs	r2, #31
 8001fac:	0023      	movs	r3, r4
 8001fae:	4252      	negs	r2, r2
 8001fb0:	1a51      	subs	r1, r2, r1
 8001fb2:	40cb      	lsrs	r3, r1
 8001fb4:	0019      	movs	r1, r3
 8001fb6:	2820      	cmp	r0, #32
 8001fb8:	d003      	beq.n	8001fc2 <__aeabi_dmul+0x3ea>
 8001fba:	4a3b      	ldr	r2, [pc, #236]	; (80020a8 <__aeabi_dmul+0x4d0>)
 8001fbc:	4462      	add	r2, ip
 8001fbe:	4094      	lsls	r4, r2
 8001fc0:	4325      	orrs	r5, r4
 8001fc2:	1e6a      	subs	r2, r5, #1
 8001fc4:	4195      	sbcs	r5, r2
 8001fc6:	002a      	movs	r2, r5
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	2107      	movs	r1, #7
 8001fcc:	000d      	movs	r5, r1
 8001fce:	2400      	movs	r4, #0
 8001fd0:	4015      	ands	r5, r2
 8001fd2:	4211      	tst	r1, r2
 8001fd4:	d05b      	beq.n	800208e <__aeabi_dmul+0x4b6>
 8001fd6:	210f      	movs	r1, #15
 8001fd8:	2400      	movs	r4, #0
 8001fda:	4011      	ands	r1, r2
 8001fdc:	2904      	cmp	r1, #4
 8001fde:	d053      	beq.n	8002088 <__aeabi_dmul+0x4b0>
 8001fe0:	1d11      	adds	r1, r2, #4
 8001fe2:	4291      	cmp	r1, r2
 8001fe4:	4192      	sbcs	r2, r2
 8001fe6:	4252      	negs	r2, r2
 8001fe8:	18a4      	adds	r4, r4, r2
 8001fea:	000a      	movs	r2, r1
 8001fec:	0223      	lsls	r3, r4, #8
 8001fee:	d54b      	bpl.n	8002088 <__aeabi_dmul+0x4b0>
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	2400      	movs	r4, #0
 8001ff4:	2500      	movs	r5, #0
 8001ff6:	e650      	b.n	8001c9a <__aeabi_dmul+0xc2>
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	031b      	lsls	r3, r3, #12
 8001ffc:	421c      	tst	r4, r3
 8001ffe:	d009      	beq.n	8002014 <__aeabi_dmul+0x43c>
 8002000:	421e      	tst	r6, r3
 8002002:	d107      	bne.n	8002014 <__aeabi_dmul+0x43c>
 8002004:	4333      	orrs	r3, r6
 8002006:	031c      	lsls	r4, r3, #12
 8002008:	4643      	mov	r3, r8
 800200a:	0015      	movs	r5, r2
 800200c:	0b24      	lsrs	r4, r4, #12
 800200e:	4a25      	ldr	r2, [pc, #148]	; (80020a4 <__aeabi_dmul+0x4cc>)
 8002010:	9301      	str	r3, [sp, #4]
 8002012:	e642      	b.n	8001c9a <__aeabi_dmul+0xc2>
 8002014:	2280      	movs	r2, #128	; 0x80
 8002016:	0312      	lsls	r2, r2, #12
 8002018:	4314      	orrs	r4, r2
 800201a:	0324      	lsls	r4, r4, #12
 800201c:	4a21      	ldr	r2, [pc, #132]	; (80020a4 <__aeabi_dmul+0x4cc>)
 800201e:	0b24      	lsrs	r4, r4, #12
 8002020:	9701      	str	r7, [sp, #4]
 8002022:	e63a      	b.n	8001c9a <__aeabi_dmul+0xc2>
 8002024:	f000 fcc8 	bl	80029b8 <__clzsi2>
 8002028:	0001      	movs	r1, r0
 800202a:	0002      	movs	r2, r0
 800202c:	3115      	adds	r1, #21
 800202e:	3220      	adds	r2, #32
 8002030:	291c      	cmp	r1, #28
 8002032:	dc00      	bgt.n	8002036 <__aeabi_dmul+0x45e>
 8002034:	e74b      	b.n	8001ece <__aeabi_dmul+0x2f6>
 8002036:	0034      	movs	r4, r6
 8002038:	3808      	subs	r0, #8
 800203a:	2500      	movs	r5, #0
 800203c:	4084      	lsls	r4, r0
 800203e:	e750      	b.n	8001ee2 <__aeabi_dmul+0x30a>
 8002040:	f000 fcba 	bl	80029b8 <__clzsi2>
 8002044:	0003      	movs	r3, r0
 8002046:	001a      	movs	r2, r3
 8002048:	3215      	adds	r2, #21
 800204a:	3020      	adds	r0, #32
 800204c:	2a1c      	cmp	r2, #28
 800204e:	dc00      	bgt.n	8002052 <__aeabi_dmul+0x47a>
 8002050:	e71e      	b.n	8001e90 <__aeabi_dmul+0x2b8>
 8002052:	4656      	mov	r6, sl
 8002054:	3b08      	subs	r3, #8
 8002056:	2200      	movs	r2, #0
 8002058:	409e      	lsls	r6, r3
 800205a:	e723      	b.n	8001ea4 <__aeabi_dmul+0x2cc>
 800205c:	9b00      	ldr	r3, [sp, #0]
 800205e:	469c      	mov	ip, r3
 8002060:	e6e6      	b.n	8001e30 <__aeabi_dmul+0x258>
 8002062:	4912      	ldr	r1, [pc, #72]	; (80020ac <__aeabi_dmul+0x4d4>)
 8002064:	0022      	movs	r2, r4
 8002066:	4461      	add	r1, ip
 8002068:	002e      	movs	r6, r5
 800206a:	408d      	lsls	r5, r1
 800206c:	408a      	lsls	r2, r1
 800206e:	40c6      	lsrs	r6, r0
 8002070:	1e69      	subs	r1, r5, #1
 8002072:	418d      	sbcs	r5, r1
 8002074:	4332      	orrs	r2, r6
 8002076:	432a      	orrs	r2, r5
 8002078:	40c4      	lsrs	r4, r0
 800207a:	0753      	lsls	r3, r2, #29
 800207c:	d0b6      	beq.n	8001fec <__aeabi_dmul+0x414>
 800207e:	210f      	movs	r1, #15
 8002080:	4011      	ands	r1, r2
 8002082:	2904      	cmp	r1, #4
 8002084:	d1ac      	bne.n	8001fe0 <__aeabi_dmul+0x408>
 8002086:	e7b1      	b.n	8001fec <__aeabi_dmul+0x414>
 8002088:	0765      	lsls	r5, r4, #29
 800208a:	0264      	lsls	r4, r4, #9
 800208c:	0b24      	lsrs	r4, r4, #12
 800208e:	08d2      	lsrs	r2, r2, #3
 8002090:	4315      	orrs	r5, r2
 8002092:	2200      	movs	r2, #0
 8002094:	e601      	b.n	8001c9a <__aeabi_dmul+0xc2>
 8002096:	2280      	movs	r2, #128	; 0x80
 8002098:	0312      	lsls	r2, r2, #12
 800209a:	4314      	orrs	r4, r2
 800209c:	0324      	lsls	r4, r4, #12
 800209e:	4a01      	ldr	r2, [pc, #4]	; (80020a4 <__aeabi_dmul+0x4cc>)
 80020a0:	0b24      	lsrs	r4, r4, #12
 80020a2:	e5fa      	b.n	8001c9a <__aeabi_dmul+0xc2>
 80020a4:	000007ff 	.word	0x000007ff
 80020a8:	0000043e 	.word	0x0000043e
 80020ac:	0000041e 	.word	0x0000041e

080020b0 <__aeabi_dsub>:
 80020b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020b2:	4657      	mov	r7, sl
 80020b4:	464e      	mov	r6, r9
 80020b6:	4645      	mov	r5, r8
 80020b8:	46de      	mov	lr, fp
 80020ba:	b5e0      	push	{r5, r6, r7, lr}
 80020bc:	001e      	movs	r6, r3
 80020be:	0017      	movs	r7, r2
 80020c0:	004a      	lsls	r2, r1, #1
 80020c2:	030b      	lsls	r3, r1, #12
 80020c4:	0d52      	lsrs	r2, r2, #21
 80020c6:	0a5b      	lsrs	r3, r3, #9
 80020c8:	4690      	mov	r8, r2
 80020ca:	0f42      	lsrs	r2, r0, #29
 80020cc:	431a      	orrs	r2, r3
 80020ce:	0fcd      	lsrs	r5, r1, #31
 80020d0:	4ccd      	ldr	r4, [pc, #820]	; (8002408 <__aeabi_dsub+0x358>)
 80020d2:	0331      	lsls	r1, r6, #12
 80020d4:	00c3      	lsls	r3, r0, #3
 80020d6:	4694      	mov	ip, r2
 80020d8:	0070      	lsls	r0, r6, #1
 80020da:	0f7a      	lsrs	r2, r7, #29
 80020dc:	0a49      	lsrs	r1, r1, #9
 80020de:	00ff      	lsls	r7, r7, #3
 80020e0:	469a      	mov	sl, r3
 80020e2:	46b9      	mov	r9, r7
 80020e4:	0d40      	lsrs	r0, r0, #21
 80020e6:	0ff6      	lsrs	r6, r6, #31
 80020e8:	4311      	orrs	r1, r2
 80020ea:	42a0      	cmp	r0, r4
 80020ec:	d100      	bne.n	80020f0 <__aeabi_dsub+0x40>
 80020ee:	e0b1      	b.n	8002254 <__aeabi_dsub+0x1a4>
 80020f0:	2201      	movs	r2, #1
 80020f2:	4056      	eors	r6, r2
 80020f4:	46b3      	mov	fp, r6
 80020f6:	42b5      	cmp	r5, r6
 80020f8:	d100      	bne.n	80020fc <__aeabi_dsub+0x4c>
 80020fa:	e088      	b.n	800220e <__aeabi_dsub+0x15e>
 80020fc:	4642      	mov	r2, r8
 80020fe:	1a12      	subs	r2, r2, r0
 8002100:	2a00      	cmp	r2, #0
 8002102:	dc00      	bgt.n	8002106 <__aeabi_dsub+0x56>
 8002104:	e0ae      	b.n	8002264 <__aeabi_dsub+0x1b4>
 8002106:	2800      	cmp	r0, #0
 8002108:	d100      	bne.n	800210c <__aeabi_dsub+0x5c>
 800210a:	e0c1      	b.n	8002290 <__aeabi_dsub+0x1e0>
 800210c:	48be      	ldr	r0, [pc, #760]	; (8002408 <__aeabi_dsub+0x358>)
 800210e:	4580      	cmp	r8, r0
 8002110:	d100      	bne.n	8002114 <__aeabi_dsub+0x64>
 8002112:	e151      	b.n	80023b8 <__aeabi_dsub+0x308>
 8002114:	2080      	movs	r0, #128	; 0x80
 8002116:	0400      	lsls	r0, r0, #16
 8002118:	4301      	orrs	r1, r0
 800211a:	2a38      	cmp	r2, #56	; 0x38
 800211c:	dd00      	ble.n	8002120 <__aeabi_dsub+0x70>
 800211e:	e17b      	b.n	8002418 <__aeabi_dsub+0x368>
 8002120:	2a1f      	cmp	r2, #31
 8002122:	dd00      	ble.n	8002126 <__aeabi_dsub+0x76>
 8002124:	e1ee      	b.n	8002504 <__aeabi_dsub+0x454>
 8002126:	2020      	movs	r0, #32
 8002128:	003e      	movs	r6, r7
 800212a:	1a80      	subs	r0, r0, r2
 800212c:	000c      	movs	r4, r1
 800212e:	40d6      	lsrs	r6, r2
 8002130:	40d1      	lsrs	r1, r2
 8002132:	4087      	lsls	r7, r0
 8002134:	4662      	mov	r2, ip
 8002136:	4084      	lsls	r4, r0
 8002138:	1a52      	subs	r2, r2, r1
 800213a:	1e78      	subs	r0, r7, #1
 800213c:	4187      	sbcs	r7, r0
 800213e:	4694      	mov	ip, r2
 8002140:	4334      	orrs	r4, r6
 8002142:	4327      	orrs	r7, r4
 8002144:	1bdc      	subs	r4, r3, r7
 8002146:	42a3      	cmp	r3, r4
 8002148:	419b      	sbcs	r3, r3
 800214a:	4662      	mov	r2, ip
 800214c:	425b      	negs	r3, r3
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	4699      	mov	r9, r3
 8002152:	464b      	mov	r3, r9
 8002154:	021b      	lsls	r3, r3, #8
 8002156:	d400      	bmi.n	800215a <__aeabi_dsub+0xaa>
 8002158:	e118      	b.n	800238c <__aeabi_dsub+0x2dc>
 800215a:	464b      	mov	r3, r9
 800215c:	0258      	lsls	r0, r3, #9
 800215e:	0a43      	lsrs	r3, r0, #9
 8002160:	4699      	mov	r9, r3
 8002162:	464b      	mov	r3, r9
 8002164:	2b00      	cmp	r3, #0
 8002166:	d100      	bne.n	800216a <__aeabi_dsub+0xba>
 8002168:	e137      	b.n	80023da <__aeabi_dsub+0x32a>
 800216a:	4648      	mov	r0, r9
 800216c:	f000 fc24 	bl	80029b8 <__clzsi2>
 8002170:	0001      	movs	r1, r0
 8002172:	3908      	subs	r1, #8
 8002174:	2320      	movs	r3, #32
 8002176:	0022      	movs	r2, r4
 8002178:	4648      	mov	r0, r9
 800217a:	1a5b      	subs	r3, r3, r1
 800217c:	40da      	lsrs	r2, r3
 800217e:	4088      	lsls	r0, r1
 8002180:	408c      	lsls	r4, r1
 8002182:	4643      	mov	r3, r8
 8002184:	4310      	orrs	r0, r2
 8002186:	4588      	cmp	r8, r1
 8002188:	dd00      	ble.n	800218c <__aeabi_dsub+0xdc>
 800218a:	e136      	b.n	80023fa <__aeabi_dsub+0x34a>
 800218c:	1ac9      	subs	r1, r1, r3
 800218e:	1c4b      	adds	r3, r1, #1
 8002190:	2b1f      	cmp	r3, #31
 8002192:	dd00      	ble.n	8002196 <__aeabi_dsub+0xe6>
 8002194:	e0ea      	b.n	800236c <__aeabi_dsub+0x2bc>
 8002196:	2220      	movs	r2, #32
 8002198:	0026      	movs	r6, r4
 800219a:	1ad2      	subs	r2, r2, r3
 800219c:	0001      	movs	r1, r0
 800219e:	4094      	lsls	r4, r2
 80021a0:	40de      	lsrs	r6, r3
 80021a2:	40d8      	lsrs	r0, r3
 80021a4:	2300      	movs	r3, #0
 80021a6:	4091      	lsls	r1, r2
 80021a8:	1e62      	subs	r2, r4, #1
 80021aa:	4194      	sbcs	r4, r2
 80021ac:	4681      	mov	r9, r0
 80021ae:	4698      	mov	r8, r3
 80021b0:	4331      	orrs	r1, r6
 80021b2:	430c      	orrs	r4, r1
 80021b4:	0763      	lsls	r3, r4, #29
 80021b6:	d009      	beq.n	80021cc <__aeabi_dsub+0x11c>
 80021b8:	230f      	movs	r3, #15
 80021ba:	4023      	ands	r3, r4
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d005      	beq.n	80021cc <__aeabi_dsub+0x11c>
 80021c0:	1d23      	adds	r3, r4, #4
 80021c2:	42a3      	cmp	r3, r4
 80021c4:	41a4      	sbcs	r4, r4
 80021c6:	4264      	negs	r4, r4
 80021c8:	44a1      	add	r9, r4
 80021ca:	001c      	movs	r4, r3
 80021cc:	464b      	mov	r3, r9
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	d400      	bmi.n	80021d4 <__aeabi_dsub+0x124>
 80021d2:	e0de      	b.n	8002392 <__aeabi_dsub+0x2e2>
 80021d4:	4641      	mov	r1, r8
 80021d6:	4b8c      	ldr	r3, [pc, #560]	; (8002408 <__aeabi_dsub+0x358>)
 80021d8:	3101      	adds	r1, #1
 80021da:	4299      	cmp	r1, r3
 80021dc:	d100      	bne.n	80021e0 <__aeabi_dsub+0x130>
 80021de:	e0e7      	b.n	80023b0 <__aeabi_dsub+0x300>
 80021e0:	464b      	mov	r3, r9
 80021e2:	488a      	ldr	r0, [pc, #552]	; (800240c <__aeabi_dsub+0x35c>)
 80021e4:	08e4      	lsrs	r4, r4, #3
 80021e6:	4003      	ands	r3, r0
 80021e8:	0018      	movs	r0, r3
 80021ea:	0549      	lsls	r1, r1, #21
 80021ec:	075b      	lsls	r3, r3, #29
 80021ee:	0240      	lsls	r0, r0, #9
 80021f0:	4323      	orrs	r3, r4
 80021f2:	0d4a      	lsrs	r2, r1, #21
 80021f4:	0b04      	lsrs	r4, r0, #12
 80021f6:	0512      	lsls	r2, r2, #20
 80021f8:	07ed      	lsls	r5, r5, #31
 80021fa:	4322      	orrs	r2, r4
 80021fc:	432a      	orrs	r2, r5
 80021fe:	0018      	movs	r0, r3
 8002200:	0011      	movs	r1, r2
 8002202:	bcf0      	pop	{r4, r5, r6, r7}
 8002204:	46bb      	mov	fp, r7
 8002206:	46b2      	mov	sl, r6
 8002208:	46a9      	mov	r9, r5
 800220a:	46a0      	mov	r8, r4
 800220c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800220e:	4642      	mov	r2, r8
 8002210:	1a12      	subs	r2, r2, r0
 8002212:	2a00      	cmp	r2, #0
 8002214:	dd52      	ble.n	80022bc <__aeabi_dsub+0x20c>
 8002216:	2800      	cmp	r0, #0
 8002218:	d100      	bne.n	800221c <__aeabi_dsub+0x16c>
 800221a:	e09c      	b.n	8002356 <__aeabi_dsub+0x2a6>
 800221c:	45a0      	cmp	r8, r4
 800221e:	d100      	bne.n	8002222 <__aeabi_dsub+0x172>
 8002220:	e0ca      	b.n	80023b8 <__aeabi_dsub+0x308>
 8002222:	2080      	movs	r0, #128	; 0x80
 8002224:	0400      	lsls	r0, r0, #16
 8002226:	4301      	orrs	r1, r0
 8002228:	2a38      	cmp	r2, #56	; 0x38
 800222a:	dd00      	ble.n	800222e <__aeabi_dsub+0x17e>
 800222c:	e149      	b.n	80024c2 <__aeabi_dsub+0x412>
 800222e:	2a1f      	cmp	r2, #31
 8002230:	dc00      	bgt.n	8002234 <__aeabi_dsub+0x184>
 8002232:	e197      	b.n	8002564 <__aeabi_dsub+0x4b4>
 8002234:	0010      	movs	r0, r2
 8002236:	000e      	movs	r6, r1
 8002238:	3820      	subs	r0, #32
 800223a:	40c6      	lsrs	r6, r0
 800223c:	2a20      	cmp	r2, #32
 800223e:	d004      	beq.n	800224a <__aeabi_dsub+0x19a>
 8002240:	2040      	movs	r0, #64	; 0x40
 8002242:	1a82      	subs	r2, r0, r2
 8002244:	4091      	lsls	r1, r2
 8002246:	430f      	orrs	r7, r1
 8002248:	46b9      	mov	r9, r7
 800224a:	464c      	mov	r4, r9
 800224c:	1e62      	subs	r2, r4, #1
 800224e:	4194      	sbcs	r4, r2
 8002250:	4334      	orrs	r4, r6
 8002252:	e13a      	b.n	80024ca <__aeabi_dsub+0x41a>
 8002254:	000a      	movs	r2, r1
 8002256:	433a      	orrs	r2, r7
 8002258:	d028      	beq.n	80022ac <__aeabi_dsub+0x1fc>
 800225a:	46b3      	mov	fp, r6
 800225c:	42b5      	cmp	r5, r6
 800225e:	d02b      	beq.n	80022b8 <__aeabi_dsub+0x208>
 8002260:	4a6b      	ldr	r2, [pc, #428]	; (8002410 <__aeabi_dsub+0x360>)
 8002262:	4442      	add	r2, r8
 8002264:	2a00      	cmp	r2, #0
 8002266:	d05d      	beq.n	8002324 <__aeabi_dsub+0x274>
 8002268:	4642      	mov	r2, r8
 800226a:	4644      	mov	r4, r8
 800226c:	1a82      	subs	r2, r0, r2
 800226e:	2c00      	cmp	r4, #0
 8002270:	d000      	beq.n	8002274 <__aeabi_dsub+0x1c4>
 8002272:	e0f5      	b.n	8002460 <__aeabi_dsub+0x3b0>
 8002274:	4665      	mov	r5, ip
 8002276:	431d      	orrs	r5, r3
 8002278:	d100      	bne.n	800227c <__aeabi_dsub+0x1cc>
 800227a:	e19c      	b.n	80025b6 <__aeabi_dsub+0x506>
 800227c:	1e55      	subs	r5, r2, #1
 800227e:	2a01      	cmp	r2, #1
 8002280:	d100      	bne.n	8002284 <__aeabi_dsub+0x1d4>
 8002282:	e1fb      	b.n	800267c <__aeabi_dsub+0x5cc>
 8002284:	4c60      	ldr	r4, [pc, #384]	; (8002408 <__aeabi_dsub+0x358>)
 8002286:	42a2      	cmp	r2, r4
 8002288:	d100      	bne.n	800228c <__aeabi_dsub+0x1dc>
 800228a:	e1bd      	b.n	8002608 <__aeabi_dsub+0x558>
 800228c:	002a      	movs	r2, r5
 800228e:	e0f0      	b.n	8002472 <__aeabi_dsub+0x3c2>
 8002290:	0008      	movs	r0, r1
 8002292:	4338      	orrs	r0, r7
 8002294:	d100      	bne.n	8002298 <__aeabi_dsub+0x1e8>
 8002296:	e0c3      	b.n	8002420 <__aeabi_dsub+0x370>
 8002298:	1e50      	subs	r0, r2, #1
 800229a:	2a01      	cmp	r2, #1
 800229c:	d100      	bne.n	80022a0 <__aeabi_dsub+0x1f0>
 800229e:	e1a8      	b.n	80025f2 <__aeabi_dsub+0x542>
 80022a0:	4c59      	ldr	r4, [pc, #356]	; (8002408 <__aeabi_dsub+0x358>)
 80022a2:	42a2      	cmp	r2, r4
 80022a4:	d100      	bne.n	80022a8 <__aeabi_dsub+0x1f8>
 80022a6:	e087      	b.n	80023b8 <__aeabi_dsub+0x308>
 80022a8:	0002      	movs	r2, r0
 80022aa:	e736      	b.n	800211a <__aeabi_dsub+0x6a>
 80022ac:	2201      	movs	r2, #1
 80022ae:	4056      	eors	r6, r2
 80022b0:	46b3      	mov	fp, r6
 80022b2:	42b5      	cmp	r5, r6
 80022b4:	d000      	beq.n	80022b8 <__aeabi_dsub+0x208>
 80022b6:	e721      	b.n	80020fc <__aeabi_dsub+0x4c>
 80022b8:	4a55      	ldr	r2, [pc, #340]	; (8002410 <__aeabi_dsub+0x360>)
 80022ba:	4442      	add	r2, r8
 80022bc:	2a00      	cmp	r2, #0
 80022be:	d100      	bne.n	80022c2 <__aeabi_dsub+0x212>
 80022c0:	e0b5      	b.n	800242e <__aeabi_dsub+0x37e>
 80022c2:	4642      	mov	r2, r8
 80022c4:	4644      	mov	r4, r8
 80022c6:	1a82      	subs	r2, r0, r2
 80022c8:	2c00      	cmp	r4, #0
 80022ca:	d100      	bne.n	80022ce <__aeabi_dsub+0x21e>
 80022cc:	e138      	b.n	8002540 <__aeabi_dsub+0x490>
 80022ce:	4e4e      	ldr	r6, [pc, #312]	; (8002408 <__aeabi_dsub+0x358>)
 80022d0:	42b0      	cmp	r0, r6
 80022d2:	d100      	bne.n	80022d6 <__aeabi_dsub+0x226>
 80022d4:	e1de      	b.n	8002694 <__aeabi_dsub+0x5e4>
 80022d6:	2680      	movs	r6, #128	; 0x80
 80022d8:	4664      	mov	r4, ip
 80022da:	0436      	lsls	r6, r6, #16
 80022dc:	4334      	orrs	r4, r6
 80022de:	46a4      	mov	ip, r4
 80022e0:	2a38      	cmp	r2, #56	; 0x38
 80022e2:	dd00      	ble.n	80022e6 <__aeabi_dsub+0x236>
 80022e4:	e196      	b.n	8002614 <__aeabi_dsub+0x564>
 80022e6:	2a1f      	cmp	r2, #31
 80022e8:	dd00      	ble.n	80022ec <__aeabi_dsub+0x23c>
 80022ea:	e224      	b.n	8002736 <__aeabi_dsub+0x686>
 80022ec:	2620      	movs	r6, #32
 80022ee:	1ab4      	subs	r4, r6, r2
 80022f0:	46a2      	mov	sl, r4
 80022f2:	4664      	mov	r4, ip
 80022f4:	4656      	mov	r6, sl
 80022f6:	40b4      	lsls	r4, r6
 80022f8:	46a1      	mov	r9, r4
 80022fa:	001c      	movs	r4, r3
 80022fc:	464e      	mov	r6, r9
 80022fe:	40d4      	lsrs	r4, r2
 8002300:	4326      	orrs	r6, r4
 8002302:	0034      	movs	r4, r6
 8002304:	4656      	mov	r6, sl
 8002306:	40b3      	lsls	r3, r6
 8002308:	1e5e      	subs	r6, r3, #1
 800230a:	41b3      	sbcs	r3, r6
 800230c:	431c      	orrs	r4, r3
 800230e:	4663      	mov	r3, ip
 8002310:	40d3      	lsrs	r3, r2
 8002312:	18c9      	adds	r1, r1, r3
 8002314:	19e4      	adds	r4, r4, r7
 8002316:	42bc      	cmp	r4, r7
 8002318:	41bf      	sbcs	r7, r7
 800231a:	427f      	negs	r7, r7
 800231c:	46b9      	mov	r9, r7
 800231e:	4680      	mov	r8, r0
 8002320:	4489      	add	r9, r1
 8002322:	e0d8      	b.n	80024d6 <__aeabi_dsub+0x426>
 8002324:	4640      	mov	r0, r8
 8002326:	4c3b      	ldr	r4, [pc, #236]	; (8002414 <__aeabi_dsub+0x364>)
 8002328:	3001      	adds	r0, #1
 800232a:	4220      	tst	r0, r4
 800232c:	d000      	beq.n	8002330 <__aeabi_dsub+0x280>
 800232e:	e0b4      	b.n	800249a <__aeabi_dsub+0x3ea>
 8002330:	4640      	mov	r0, r8
 8002332:	2800      	cmp	r0, #0
 8002334:	d000      	beq.n	8002338 <__aeabi_dsub+0x288>
 8002336:	e144      	b.n	80025c2 <__aeabi_dsub+0x512>
 8002338:	4660      	mov	r0, ip
 800233a:	4318      	orrs	r0, r3
 800233c:	d100      	bne.n	8002340 <__aeabi_dsub+0x290>
 800233e:	e190      	b.n	8002662 <__aeabi_dsub+0x5b2>
 8002340:	0008      	movs	r0, r1
 8002342:	4338      	orrs	r0, r7
 8002344:	d000      	beq.n	8002348 <__aeabi_dsub+0x298>
 8002346:	e1aa      	b.n	800269e <__aeabi_dsub+0x5ee>
 8002348:	4661      	mov	r1, ip
 800234a:	08db      	lsrs	r3, r3, #3
 800234c:	0749      	lsls	r1, r1, #29
 800234e:	430b      	orrs	r3, r1
 8002350:	4661      	mov	r1, ip
 8002352:	08cc      	lsrs	r4, r1, #3
 8002354:	e027      	b.n	80023a6 <__aeabi_dsub+0x2f6>
 8002356:	0008      	movs	r0, r1
 8002358:	4338      	orrs	r0, r7
 800235a:	d061      	beq.n	8002420 <__aeabi_dsub+0x370>
 800235c:	1e50      	subs	r0, r2, #1
 800235e:	2a01      	cmp	r2, #1
 8002360:	d100      	bne.n	8002364 <__aeabi_dsub+0x2b4>
 8002362:	e139      	b.n	80025d8 <__aeabi_dsub+0x528>
 8002364:	42a2      	cmp	r2, r4
 8002366:	d027      	beq.n	80023b8 <__aeabi_dsub+0x308>
 8002368:	0002      	movs	r2, r0
 800236a:	e75d      	b.n	8002228 <__aeabi_dsub+0x178>
 800236c:	0002      	movs	r2, r0
 800236e:	391f      	subs	r1, #31
 8002370:	40ca      	lsrs	r2, r1
 8002372:	0011      	movs	r1, r2
 8002374:	2b20      	cmp	r3, #32
 8002376:	d003      	beq.n	8002380 <__aeabi_dsub+0x2d0>
 8002378:	2240      	movs	r2, #64	; 0x40
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	4098      	lsls	r0, r3
 800237e:	4304      	orrs	r4, r0
 8002380:	1e63      	subs	r3, r4, #1
 8002382:	419c      	sbcs	r4, r3
 8002384:	2300      	movs	r3, #0
 8002386:	4699      	mov	r9, r3
 8002388:	4698      	mov	r8, r3
 800238a:	430c      	orrs	r4, r1
 800238c:	0763      	lsls	r3, r4, #29
 800238e:	d000      	beq.n	8002392 <__aeabi_dsub+0x2e2>
 8002390:	e712      	b.n	80021b8 <__aeabi_dsub+0x108>
 8002392:	464b      	mov	r3, r9
 8002394:	464a      	mov	r2, r9
 8002396:	08e4      	lsrs	r4, r4, #3
 8002398:	075b      	lsls	r3, r3, #29
 800239a:	4323      	orrs	r3, r4
 800239c:	08d4      	lsrs	r4, r2, #3
 800239e:	4642      	mov	r2, r8
 80023a0:	4919      	ldr	r1, [pc, #100]	; (8002408 <__aeabi_dsub+0x358>)
 80023a2:	428a      	cmp	r2, r1
 80023a4:	d00e      	beq.n	80023c4 <__aeabi_dsub+0x314>
 80023a6:	0324      	lsls	r4, r4, #12
 80023a8:	0552      	lsls	r2, r2, #21
 80023aa:	0b24      	lsrs	r4, r4, #12
 80023ac:	0d52      	lsrs	r2, r2, #21
 80023ae:	e722      	b.n	80021f6 <__aeabi_dsub+0x146>
 80023b0:	000a      	movs	r2, r1
 80023b2:	2400      	movs	r4, #0
 80023b4:	2300      	movs	r3, #0
 80023b6:	e71e      	b.n	80021f6 <__aeabi_dsub+0x146>
 80023b8:	08db      	lsrs	r3, r3, #3
 80023ba:	4662      	mov	r2, ip
 80023bc:	0752      	lsls	r2, r2, #29
 80023be:	4313      	orrs	r3, r2
 80023c0:	4662      	mov	r2, ip
 80023c2:	08d4      	lsrs	r4, r2, #3
 80023c4:	001a      	movs	r2, r3
 80023c6:	4322      	orrs	r2, r4
 80023c8:	d100      	bne.n	80023cc <__aeabi_dsub+0x31c>
 80023ca:	e1fc      	b.n	80027c6 <__aeabi_dsub+0x716>
 80023cc:	2280      	movs	r2, #128	; 0x80
 80023ce:	0312      	lsls	r2, r2, #12
 80023d0:	4314      	orrs	r4, r2
 80023d2:	0324      	lsls	r4, r4, #12
 80023d4:	4a0c      	ldr	r2, [pc, #48]	; (8002408 <__aeabi_dsub+0x358>)
 80023d6:	0b24      	lsrs	r4, r4, #12
 80023d8:	e70d      	b.n	80021f6 <__aeabi_dsub+0x146>
 80023da:	0020      	movs	r0, r4
 80023dc:	f000 faec 	bl	80029b8 <__clzsi2>
 80023e0:	0001      	movs	r1, r0
 80023e2:	3118      	adds	r1, #24
 80023e4:	291f      	cmp	r1, #31
 80023e6:	dc00      	bgt.n	80023ea <__aeabi_dsub+0x33a>
 80023e8:	e6c4      	b.n	8002174 <__aeabi_dsub+0xc4>
 80023ea:	3808      	subs	r0, #8
 80023ec:	4084      	lsls	r4, r0
 80023ee:	4643      	mov	r3, r8
 80023f0:	0020      	movs	r0, r4
 80023f2:	2400      	movs	r4, #0
 80023f4:	4588      	cmp	r8, r1
 80023f6:	dc00      	bgt.n	80023fa <__aeabi_dsub+0x34a>
 80023f8:	e6c8      	b.n	800218c <__aeabi_dsub+0xdc>
 80023fa:	4a04      	ldr	r2, [pc, #16]	; (800240c <__aeabi_dsub+0x35c>)
 80023fc:	1a5b      	subs	r3, r3, r1
 80023fe:	4010      	ands	r0, r2
 8002400:	4698      	mov	r8, r3
 8002402:	4681      	mov	r9, r0
 8002404:	e6d6      	b.n	80021b4 <__aeabi_dsub+0x104>
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	000007ff 	.word	0x000007ff
 800240c:	ff7fffff 	.word	0xff7fffff
 8002410:	fffff801 	.word	0xfffff801
 8002414:	000007fe 	.word	0x000007fe
 8002418:	430f      	orrs	r7, r1
 800241a:	1e7a      	subs	r2, r7, #1
 800241c:	4197      	sbcs	r7, r2
 800241e:	e691      	b.n	8002144 <__aeabi_dsub+0x94>
 8002420:	4661      	mov	r1, ip
 8002422:	08db      	lsrs	r3, r3, #3
 8002424:	0749      	lsls	r1, r1, #29
 8002426:	430b      	orrs	r3, r1
 8002428:	4661      	mov	r1, ip
 800242a:	08cc      	lsrs	r4, r1, #3
 800242c:	e7b8      	b.n	80023a0 <__aeabi_dsub+0x2f0>
 800242e:	4640      	mov	r0, r8
 8002430:	4cd3      	ldr	r4, [pc, #844]	; (8002780 <__aeabi_dsub+0x6d0>)
 8002432:	3001      	adds	r0, #1
 8002434:	4220      	tst	r0, r4
 8002436:	d000      	beq.n	800243a <__aeabi_dsub+0x38a>
 8002438:	e0a2      	b.n	8002580 <__aeabi_dsub+0x4d0>
 800243a:	4640      	mov	r0, r8
 800243c:	2800      	cmp	r0, #0
 800243e:	d000      	beq.n	8002442 <__aeabi_dsub+0x392>
 8002440:	e101      	b.n	8002646 <__aeabi_dsub+0x596>
 8002442:	4660      	mov	r0, ip
 8002444:	4318      	orrs	r0, r3
 8002446:	d100      	bne.n	800244a <__aeabi_dsub+0x39a>
 8002448:	e15e      	b.n	8002708 <__aeabi_dsub+0x658>
 800244a:	0008      	movs	r0, r1
 800244c:	4338      	orrs	r0, r7
 800244e:	d000      	beq.n	8002452 <__aeabi_dsub+0x3a2>
 8002450:	e15f      	b.n	8002712 <__aeabi_dsub+0x662>
 8002452:	4661      	mov	r1, ip
 8002454:	08db      	lsrs	r3, r3, #3
 8002456:	0749      	lsls	r1, r1, #29
 8002458:	430b      	orrs	r3, r1
 800245a:	4661      	mov	r1, ip
 800245c:	08cc      	lsrs	r4, r1, #3
 800245e:	e7a2      	b.n	80023a6 <__aeabi_dsub+0x2f6>
 8002460:	4dc8      	ldr	r5, [pc, #800]	; (8002784 <__aeabi_dsub+0x6d4>)
 8002462:	42a8      	cmp	r0, r5
 8002464:	d100      	bne.n	8002468 <__aeabi_dsub+0x3b8>
 8002466:	e0cf      	b.n	8002608 <__aeabi_dsub+0x558>
 8002468:	2580      	movs	r5, #128	; 0x80
 800246a:	4664      	mov	r4, ip
 800246c:	042d      	lsls	r5, r5, #16
 800246e:	432c      	orrs	r4, r5
 8002470:	46a4      	mov	ip, r4
 8002472:	2a38      	cmp	r2, #56	; 0x38
 8002474:	dc56      	bgt.n	8002524 <__aeabi_dsub+0x474>
 8002476:	2a1f      	cmp	r2, #31
 8002478:	dd00      	ble.n	800247c <__aeabi_dsub+0x3cc>
 800247a:	e0d1      	b.n	8002620 <__aeabi_dsub+0x570>
 800247c:	2520      	movs	r5, #32
 800247e:	001e      	movs	r6, r3
 8002480:	1aad      	subs	r5, r5, r2
 8002482:	4664      	mov	r4, ip
 8002484:	40ab      	lsls	r3, r5
 8002486:	40ac      	lsls	r4, r5
 8002488:	40d6      	lsrs	r6, r2
 800248a:	1e5d      	subs	r5, r3, #1
 800248c:	41ab      	sbcs	r3, r5
 800248e:	4334      	orrs	r4, r6
 8002490:	4323      	orrs	r3, r4
 8002492:	4664      	mov	r4, ip
 8002494:	40d4      	lsrs	r4, r2
 8002496:	1b09      	subs	r1, r1, r4
 8002498:	e049      	b.n	800252e <__aeabi_dsub+0x47e>
 800249a:	4660      	mov	r0, ip
 800249c:	1bdc      	subs	r4, r3, r7
 800249e:	1a46      	subs	r6, r0, r1
 80024a0:	42a3      	cmp	r3, r4
 80024a2:	4180      	sbcs	r0, r0
 80024a4:	4240      	negs	r0, r0
 80024a6:	4681      	mov	r9, r0
 80024a8:	0030      	movs	r0, r6
 80024aa:	464e      	mov	r6, r9
 80024ac:	1b80      	subs	r0, r0, r6
 80024ae:	4681      	mov	r9, r0
 80024b0:	0200      	lsls	r0, r0, #8
 80024b2:	d476      	bmi.n	80025a2 <__aeabi_dsub+0x4f2>
 80024b4:	464b      	mov	r3, r9
 80024b6:	4323      	orrs	r3, r4
 80024b8:	d000      	beq.n	80024bc <__aeabi_dsub+0x40c>
 80024ba:	e652      	b.n	8002162 <__aeabi_dsub+0xb2>
 80024bc:	2400      	movs	r4, #0
 80024be:	2500      	movs	r5, #0
 80024c0:	e771      	b.n	80023a6 <__aeabi_dsub+0x2f6>
 80024c2:	4339      	orrs	r1, r7
 80024c4:	000c      	movs	r4, r1
 80024c6:	1e62      	subs	r2, r4, #1
 80024c8:	4194      	sbcs	r4, r2
 80024ca:	18e4      	adds	r4, r4, r3
 80024cc:	429c      	cmp	r4, r3
 80024ce:	419b      	sbcs	r3, r3
 80024d0:	425b      	negs	r3, r3
 80024d2:	4463      	add	r3, ip
 80024d4:	4699      	mov	r9, r3
 80024d6:	464b      	mov	r3, r9
 80024d8:	021b      	lsls	r3, r3, #8
 80024da:	d400      	bmi.n	80024de <__aeabi_dsub+0x42e>
 80024dc:	e756      	b.n	800238c <__aeabi_dsub+0x2dc>
 80024de:	2301      	movs	r3, #1
 80024e0:	469c      	mov	ip, r3
 80024e2:	4ba8      	ldr	r3, [pc, #672]	; (8002784 <__aeabi_dsub+0x6d4>)
 80024e4:	44e0      	add	r8, ip
 80024e6:	4598      	cmp	r8, r3
 80024e8:	d038      	beq.n	800255c <__aeabi_dsub+0x4ac>
 80024ea:	464b      	mov	r3, r9
 80024ec:	48a6      	ldr	r0, [pc, #664]	; (8002788 <__aeabi_dsub+0x6d8>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	4003      	ands	r3, r0
 80024f2:	0018      	movs	r0, r3
 80024f4:	0863      	lsrs	r3, r4, #1
 80024f6:	4014      	ands	r4, r2
 80024f8:	431c      	orrs	r4, r3
 80024fa:	07c3      	lsls	r3, r0, #31
 80024fc:	431c      	orrs	r4, r3
 80024fe:	0843      	lsrs	r3, r0, #1
 8002500:	4699      	mov	r9, r3
 8002502:	e657      	b.n	80021b4 <__aeabi_dsub+0x104>
 8002504:	0010      	movs	r0, r2
 8002506:	000e      	movs	r6, r1
 8002508:	3820      	subs	r0, #32
 800250a:	40c6      	lsrs	r6, r0
 800250c:	2a20      	cmp	r2, #32
 800250e:	d004      	beq.n	800251a <__aeabi_dsub+0x46a>
 8002510:	2040      	movs	r0, #64	; 0x40
 8002512:	1a82      	subs	r2, r0, r2
 8002514:	4091      	lsls	r1, r2
 8002516:	430f      	orrs	r7, r1
 8002518:	46b9      	mov	r9, r7
 800251a:	464f      	mov	r7, r9
 800251c:	1e7a      	subs	r2, r7, #1
 800251e:	4197      	sbcs	r7, r2
 8002520:	4337      	orrs	r7, r6
 8002522:	e60f      	b.n	8002144 <__aeabi_dsub+0x94>
 8002524:	4662      	mov	r2, ip
 8002526:	431a      	orrs	r2, r3
 8002528:	0013      	movs	r3, r2
 800252a:	1e5a      	subs	r2, r3, #1
 800252c:	4193      	sbcs	r3, r2
 800252e:	1afc      	subs	r4, r7, r3
 8002530:	42a7      	cmp	r7, r4
 8002532:	41bf      	sbcs	r7, r7
 8002534:	427f      	negs	r7, r7
 8002536:	1bcb      	subs	r3, r1, r7
 8002538:	4699      	mov	r9, r3
 800253a:	465d      	mov	r5, fp
 800253c:	4680      	mov	r8, r0
 800253e:	e608      	b.n	8002152 <__aeabi_dsub+0xa2>
 8002540:	4666      	mov	r6, ip
 8002542:	431e      	orrs	r6, r3
 8002544:	d100      	bne.n	8002548 <__aeabi_dsub+0x498>
 8002546:	e0be      	b.n	80026c6 <__aeabi_dsub+0x616>
 8002548:	1e56      	subs	r6, r2, #1
 800254a:	2a01      	cmp	r2, #1
 800254c:	d100      	bne.n	8002550 <__aeabi_dsub+0x4a0>
 800254e:	e109      	b.n	8002764 <__aeabi_dsub+0x6b4>
 8002550:	4c8c      	ldr	r4, [pc, #560]	; (8002784 <__aeabi_dsub+0x6d4>)
 8002552:	42a2      	cmp	r2, r4
 8002554:	d100      	bne.n	8002558 <__aeabi_dsub+0x4a8>
 8002556:	e119      	b.n	800278c <__aeabi_dsub+0x6dc>
 8002558:	0032      	movs	r2, r6
 800255a:	e6c1      	b.n	80022e0 <__aeabi_dsub+0x230>
 800255c:	4642      	mov	r2, r8
 800255e:	2400      	movs	r4, #0
 8002560:	2300      	movs	r3, #0
 8002562:	e648      	b.n	80021f6 <__aeabi_dsub+0x146>
 8002564:	2020      	movs	r0, #32
 8002566:	000c      	movs	r4, r1
 8002568:	1a80      	subs	r0, r0, r2
 800256a:	003e      	movs	r6, r7
 800256c:	4087      	lsls	r7, r0
 800256e:	4084      	lsls	r4, r0
 8002570:	40d6      	lsrs	r6, r2
 8002572:	1e78      	subs	r0, r7, #1
 8002574:	4187      	sbcs	r7, r0
 8002576:	40d1      	lsrs	r1, r2
 8002578:	4334      	orrs	r4, r6
 800257a:	433c      	orrs	r4, r7
 800257c:	448c      	add	ip, r1
 800257e:	e7a4      	b.n	80024ca <__aeabi_dsub+0x41a>
 8002580:	4a80      	ldr	r2, [pc, #512]	; (8002784 <__aeabi_dsub+0x6d4>)
 8002582:	4290      	cmp	r0, r2
 8002584:	d100      	bne.n	8002588 <__aeabi_dsub+0x4d8>
 8002586:	e0e9      	b.n	800275c <__aeabi_dsub+0x6ac>
 8002588:	19df      	adds	r7, r3, r7
 800258a:	429f      	cmp	r7, r3
 800258c:	419b      	sbcs	r3, r3
 800258e:	4461      	add	r1, ip
 8002590:	425b      	negs	r3, r3
 8002592:	18c9      	adds	r1, r1, r3
 8002594:	07cc      	lsls	r4, r1, #31
 8002596:	087f      	lsrs	r7, r7, #1
 8002598:	084b      	lsrs	r3, r1, #1
 800259a:	4699      	mov	r9, r3
 800259c:	4680      	mov	r8, r0
 800259e:	433c      	orrs	r4, r7
 80025a0:	e6f4      	b.n	800238c <__aeabi_dsub+0x2dc>
 80025a2:	1afc      	subs	r4, r7, r3
 80025a4:	42a7      	cmp	r7, r4
 80025a6:	41bf      	sbcs	r7, r7
 80025a8:	4663      	mov	r3, ip
 80025aa:	427f      	negs	r7, r7
 80025ac:	1ac9      	subs	r1, r1, r3
 80025ae:	1bcb      	subs	r3, r1, r7
 80025b0:	4699      	mov	r9, r3
 80025b2:	465d      	mov	r5, fp
 80025b4:	e5d5      	b.n	8002162 <__aeabi_dsub+0xb2>
 80025b6:	08ff      	lsrs	r7, r7, #3
 80025b8:	074b      	lsls	r3, r1, #29
 80025ba:	465d      	mov	r5, fp
 80025bc:	433b      	orrs	r3, r7
 80025be:	08cc      	lsrs	r4, r1, #3
 80025c0:	e6ee      	b.n	80023a0 <__aeabi_dsub+0x2f0>
 80025c2:	4662      	mov	r2, ip
 80025c4:	431a      	orrs	r2, r3
 80025c6:	d000      	beq.n	80025ca <__aeabi_dsub+0x51a>
 80025c8:	e082      	b.n	80026d0 <__aeabi_dsub+0x620>
 80025ca:	000b      	movs	r3, r1
 80025cc:	433b      	orrs	r3, r7
 80025ce:	d11b      	bne.n	8002608 <__aeabi_dsub+0x558>
 80025d0:	2480      	movs	r4, #128	; 0x80
 80025d2:	2500      	movs	r5, #0
 80025d4:	0324      	lsls	r4, r4, #12
 80025d6:	e6f9      	b.n	80023cc <__aeabi_dsub+0x31c>
 80025d8:	19dc      	adds	r4, r3, r7
 80025da:	429c      	cmp	r4, r3
 80025dc:	419b      	sbcs	r3, r3
 80025de:	4461      	add	r1, ip
 80025e0:	4689      	mov	r9, r1
 80025e2:	425b      	negs	r3, r3
 80025e4:	4499      	add	r9, r3
 80025e6:	464b      	mov	r3, r9
 80025e8:	021b      	lsls	r3, r3, #8
 80025ea:	d444      	bmi.n	8002676 <__aeabi_dsub+0x5c6>
 80025ec:	2301      	movs	r3, #1
 80025ee:	4698      	mov	r8, r3
 80025f0:	e6cc      	b.n	800238c <__aeabi_dsub+0x2dc>
 80025f2:	1bdc      	subs	r4, r3, r7
 80025f4:	4662      	mov	r2, ip
 80025f6:	42a3      	cmp	r3, r4
 80025f8:	419b      	sbcs	r3, r3
 80025fa:	1a51      	subs	r1, r2, r1
 80025fc:	425b      	negs	r3, r3
 80025fe:	1acb      	subs	r3, r1, r3
 8002600:	4699      	mov	r9, r3
 8002602:	2301      	movs	r3, #1
 8002604:	4698      	mov	r8, r3
 8002606:	e5a4      	b.n	8002152 <__aeabi_dsub+0xa2>
 8002608:	08ff      	lsrs	r7, r7, #3
 800260a:	074b      	lsls	r3, r1, #29
 800260c:	465d      	mov	r5, fp
 800260e:	433b      	orrs	r3, r7
 8002610:	08cc      	lsrs	r4, r1, #3
 8002612:	e6d7      	b.n	80023c4 <__aeabi_dsub+0x314>
 8002614:	4662      	mov	r2, ip
 8002616:	431a      	orrs	r2, r3
 8002618:	0014      	movs	r4, r2
 800261a:	1e63      	subs	r3, r4, #1
 800261c:	419c      	sbcs	r4, r3
 800261e:	e679      	b.n	8002314 <__aeabi_dsub+0x264>
 8002620:	0015      	movs	r5, r2
 8002622:	4664      	mov	r4, ip
 8002624:	3d20      	subs	r5, #32
 8002626:	40ec      	lsrs	r4, r5
 8002628:	46a0      	mov	r8, r4
 800262a:	2a20      	cmp	r2, #32
 800262c:	d005      	beq.n	800263a <__aeabi_dsub+0x58a>
 800262e:	2540      	movs	r5, #64	; 0x40
 8002630:	4664      	mov	r4, ip
 8002632:	1aaa      	subs	r2, r5, r2
 8002634:	4094      	lsls	r4, r2
 8002636:	4323      	orrs	r3, r4
 8002638:	469a      	mov	sl, r3
 800263a:	4654      	mov	r4, sl
 800263c:	1e63      	subs	r3, r4, #1
 800263e:	419c      	sbcs	r4, r3
 8002640:	4643      	mov	r3, r8
 8002642:	4323      	orrs	r3, r4
 8002644:	e773      	b.n	800252e <__aeabi_dsub+0x47e>
 8002646:	4662      	mov	r2, ip
 8002648:	431a      	orrs	r2, r3
 800264a:	d023      	beq.n	8002694 <__aeabi_dsub+0x5e4>
 800264c:	000a      	movs	r2, r1
 800264e:	433a      	orrs	r2, r7
 8002650:	d000      	beq.n	8002654 <__aeabi_dsub+0x5a4>
 8002652:	e0a0      	b.n	8002796 <__aeabi_dsub+0x6e6>
 8002654:	4662      	mov	r2, ip
 8002656:	08db      	lsrs	r3, r3, #3
 8002658:	0752      	lsls	r2, r2, #29
 800265a:	4313      	orrs	r3, r2
 800265c:	4662      	mov	r2, ip
 800265e:	08d4      	lsrs	r4, r2, #3
 8002660:	e6b0      	b.n	80023c4 <__aeabi_dsub+0x314>
 8002662:	000b      	movs	r3, r1
 8002664:	433b      	orrs	r3, r7
 8002666:	d100      	bne.n	800266a <__aeabi_dsub+0x5ba>
 8002668:	e728      	b.n	80024bc <__aeabi_dsub+0x40c>
 800266a:	08ff      	lsrs	r7, r7, #3
 800266c:	074b      	lsls	r3, r1, #29
 800266e:	465d      	mov	r5, fp
 8002670:	433b      	orrs	r3, r7
 8002672:	08cc      	lsrs	r4, r1, #3
 8002674:	e697      	b.n	80023a6 <__aeabi_dsub+0x2f6>
 8002676:	2302      	movs	r3, #2
 8002678:	4698      	mov	r8, r3
 800267a:	e736      	b.n	80024ea <__aeabi_dsub+0x43a>
 800267c:	1afc      	subs	r4, r7, r3
 800267e:	42a7      	cmp	r7, r4
 8002680:	41bf      	sbcs	r7, r7
 8002682:	4663      	mov	r3, ip
 8002684:	427f      	negs	r7, r7
 8002686:	1ac9      	subs	r1, r1, r3
 8002688:	1bcb      	subs	r3, r1, r7
 800268a:	4699      	mov	r9, r3
 800268c:	2301      	movs	r3, #1
 800268e:	465d      	mov	r5, fp
 8002690:	4698      	mov	r8, r3
 8002692:	e55e      	b.n	8002152 <__aeabi_dsub+0xa2>
 8002694:	074b      	lsls	r3, r1, #29
 8002696:	08ff      	lsrs	r7, r7, #3
 8002698:	433b      	orrs	r3, r7
 800269a:	08cc      	lsrs	r4, r1, #3
 800269c:	e692      	b.n	80023c4 <__aeabi_dsub+0x314>
 800269e:	1bdc      	subs	r4, r3, r7
 80026a0:	4660      	mov	r0, ip
 80026a2:	42a3      	cmp	r3, r4
 80026a4:	41b6      	sbcs	r6, r6
 80026a6:	1a40      	subs	r0, r0, r1
 80026a8:	4276      	negs	r6, r6
 80026aa:	1b80      	subs	r0, r0, r6
 80026ac:	4681      	mov	r9, r0
 80026ae:	0200      	lsls	r0, r0, #8
 80026b0:	d560      	bpl.n	8002774 <__aeabi_dsub+0x6c4>
 80026b2:	1afc      	subs	r4, r7, r3
 80026b4:	42a7      	cmp	r7, r4
 80026b6:	41bf      	sbcs	r7, r7
 80026b8:	4663      	mov	r3, ip
 80026ba:	427f      	negs	r7, r7
 80026bc:	1ac9      	subs	r1, r1, r3
 80026be:	1bcb      	subs	r3, r1, r7
 80026c0:	4699      	mov	r9, r3
 80026c2:	465d      	mov	r5, fp
 80026c4:	e576      	b.n	80021b4 <__aeabi_dsub+0x104>
 80026c6:	08ff      	lsrs	r7, r7, #3
 80026c8:	074b      	lsls	r3, r1, #29
 80026ca:	433b      	orrs	r3, r7
 80026cc:	08cc      	lsrs	r4, r1, #3
 80026ce:	e667      	b.n	80023a0 <__aeabi_dsub+0x2f0>
 80026d0:	000a      	movs	r2, r1
 80026d2:	08db      	lsrs	r3, r3, #3
 80026d4:	433a      	orrs	r2, r7
 80026d6:	d100      	bne.n	80026da <__aeabi_dsub+0x62a>
 80026d8:	e66f      	b.n	80023ba <__aeabi_dsub+0x30a>
 80026da:	4662      	mov	r2, ip
 80026dc:	0752      	lsls	r2, r2, #29
 80026de:	4313      	orrs	r3, r2
 80026e0:	4662      	mov	r2, ip
 80026e2:	08d4      	lsrs	r4, r2, #3
 80026e4:	2280      	movs	r2, #128	; 0x80
 80026e6:	0312      	lsls	r2, r2, #12
 80026e8:	4214      	tst	r4, r2
 80026ea:	d007      	beq.n	80026fc <__aeabi_dsub+0x64c>
 80026ec:	08c8      	lsrs	r0, r1, #3
 80026ee:	4210      	tst	r0, r2
 80026f0:	d104      	bne.n	80026fc <__aeabi_dsub+0x64c>
 80026f2:	465d      	mov	r5, fp
 80026f4:	0004      	movs	r4, r0
 80026f6:	08fb      	lsrs	r3, r7, #3
 80026f8:	0749      	lsls	r1, r1, #29
 80026fa:	430b      	orrs	r3, r1
 80026fc:	0f5a      	lsrs	r2, r3, #29
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	08db      	lsrs	r3, r3, #3
 8002702:	0752      	lsls	r2, r2, #29
 8002704:	4313      	orrs	r3, r2
 8002706:	e65d      	b.n	80023c4 <__aeabi_dsub+0x314>
 8002708:	074b      	lsls	r3, r1, #29
 800270a:	08ff      	lsrs	r7, r7, #3
 800270c:	433b      	orrs	r3, r7
 800270e:	08cc      	lsrs	r4, r1, #3
 8002710:	e649      	b.n	80023a6 <__aeabi_dsub+0x2f6>
 8002712:	19dc      	adds	r4, r3, r7
 8002714:	429c      	cmp	r4, r3
 8002716:	419b      	sbcs	r3, r3
 8002718:	4461      	add	r1, ip
 800271a:	4689      	mov	r9, r1
 800271c:	425b      	negs	r3, r3
 800271e:	4499      	add	r9, r3
 8002720:	464b      	mov	r3, r9
 8002722:	021b      	lsls	r3, r3, #8
 8002724:	d400      	bmi.n	8002728 <__aeabi_dsub+0x678>
 8002726:	e631      	b.n	800238c <__aeabi_dsub+0x2dc>
 8002728:	464a      	mov	r2, r9
 800272a:	4b17      	ldr	r3, [pc, #92]	; (8002788 <__aeabi_dsub+0x6d8>)
 800272c:	401a      	ands	r2, r3
 800272e:	2301      	movs	r3, #1
 8002730:	4691      	mov	r9, r2
 8002732:	4698      	mov	r8, r3
 8002734:	e62a      	b.n	800238c <__aeabi_dsub+0x2dc>
 8002736:	0016      	movs	r6, r2
 8002738:	4664      	mov	r4, ip
 800273a:	3e20      	subs	r6, #32
 800273c:	40f4      	lsrs	r4, r6
 800273e:	46a0      	mov	r8, r4
 8002740:	2a20      	cmp	r2, #32
 8002742:	d005      	beq.n	8002750 <__aeabi_dsub+0x6a0>
 8002744:	2640      	movs	r6, #64	; 0x40
 8002746:	4664      	mov	r4, ip
 8002748:	1ab2      	subs	r2, r6, r2
 800274a:	4094      	lsls	r4, r2
 800274c:	4323      	orrs	r3, r4
 800274e:	469a      	mov	sl, r3
 8002750:	4654      	mov	r4, sl
 8002752:	1e63      	subs	r3, r4, #1
 8002754:	419c      	sbcs	r4, r3
 8002756:	4643      	mov	r3, r8
 8002758:	431c      	orrs	r4, r3
 800275a:	e5db      	b.n	8002314 <__aeabi_dsub+0x264>
 800275c:	0002      	movs	r2, r0
 800275e:	2400      	movs	r4, #0
 8002760:	2300      	movs	r3, #0
 8002762:	e548      	b.n	80021f6 <__aeabi_dsub+0x146>
 8002764:	19dc      	adds	r4, r3, r7
 8002766:	42bc      	cmp	r4, r7
 8002768:	41bf      	sbcs	r7, r7
 800276a:	4461      	add	r1, ip
 800276c:	4689      	mov	r9, r1
 800276e:	427f      	negs	r7, r7
 8002770:	44b9      	add	r9, r7
 8002772:	e738      	b.n	80025e6 <__aeabi_dsub+0x536>
 8002774:	464b      	mov	r3, r9
 8002776:	4323      	orrs	r3, r4
 8002778:	d100      	bne.n	800277c <__aeabi_dsub+0x6cc>
 800277a:	e69f      	b.n	80024bc <__aeabi_dsub+0x40c>
 800277c:	e606      	b.n	800238c <__aeabi_dsub+0x2dc>
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	000007fe 	.word	0x000007fe
 8002784:	000007ff 	.word	0x000007ff
 8002788:	ff7fffff 	.word	0xff7fffff
 800278c:	08ff      	lsrs	r7, r7, #3
 800278e:	074b      	lsls	r3, r1, #29
 8002790:	433b      	orrs	r3, r7
 8002792:	08cc      	lsrs	r4, r1, #3
 8002794:	e616      	b.n	80023c4 <__aeabi_dsub+0x314>
 8002796:	4662      	mov	r2, ip
 8002798:	08db      	lsrs	r3, r3, #3
 800279a:	0752      	lsls	r2, r2, #29
 800279c:	4313      	orrs	r3, r2
 800279e:	4662      	mov	r2, ip
 80027a0:	08d4      	lsrs	r4, r2, #3
 80027a2:	2280      	movs	r2, #128	; 0x80
 80027a4:	0312      	lsls	r2, r2, #12
 80027a6:	4214      	tst	r4, r2
 80027a8:	d007      	beq.n	80027ba <__aeabi_dsub+0x70a>
 80027aa:	08c8      	lsrs	r0, r1, #3
 80027ac:	4210      	tst	r0, r2
 80027ae:	d104      	bne.n	80027ba <__aeabi_dsub+0x70a>
 80027b0:	465d      	mov	r5, fp
 80027b2:	0004      	movs	r4, r0
 80027b4:	08fb      	lsrs	r3, r7, #3
 80027b6:	0749      	lsls	r1, r1, #29
 80027b8:	430b      	orrs	r3, r1
 80027ba:	0f5a      	lsrs	r2, r3, #29
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	0752      	lsls	r2, r2, #29
 80027c0:	08db      	lsrs	r3, r3, #3
 80027c2:	4313      	orrs	r3, r2
 80027c4:	e5fe      	b.n	80023c4 <__aeabi_dsub+0x314>
 80027c6:	2300      	movs	r3, #0
 80027c8:	4a01      	ldr	r2, [pc, #4]	; (80027d0 <__aeabi_dsub+0x720>)
 80027ca:	001c      	movs	r4, r3
 80027cc:	e513      	b.n	80021f6 <__aeabi_dsub+0x146>
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	000007ff 	.word	0x000007ff

080027d4 <__aeabi_dcmpun>:
 80027d4:	b570      	push	{r4, r5, r6, lr}
 80027d6:	0005      	movs	r5, r0
 80027d8:	480c      	ldr	r0, [pc, #48]	; (800280c <__aeabi_dcmpun+0x38>)
 80027da:	031c      	lsls	r4, r3, #12
 80027dc:	0016      	movs	r6, r2
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	030a      	lsls	r2, r1, #12
 80027e2:	0049      	lsls	r1, r1, #1
 80027e4:	0b12      	lsrs	r2, r2, #12
 80027e6:	0d49      	lsrs	r1, r1, #21
 80027e8:	0b24      	lsrs	r4, r4, #12
 80027ea:	0d5b      	lsrs	r3, r3, #21
 80027ec:	4281      	cmp	r1, r0
 80027ee:	d008      	beq.n	8002802 <__aeabi_dcmpun+0x2e>
 80027f0:	4a06      	ldr	r2, [pc, #24]	; (800280c <__aeabi_dcmpun+0x38>)
 80027f2:	2000      	movs	r0, #0
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d103      	bne.n	8002800 <__aeabi_dcmpun+0x2c>
 80027f8:	0020      	movs	r0, r4
 80027fa:	4330      	orrs	r0, r6
 80027fc:	1e43      	subs	r3, r0, #1
 80027fe:	4198      	sbcs	r0, r3
 8002800:	bd70      	pop	{r4, r5, r6, pc}
 8002802:	2001      	movs	r0, #1
 8002804:	432a      	orrs	r2, r5
 8002806:	d1fb      	bne.n	8002800 <__aeabi_dcmpun+0x2c>
 8002808:	e7f2      	b.n	80027f0 <__aeabi_dcmpun+0x1c>
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	000007ff 	.word	0x000007ff

08002810 <__aeabi_d2iz>:
 8002810:	000a      	movs	r2, r1
 8002812:	b530      	push	{r4, r5, lr}
 8002814:	4c13      	ldr	r4, [pc, #76]	; (8002864 <__aeabi_d2iz+0x54>)
 8002816:	0053      	lsls	r3, r2, #1
 8002818:	0309      	lsls	r1, r1, #12
 800281a:	0005      	movs	r5, r0
 800281c:	0b09      	lsrs	r1, r1, #12
 800281e:	2000      	movs	r0, #0
 8002820:	0d5b      	lsrs	r3, r3, #21
 8002822:	0fd2      	lsrs	r2, r2, #31
 8002824:	42a3      	cmp	r3, r4
 8002826:	dd04      	ble.n	8002832 <__aeabi_d2iz+0x22>
 8002828:	480f      	ldr	r0, [pc, #60]	; (8002868 <__aeabi_d2iz+0x58>)
 800282a:	4283      	cmp	r3, r0
 800282c:	dd02      	ble.n	8002834 <__aeabi_d2iz+0x24>
 800282e:	4b0f      	ldr	r3, [pc, #60]	; (800286c <__aeabi_d2iz+0x5c>)
 8002830:	18d0      	adds	r0, r2, r3
 8002832:	bd30      	pop	{r4, r5, pc}
 8002834:	2080      	movs	r0, #128	; 0x80
 8002836:	0340      	lsls	r0, r0, #13
 8002838:	4301      	orrs	r1, r0
 800283a:	480d      	ldr	r0, [pc, #52]	; (8002870 <__aeabi_d2iz+0x60>)
 800283c:	1ac0      	subs	r0, r0, r3
 800283e:	281f      	cmp	r0, #31
 8002840:	dd08      	ble.n	8002854 <__aeabi_d2iz+0x44>
 8002842:	480c      	ldr	r0, [pc, #48]	; (8002874 <__aeabi_d2iz+0x64>)
 8002844:	1ac3      	subs	r3, r0, r3
 8002846:	40d9      	lsrs	r1, r3
 8002848:	000b      	movs	r3, r1
 800284a:	4258      	negs	r0, r3
 800284c:	2a00      	cmp	r2, #0
 800284e:	d1f0      	bne.n	8002832 <__aeabi_d2iz+0x22>
 8002850:	0018      	movs	r0, r3
 8002852:	e7ee      	b.n	8002832 <__aeabi_d2iz+0x22>
 8002854:	4c08      	ldr	r4, [pc, #32]	; (8002878 <__aeabi_d2iz+0x68>)
 8002856:	40c5      	lsrs	r5, r0
 8002858:	46a4      	mov	ip, r4
 800285a:	4463      	add	r3, ip
 800285c:	4099      	lsls	r1, r3
 800285e:	000b      	movs	r3, r1
 8002860:	432b      	orrs	r3, r5
 8002862:	e7f2      	b.n	800284a <__aeabi_d2iz+0x3a>
 8002864:	000003fe 	.word	0x000003fe
 8002868:	0000041d 	.word	0x0000041d
 800286c:	7fffffff 	.word	0x7fffffff
 8002870:	00000433 	.word	0x00000433
 8002874:	00000413 	.word	0x00000413
 8002878:	fffffbed 	.word	0xfffffbed

0800287c <__aeabi_i2d>:
 800287c:	b570      	push	{r4, r5, r6, lr}
 800287e:	2800      	cmp	r0, #0
 8002880:	d016      	beq.n	80028b0 <__aeabi_i2d+0x34>
 8002882:	17c3      	asrs	r3, r0, #31
 8002884:	18c5      	adds	r5, r0, r3
 8002886:	405d      	eors	r5, r3
 8002888:	0fc4      	lsrs	r4, r0, #31
 800288a:	0028      	movs	r0, r5
 800288c:	f000 f894 	bl	80029b8 <__clzsi2>
 8002890:	4a11      	ldr	r2, [pc, #68]	; (80028d8 <__aeabi_i2d+0x5c>)
 8002892:	1a12      	subs	r2, r2, r0
 8002894:	280a      	cmp	r0, #10
 8002896:	dc16      	bgt.n	80028c6 <__aeabi_i2d+0x4a>
 8002898:	0003      	movs	r3, r0
 800289a:	002e      	movs	r6, r5
 800289c:	3315      	adds	r3, #21
 800289e:	409e      	lsls	r6, r3
 80028a0:	230b      	movs	r3, #11
 80028a2:	1a18      	subs	r0, r3, r0
 80028a4:	40c5      	lsrs	r5, r0
 80028a6:	0552      	lsls	r2, r2, #21
 80028a8:	032d      	lsls	r5, r5, #12
 80028aa:	0b2d      	lsrs	r5, r5, #12
 80028ac:	0d53      	lsrs	r3, r2, #21
 80028ae:	e003      	b.n	80028b8 <__aeabi_i2d+0x3c>
 80028b0:	2400      	movs	r4, #0
 80028b2:	2300      	movs	r3, #0
 80028b4:	2500      	movs	r5, #0
 80028b6:	2600      	movs	r6, #0
 80028b8:	051b      	lsls	r3, r3, #20
 80028ba:	432b      	orrs	r3, r5
 80028bc:	07e4      	lsls	r4, r4, #31
 80028be:	4323      	orrs	r3, r4
 80028c0:	0030      	movs	r0, r6
 80028c2:	0019      	movs	r1, r3
 80028c4:	bd70      	pop	{r4, r5, r6, pc}
 80028c6:	380b      	subs	r0, #11
 80028c8:	4085      	lsls	r5, r0
 80028ca:	0552      	lsls	r2, r2, #21
 80028cc:	032d      	lsls	r5, r5, #12
 80028ce:	2600      	movs	r6, #0
 80028d0:	0b2d      	lsrs	r5, r5, #12
 80028d2:	0d53      	lsrs	r3, r2, #21
 80028d4:	e7f0      	b.n	80028b8 <__aeabi_i2d+0x3c>
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	0000041e 	.word	0x0000041e

080028dc <__aeabi_ui2d>:
 80028dc:	b510      	push	{r4, lr}
 80028de:	1e04      	subs	r4, r0, #0
 80028e0:	d010      	beq.n	8002904 <__aeabi_ui2d+0x28>
 80028e2:	f000 f869 	bl	80029b8 <__clzsi2>
 80028e6:	4b0f      	ldr	r3, [pc, #60]	; (8002924 <__aeabi_ui2d+0x48>)
 80028e8:	1a1b      	subs	r3, r3, r0
 80028ea:	280a      	cmp	r0, #10
 80028ec:	dc11      	bgt.n	8002912 <__aeabi_ui2d+0x36>
 80028ee:	220b      	movs	r2, #11
 80028f0:	0021      	movs	r1, r4
 80028f2:	1a12      	subs	r2, r2, r0
 80028f4:	40d1      	lsrs	r1, r2
 80028f6:	3015      	adds	r0, #21
 80028f8:	030a      	lsls	r2, r1, #12
 80028fa:	055b      	lsls	r3, r3, #21
 80028fc:	4084      	lsls	r4, r0
 80028fe:	0b12      	lsrs	r2, r2, #12
 8002900:	0d5b      	lsrs	r3, r3, #21
 8002902:	e001      	b.n	8002908 <__aeabi_ui2d+0x2c>
 8002904:	2300      	movs	r3, #0
 8002906:	2200      	movs	r2, #0
 8002908:	051b      	lsls	r3, r3, #20
 800290a:	4313      	orrs	r3, r2
 800290c:	0020      	movs	r0, r4
 800290e:	0019      	movs	r1, r3
 8002910:	bd10      	pop	{r4, pc}
 8002912:	0022      	movs	r2, r4
 8002914:	380b      	subs	r0, #11
 8002916:	4082      	lsls	r2, r0
 8002918:	055b      	lsls	r3, r3, #21
 800291a:	0312      	lsls	r2, r2, #12
 800291c:	2400      	movs	r4, #0
 800291e:	0b12      	lsrs	r2, r2, #12
 8002920:	0d5b      	lsrs	r3, r3, #21
 8002922:	e7f1      	b.n	8002908 <__aeabi_ui2d+0x2c>
 8002924:	0000041e 	.word	0x0000041e

08002928 <__aeabi_f2d>:
 8002928:	b570      	push	{r4, r5, r6, lr}
 800292a:	0043      	lsls	r3, r0, #1
 800292c:	0246      	lsls	r6, r0, #9
 800292e:	0fc4      	lsrs	r4, r0, #31
 8002930:	20fe      	movs	r0, #254	; 0xfe
 8002932:	0e1b      	lsrs	r3, r3, #24
 8002934:	1c59      	adds	r1, r3, #1
 8002936:	0a75      	lsrs	r5, r6, #9
 8002938:	4208      	tst	r0, r1
 800293a:	d00c      	beq.n	8002956 <__aeabi_f2d+0x2e>
 800293c:	22e0      	movs	r2, #224	; 0xe0
 800293e:	0092      	lsls	r2, r2, #2
 8002940:	4694      	mov	ip, r2
 8002942:	076d      	lsls	r5, r5, #29
 8002944:	0b36      	lsrs	r6, r6, #12
 8002946:	4463      	add	r3, ip
 8002948:	051b      	lsls	r3, r3, #20
 800294a:	4333      	orrs	r3, r6
 800294c:	07e4      	lsls	r4, r4, #31
 800294e:	4323      	orrs	r3, r4
 8002950:	0028      	movs	r0, r5
 8002952:	0019      	movs	r1, r3
 8002954:	bd70      	pop	{r4, r5, r6, pc}
 8002956:	2b00      	cmp	r3, #0
 8002958:	d114      	bne.n	8002984 <__aeabi_f2d+0x5c>
 800295a:	2d00      	cmp	r5, #0
 800295c:	d01b      	beq.n	8002996 <__aeabi_f2d+0x6e>
 800295e:	0028      	movs	r0, r5
 8002960:	f000 f82a 	bl	80029b8 <__clzsi2>
 8002964:	280a      	cmp	r0, #10
 8002966:	dc1c      	bgt.n	80029a2 <__aeabi_f2d+0x7a>
 8002968:	230b      	movs	r3, #11
 800296a:	002e      	movs	r6, r5
 800296c:	1a1b      	subs	r3, r3, r0
 800296e:	40de      	lsrs	r6, r3
 8002970:	0003      	movs	r3, r0
 8002972:	3315      	adds	r3, #21
 8002974:	409d      	lsls	r5, r3
 8002976:	4a0e      	ldr	r2, [pc, #56]	; (80029b0 <__aeabi_f2d+0x88>)
 8002978:	0336      	lsls	r6, r6, #12
 800297a:	1a12      	subs	r2, r2, r0
 800297c:	0552      	lsls	r2, r2, #21
 800297e:	0b36      	lsrs	r6, r6, #12
 8002980:	0d53      	lsrs	r3, r2, #21
 8002982:	e7e1      	b.n	8002948 <__aeabi_f2d+0x20>
 8002984:	2d00      	cmp	r5, #0
 8002986:	d009      	beq.n	800299c <__aeabi_f2d+0x74>
 8002988:	2280      	movs	r2, #128	; 0x80
 800298a:	0b36      	lsrs	r6, r6, #12
 800298c:	0312      	lsls	r2, r2, #12
 800298e:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <__aeabi_f2d+0x8c>)
 8002990:	076d      	lsls	r5, r5, #29
 8002992:	4316      	orrs	r6, r2
 8002994:	e7d8      	b.n	8002948 <__aeabi_f2d+0x20>
 8002996:	2300      	movs	r3, #0
 8002998:	2600      	movs	r6, #0
 800299a:	e7d5      	b.n	8002948 <__aeabi_f2d+0x20>
 800299c:	2600      	movs	r6, #0
 800299e:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <__aeabi_f2d+0x8c>)
 80029a0:	e7d2      	b.n	8002948 <__aeabi_f2d+0x20>
 80029a2:	0003      	movs	r3, r0
 80029a4:	3b0b      	subs	r3, #11
 80029a6:	409d      	lsls	r5, r3
 80029a8:	002e      	movs	r6, r5
 80029aa:	2500      	movs	r5, #0
 80029ac:	e7e3      	b.n	8002976 <__aeabi_f2d+0x4e>
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	00000389 	.word	0x00000389
 80029b4:	000007ff 	.word	0x000007ff

080029b8 <__clzsi2>:
 80029b8:	211c      	movs	r1, #28
 80029ba:	2301      	movs	r3, #1
 80029bc:	041b      	lsls	r3, r3, #16
 80029be:	4298      	cmp	r0, r3
 80029c0:	d301      	bcc.n	80029c6 <__clzsi2+0xe>
 80029c2:	0c00      	lsrs	r0, r0, #16
 80029c4:	3910      	subs	r1, #16
 80029c6:	0a1b      	lsrs	r3, r3, #8
 80029c8:	4298      	cmp	r0, r3
 80029ca:	d301      	bcc.n	80029d0 <__clzsi2+0x18>
 80029cc:	0a00      	lsrs	r0, r0, #8
 80029ce:	3908      	subs	r1, #8
 80029d0:	091b      	lsrs	r3, r3, #4
 80029d2:	4298      	cmp	r0, r3
 80029d4:	d301      	bcc.n	80029da <__clzsi2+0x22>
 80029d6:	0900      	lsrs	r0, r0, #4
 80029d8:	3904      	subs	r1, #4
 80029da:	a202      	add	r2, pc, #8	; (adr r2, 80029e4 <__clzsi2+0x2c>)
 80029dc:	5c10      	ldrb	r0, [r2, r0]
 80029de:	1840      	adds	r0, r0, r1
 80029e0:	4770      	bx	lr
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	02020304 	.word	0x02020304
 80029e8:	01010101 	.word	0x01010101
	...

080029f4 <st7565_write_buffer>:
#define CMD(c)        do { HAL_GPIO_WritePin( SPICD_GPIO_Port, ST7565_A0_PIN, 0 ); st7565_sendbyte( c ); } while (0);
#define DATA(d)       do { HAL_GPIO_WritePin( SPICD_GPIO_Port, ST7565_A0_PIN, 1 ); st7565_sendbyte( d ); } while (0);
#define DELAY(mS)     do { HAL_Delay( mS ); } while(0);

//Renders the buffer contents
void st7565_write_buffer(uint8_t *buffer) {
 80029f4:	b590      	push	{r4, r7, lr}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
	uint8_t c, p;
	for (p = 0; p < 8; p++) {
 80029fc:	230e      	movs	r3, #14
 80029fe:	18fb      	adds	r3, r7, r3
 8002a00:	2200      	movs	r2, #0
 8002a02:	701a      	strb	r2, [r3, #0]
 8002a04:	e060      	b.n	8002ac8 <st7565_write_buffer+0xd4>
		CMD(ST7565_CMD_SET_PAGE | pagemap[p]);
 8002a06:	4b35      	ldr	r3, [pc, #212]	; (8002adc <st7565_write_buffer+0xe8>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2180      	movs	r1, #128	; 0x80
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f003 fc12 	bl	8006236 <HAL_GPIO_WritePin>
 8002a12:	230e      	movs	r3, #14
 8002a14:	18fb      	adds	r3, r7, r3
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	4a31      	ldr	r2, [pc, #196]	; (8002ae0 <st7565_write_buffer+0xec>)
 8002a1a:	5cd3      	ldrb	r3, [r2, r3]
 8002a1c:	2250      	movs	r2, #80	; 0x50
 8002a1e:	4252      	negs	r2, r2
 8002a20:	4313      	orrs	r3, r2
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	0018      	movs	r0, r3
 8002a26:	f000 f85d 	bl	8002ae4 <st7565_sendbyte>
		CMD(ST7565_CMD_SET_COLUMN_LOWER | (0x0 & 0xf));
 8002a2a:	4b2c      	ldr	r3, [pc, #176]	; (8002adc <st7565_write_buffer+0xe8>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2180      	movs	r1, #128	; 0x80
 8002a30:	0018      	movs	r0, r3
 8002a32:	f003 fc00 	bl	8006236 <HAL_GPIO_WritePin>
 8002a36:	2000      	movs	r0, #0
 8002a38:	f000 f854 	bl	8002ae4 <st7565_sendbyte>
		CMD(ST7565_CMD_SET_COLUMN_UPPER | ((0x0 >> 4) & 0xf));
 8002a3c:	4b27      	ldr	r3, [pc, #156]	; (8002adc <st7565_write_buffer+0xe8>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2180      	movs	r1, #128	; 0x80
 8002a42:	0018      	movs	r0, r3
 8002a44:	f003 fbf7 	bl	8006236 <HAL_GPIO_WritePin>
 8002a48:	2010      	movs	r0, #16
 8002a4a:	f000 f84b 	bl	8002ae4 <st7565_sendbyte>
		CMD(ST7565_CMD_RMW);
 8002a4e:	4b23      	ldr	r3, [pc, #140]	; (8002adc <st7565_write_buffer+0xe8>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	2180      	movs	r1, #128	; 0x80
 8002a54:	0018      	movs	r0, r3
 8002a56:	f003 fbee 	bl	8006236 <HAL_GPIO_WritePin>
 8002a5a:	20e0      	movs	r0, #224	; 0xe0
 8002a5c:	f000 f842 	bl	8002ae4 <st7565_sendbyte>
		DATA(0xff);
 8002a60:	4b1e      	ldr	r3, [pc, #120]	; (8002adc <st7565_write_buffer+0xe8>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	2180      	movs	r1, #128	; 0x80
 8002a66:	0018      	movs	r0, r3
 8002a68:	f003 fbe5 	bl	8006236 <HAL_GPIO_WritePin>
 8002a6c:	20ff      	movs	r0, #255	; 0xff
 8002a6e:	f000 f839 	bl	8002ae4 <st7565_sendbyte>
		for (c = 0; c < 128; c++) {
 8002a72:	230f      	movs	r3, #15
 8002a74:	18fb      	adds	r3, r7, r3
 8002a76:	2200      	movs	r2, #0
 8002a78:	701a      	strb	r2, [r3, #0]
 8002a7a:	e019      	b.n	8002ab0 <st7565_write_buffer+0xbc>
			DATA(buffer[(128 * p) + c]);
 8002a7c:	4b17      	ldr	r3, [pc, #92]	; (8002adc <st7565_write_buffer+0xe8>)
 8002a7e:	2201      	movs	r2, #1
 8002a80:	2180      	movs	r1, #128	; 0x80
 8002a82:	0018      	movs	r0, r3
 8002a84:	f003 fbd7 	bl	8006236 <HAL_GPIO_WritePin>
 8002a88:	230e      	movs	r3, #14
 8002a8a:	18fb      	adds	r3, r7, r3
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	01da      	lsls	r2, r3, #7
 8002a90:	240f      	movs	r4, #15
 8002a92:	193b      	adds	r3, r7, r4
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	18d3      	adds	r3, r2, r3
 8002a98:	001a      	movs	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	189b      	adds	r3, r3, r2
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f000 f81f 	bl	8002ae4 <st7565_sendbyte>
		for (c = 0; c < 128; c++) {
 8002aa6:	193b      	adds	r3, r7, r4
 8002aa8:	781a      	ldrb	r2, [r3, #0]
 8002aaa:	193b      	adds	r3, r7, r4
 8002aac:	3201      	adds	r2, #1
 8002aae:	701a      	strb	r2, [r3, #0]
 8002ab0:	230f      	movs	r3, #15
 8002ab2:	18fb      	adds	r3, r7, r3
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	b25b      	sxtb	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	dadf      	bge.n	8002a7c <st7565_write_buffer+0x88>
	for (p = 0; p < 8; p++) {
 8002abc:	210e      	movs	r1, #14
 8002abe:	187b      	adds	r3, r7, r1
 8002ac0:	781a      	ldrb	r2, [r3, #0]
 8002ac2:	187b      	adds	r3, r7, r1
 8002ac4:	3201      	adds	r2, #1
 8002ac6:	701a      	strb	r2, [r3, #0]
 8002ac8:	230e      	movs	r3, #14
 8002aca:	18fb      	adds	r3, r7, r3
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b07      	cmp	r3, #7
 8002ad0:	d999      	bls.n	8002a06 <st7565_write_buffer+0x12>
		}
	}
}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	46c0      	nop			; (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b005      	add	sp, #20
 8002ada:	bd90      	pop	{r4, r7, pc}
 8002adc:	48000800 	.word	0x48000800
 8002ae0:	20000400 	.word	0x20000400

08002ae4 <st7565_sendbyte>:

// Simulates an SPI write using GPIO
// with byte, The byte to send
void st7565_sendbyte(uint8_t byte) {
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	0002      	movs	r2, r0
 8002aec:	1dfb      	adds	r3, r7, #7
 8002aee:	701a      	strb	r2, [r3, #0]

	HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
 8002af0:	1df9      	adds	r1, r7, #7
 8002af2:	4804      	ldr	r0, [pc, #16]	; (8002b04 <st7565_sendbyte+0x20>)
 8002af4:	2364      	movs	r3, #100	; 0x64
 8002af6:	2201      	movs	r2, #1
 8002af8:	f004 f952 	bl	8006da0 <HAL_SPI_Transmit>
}
 8002afc:	46c0      	nop			; (mov r8, r8)
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b002      	add	sp, #8
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20002a68 	.word	0x20002a68

08002b08 <st7565_init>:

//Initialises the ST7565 LCD display
void st7565_init(void) {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
	// Set clock pin to high
//	HAL_GPIO_WritePin(SPISCLK_GPIO_Port, ST7565_SCLK_PIN, 1);
	// Set data pin to output and high
//	HAL_GPIO_WritePin(SPISDAT_GPIO_Port, ST7565_SDAT_PIN, 1);
	// Configure backlight pin to output and set high (off)
	HAL_GPIO_WritePin(BL_GPIO_Port, ST7565_BL_PIN, 1);
 8002b0c:	2380      	movs	r3, #128	; 0x80
 8002b0e:	0059      	lsls	r1, r3, #1
 8002b10:	2390      	movs	r3, #144	; 0x90
 8002b12:	05db      	lsls	r3, r3, #23
 8002b14:	2201      	movs	r2, #1
 8002b16:	0018      	movs	r0, r3
 8002b18:	f003 fb8d 	bl	8006236 <HAL_GPIO_WritePin>

	// Configure A0 pin to output and set high
	HAL_GPIO_WritePin(SPICD_GPIO_Port, ST7565_A0_PIN, 1);
 8002b1c:	4b4e      	ldr	r3, [pc, #312]	; (8002c58 <st7565_init+0x150>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	2180      	movs	r1, #128	; 0x80
 8002b22:	0018      	movs	r0, r3
 8002b24:	f003 fb87 	bl	8006236 <HAL_GPIO_WritePin>

	// Configure Reset pin and set high
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 1);
 8002b28:	2380      	movs	r3, #128	; 0x80
 8002b2a:	0099      	lsls	r1, r3, #2
 8002b2c:	2390      	movs	r3, #144	; 0x90
 8002b2e:	05db      	lsls	r3, r3, #23
 8002b30:	2201      	movs	r2, #1
 8002b32:	0018      	movs	r0, r3
 8002b34:	f003 fb7f 	bl	8006236 <HAL_GPIO_WritePin>

	// Configure select pin and set high
	HAL_GPIO_WritePin(SPICS_GPIO_Port, ST7565_CS_PIN, 1);
 8002b38:	4b48      	ldr	r3, [pc, #288]	; (8002c5c <st7565_init+0x154>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	2140      	movs	r1, #64	; 0x40
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f003 fb79 	bl	8006236 <HAL_GPIO_WritePin>

	// Reset
	HAL_GPIO_WritePin(SPICS_GPIO_Port, ST7565_CS_PIN, 0);    // Set CS low
 8002b44:	4b45      	ldr	r3, [pc, #276]	; (8002c5c <st7565_init+0x154>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	2140      	movs	r1, #64	; 0x40
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f003 fb73 	bl	8006236 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 0);  // Set reset low
 8002b50:	2380      	movs	r3, #128	; 0x80
 8002b52:	0099      	lsls	r1, r3, #2
 8002b54:	2390      	movs	r3, #144	; 0x90
 8002b56:	05db      	lsls	r3, r3, #23
 8002b58:	2200      	movs	r2, #0
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f003 fb6b 	bl	8006236 <HAL_GPIO_WritePin>
	DELAY(500);                                              // Wait 500ms
 8002b60:	23fa      	movs	r3, #250	; 0xfa
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	0018      	movs	r0, r3
 8002b66:	f002 fc31 	bl	80053cc <HAL_Delay>
	HAL_GPIO_WritePin(SPIRST_GPIO_Port, ST7565_RST_PIN, 1);  // Set reset high
 8002b6a:	2380      	movs	r3, #128	; 0x80
 8002b6c:	0099      	lsls	r1, r3, #2
 8002b6e:	2390      	movs	r3, #144	; 0x90
 8002b70:	05db      	lsls	r3, r3, #23
 8002b72:	2201      	movs	r2, #1
 8002b74:	0018      	movs	r0, r3
 8002b76:	f003 fb5e 	bl	8006236 <HAL_GPIO_WritePin>

	// Configure Display
	CMD(ST7565_CMD_SET_BIAS_7);                      // LCD Bias Select
 8002b7a:	4b37      	ldr	r3, [pc, #220]	; (8002c58 <st7565_init+0x150>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2180      	movs	r1, #128	; 0x80
 8002b80:	0018      	movs	r0, r3
 8002b82:	f003 fb58 	bl	8006236 <HAL_GPIO_WritePin>
 8002b86:	20a3      	movs	r0, #163	; 0xa3
 8002b88:	f7ff ffac 	bl	8002ae4 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_ADC_NORMAL);                  // ADC Select
 8002b8c:	4b32      	ldr	r3, [pc, #200]	; (8002c58 <st7565_init+0x150>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2180      	movs	r1, #128	; 0x80
 8002b92:	0018      	movs	r0, r3
 8002b94:	f003 fb4f 	bl	8006236 <HAL_GPIO_WritePin>
 8002b98:	20a0      	movs	r0, #160	; 0xa0
 8002b9a:	f7ff ffa3 	bl	8002ae4 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_COM_NORMAL);                  // SHL Select
 8002b9e:	4b2e      	ldr	r3, [pc, #184]	; (8002c58 <st7565_init+0x150>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2180      	movs	r1, #128	; 0x80
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f003 fb46 	bl	8006236 <HAL_GPIO_WritePin>
 8002baa:	20c0      	movs	r0, #192	; 0xc0
 8002bac:	f7ff ff9a 	bl	8002ae4 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_DISP_START_LINE);             // Initial Display Line
 8002bb0:	4b29      	ldr	r3, [pc, #164]	; (8002c58 <st7565_init+0x150>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	2180      	movs	r1, #128	; 0x80
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f003 fb3d 	bl	8006236 <HAL_GPIO_WritePin>
 8002bbc:	2040      	movs	r0, #64	; 0x40
 8002bbe:	f7ff ff91 	bl	8002ae4 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x04);        // Turn on voltage converter (VC=1, VR=0, VF=0)
 8002bc2:	4b25      	ldr	r3, [pc, #148]	; (8002c58 <st7565_init+0x150>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2180      	movs	r1, #128	; 0x80
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f003 fb34 	bl	8006236 <HAL_GPIO_WritePin>
 8002bce:	202c      	movs	r0, #44	; 0x2c
 8002bd0:	f7ff ff88 	bl	8002ae4 <st7565_sendbyte>
	DELAY(50);                						 // Wait 50ms
 8002bd4:	2032      	movs	r0, #50	; 0x32
 8002bd6:	f002 fbf9 	bl	80053cc <HAL_Delay>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x06);        // Turn on voltage regulator (VC=1, VR=1, VF=0)
 8002bda:	4b1f      	ldr	r3, [pc, #124]	; (8002c58 <st7565_init+0x150>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2180      	movs	r1, #128	; 0x80
 8002be0:	0018      	movs	r0, r3
 8002be2:	f003 fb28 	bl	8006236 <HAL_GPIO_WritePin>
 8002be6:	202e      	movs	r0, #46	; 0x2e
 8002be8:	f7ff ff7c 	bl	8002ae4 <st7565_sendbyte>
	DELAY(50);                                       // Wait 50ms
 8002bec:	2032      	movs	r0, #50	; 0x32
 8002bee:	f002 fbed 	bl	80053cc <HAL_Delay>
	CMD(ST7565_CMD_SET_POWER_CONTROL | 0x07);        // Turn on voltage follower
 8002bf2:	4b19      	ldr	r3, [pc, #100]	; (8002c58 <st7565_init+0x150>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2180      	movs	r1, #128	; 0x80
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f003 fb1c 	bl	8006236 <HAL_GPIO_WritePin>
 8002bfe:	202f      	movs	r0, #47	; 0x2f
 8002c00:	f7ff ff70 	bl	8002ae4 <st7565_sendbyte>
	DELAY(10);                                       // Wait 10ms
 8002c04:	200a      	movs	r0, #10
 8002c06:	f002 fbe1 	bl	80053cc <HAL_Delay>
	CMD(ST7565_CMD_SET_RESISTOR_RATIO | 0x6);        // Set LCD operating voltage
 8002c0a:	4b13      	ldr	r3, [pc, #76]	; (8002c58 <st7565_init+0x150>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2180      	movs	r1, #128	; 0x80
 8002c10:	0018      	movs	r0, r3
 8002c12:	f003 fb10 	bl	8006236 <HAL_GPIO_WritePin>
 8002c16:	2026      	movs	r0, #38	; 0x26
 8002c18:	f7ff ff64 	bl	8002ae4 <st7565_sendbyte>

	// Turn display on
	CMD(ST7565_CMD_DISPLAY_ON);
 8002c1c:	4b0e      	ldr	r3, [pc, #56]	; (8002c58 <st7565_init+0x150>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2180      	movs	r1, #128	; 0x80
 8002c22:	0018      	movs	r0, r3
 8002c24:	f003 fb07 	bl	8006236 <HAL_GPIO_WritePin>
 8002c28:	20af      	movs	r0, #175	; 0xaf
 8002c2a:	f7ff ff5b 	bl	8002ae4 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_ALLPTS_NORMAL);
 8002c2e:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <st7565_init+0x150>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	2180      	movs	r1, #128	; 0x80
 8002c34:	0018      	movs	r0, r3
 8002c36:	f003 fafe 	bl	8006236 <HAL_GPIO_WritePin>
 8002c3a:	20a4      	movs	r0, #164	; 0xa4
 8002c3c:	f7ff ff52 	bl	8002ae4 <st7565_sendbyte>
	st7565_set_brightness(0x00);   // arduino 0x18
 8002c40:	2000      	movs	r0, #0
 8002c42:	f000 f829 	bl	8002c98 <st7565_set_brightness>
 	st7565_clear_screen();
 8002c46:	f000 f84b 	bl	8002ce0 <st7565_clear_screen>

	//Write the Adafruit-Logo, clear the buffer, wait and fade out
	//st7565_write_buffer(buffer);
	st7565_clear_buffer(buffer);
 8002c4a:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <st7565_init+0x158>)
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f000 f8a3 	bl	8002d98 <st7565_clear_buffer>
	//DELAY(800);
	//st7565_fade_out(24);
}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	48000800 	.word	0x48000800
 8002c5c:	48000400 	.word	0x48000400
 8002c60:	20000000 	.word	0x20000000

08002c64 <st7565_backlight_enable>:

//Enables the backlight
void st7565_backlight_enable(void) {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( BL_GPIO_Port, ST7565_BL_PIN, 1);
 8002c68:	2380      	movs	r3, #128	; 0x80
 8002c6a:	0059      	lsls	r1, r3, #1
 8002c6c:	2390      	movs	r3, #144	; 0x90
 8002c6e:	05db      	lsls	r3, r3, #23
 8002c70:	2201      	movs	r2, #1
 8002c72:	0018      	movs	r0, r3
 8002c74:	f003 fadf 	bl	8006236 <HAL_GPIO_WritePin>
}
 8002c78:	46c0      	nop			; (mov r8, r8)
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <st7565_backlight_disable>:

///Disables the backlight
void st7565_backlight_disable(void) {
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( BL_GPIO_Port, ST7565_BL_PIN, 0);
 8002c82:	2380      	movs	r3, #128	; 0x80
 8002c84:	0059      	lsls	r1, r3, #1
 8002c86:	2390      	movs	r3, #144	; 0x90
 8002c88:	05db      	lsls	r3, r3, #23
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f003 fad2 	bl	8006236 <HAL_GPIO_WritePin>
}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <st7565_set_brightness>:

//Sets the display brightness
void st7565_set_brightness(uint8_t val) {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	0002      	movs	r2, r0
 8002ca0:	1dfb      	adds	r3, r7, #7
 8002ca2:	701a      	strb	r2, [r3, #0]
	CMD(ST7565_CMD_SET_VOLUME_FIRST);
 8002ca4:	4b0d      	ldr	r3, [pc, #52]	; (8002cdc <st7565_set_brightness+0x44>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2180      	movs	r1, #128	; 0x80
 8002caa:	0018      	movs	r0, r3
 8002cac:	f003 fac3 	bl	8006236 <HAL_GPIO_WritePin>
 8002cb0:	2081      	movs	r0, #129	; 0x81
 8002cb2:	f7ff ff17 	bl	8002ae4 <st7565_sendbyte>
	CMD(ST7565_CMD_SET_VOLUME_SECOND | (val & 0x3f));
 8002cb6:	4b09      	ldr	r3, [pc, #36]	; (8002cdc <st7565_set_brightness+0x44>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2180      	movs	r1, #128	; 0x80
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f003 faba 	bl	8006236 <HAL_GPIO_WritePin>
 8002cc2:	1dfb      	adds	r3, r7, #7
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	223f      	movs	r2, #63	; 0x3f
 8002cc8:	4013      	ands	r3, r2
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f7ff ff09 	bl	8002ae4 <st7565_sendbyte>
}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	b002      	add	sp, #8
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	48000800 	.word	0x48000800

08002ce0 <st7565_clear_screen>:
		DELAY(100);
	}
}

//Clears the screen
void st7565_clear_screen(void) {
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
	uint8_t p, c;
	for (p = 0; p < 8; p++) {
 8002ce6:	1dfb      	adds	r3, r7, #7
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
 8002cec:	e049      	b.n	8002d82 <st7565_clear_screen+0xa2>
		CMD(ST7565_CMD_SET_PAGE | p);
 8002cee:	4b29      	ldr	r3, [pc, #164]	; (8002d94 <st7565_clear_screen+0xb4>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2180      	movs	r1, #128	; 0x80
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f003 fa9e 	bl	8006236 <HAL_GPIO_WritePin>
 8002cfa:	1dfb      	adds	r3, r7, #7
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2250      	movs	r2, #80	; 0x50
 8002d00:	4252      	negs	r2, r2
 8002d02:	4313      	orrs	r3, r2
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	0018      	movs	r0, r3
 8002d08:	f7ff feec 	bl	8002ae4 <st7565_sendbyte>
		for (c = 0; c < 129; c++) {
 8002d0c:	1dbb      	adds	r3, r7, #6
 8002d0e:	2200      	movs	r2, #0
 8002d10:	701a      	strb	r2, [r3, #0]
 8002d12:	e02d      	b.n	8002d70 <st7565_clear_screen+0x90>
			CMD(ST7565_CMD_SET_COLUMN_LOWER | (c & 0xf));
 8002d14:	4b1f      	ldr	r3, [pc, #124]	; (8002d94 <st7565_clear_screen+0xb4>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	2180      	movs	r1, #128	; 0x80
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f003 fa8b 	bl	8006236 <HAL_GPIO_WritePin>
 8002d20:	1dbb      	adds	r3, r7, #6
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	220f      	movs	r2, #15
 8002d26:	4013      	ands	r3, r2
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f7ff feda 	bl	8002ae4 <st7565_sendbyte>
			CMD(ST7565_CMD_SET_COLUMN_UPPER | ((c >> 4) & 0xf));
 8002d30:	4b18      	ldr	r3, [pc, #96]	; (8002d94 <st7565_clear_screen+0xb4>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	2180      	movs	r1, #128	; 0x80
 8002d36:	0018      	movs	r0, r3
 8002d38:	f003 fa7d 	bl	8006236 <HAL_GPIO_WritePin>
 8002d3c:	1dbb      	adds	r3, r7, #6
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	091b      	lsrs	r3, r3, #4
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	b25b      	sxtb	r3, r3
 8002d46:	2210      	movs	r2, #16
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	b25b      	sxtb	r3, r3
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f7ff fec8 	bl	8002ae4 <st7565_sendbyte>
			DATA(0x0);
 8002d54:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <st7565_clear_screen+0xb4>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	2180      	movs	r1, #128	; 0x80
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f003 fa6b 	bl	8006236 <HAL_GPIO_WritePin>
 8002d60:	2000      	movs	r0, #0
 8002d62:	f7ff febf 	bl	8002ae4 <st7565_sendbyte>
		for (c = 0; c < 129; c++) {
 8002d66:	1dbb      	adds	r3, r7, #6
 8002d68:	781a      	ldrb	r2, [r3, #0]
 8002d6a:	1dbb      	adds	r3, r7, #6
 8002d6c:	3201      	adds	r2, #1
 8002d6e:	701a      	strb	r2, [r3, #0]
 8002d70:	1dbb      	adds	r3, r7, #6
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b80      	cmp	r3, #128	; 0x80
 8002d76:	d9cd      	bls.n	8002d14 <st7565_clear_screen+0x34>
	for (p = 0; p < 8; p++) {
 8002d78:	1dfb      	adds	r3, r7, #7
 8002d7a:	781a      	ldrb	r2, [r3, #0]
 8002d7c:	1dfb      	adds	r3, r7, #7
 8002d7e:	3201      	adds	r2, #1
 8002d80:	701a      	strb	r2, [r3, #0]
 8002d82:	1dfb      	adds	r3, r7, #7
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b07      	cmp	r3, #7
 8002d88:	d9b1      	bls.n	8002cee <st7565_clear_screen+0xe>
		}
	}
}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	46c0      	nop			; (mov r8, r8)
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b002      	add	sp, #8
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	48000800 	.word	0x48000800

08002d98 <st7565_clear_buffer>:

// clear everything
void st7565_clear_buffer(uint8_t *buff) {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
	memset(buff, 0, 1024);
 8002da0:	2380      	movs	r3, #128	; 0x80
 8002da2:	00da      	lsls	r2, r3, #3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2100      	movs	r1, #0
 8002da8:	0018      	movs	r0, r3
 8002daa:	f004 fc0b 	bl	80075c4 <memset>
}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b002      	add	sp, #8
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <st7565_drawfallingbitmap>:
#define ANZAHL 10
#define XPOS 0
#define YPOS 1
#define DELTAY 2
void st7565_drawfallingbitmap(uint8_t *buff, const uint8_t *bitmap, uint8_t w,
		uint8_t h) {
 8002db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dba:	b091      	sub	sp, #68	; 0x44
 8002dbc:	af04      	add	r7, sp, #16
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	0019      	movs	r1, r3
 8002dc4:	1dfb      	adds	r3, r7, #7
 8002dc6:	701a      	strb	r2, [r3, #0]
 8002dc8:	1dbb      	adds	r3, r7, #6
 8002dca:	1c0a      	adds	r2, r1, #0
 8002dcc:	701a      	strb	r2, [r3, #0]
	uint8_t icons[ANZAHL][3];
	srand(buff[666]);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4a8a      	ldr	r2, [pc, #552]	; (8002ffc <st7565_drawfallingbitmap+0x244>)
 8002dd2:	4694      	mov	ip, r2
 8002dd4:	4463      	add	r3, ip
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	0018      	movs	r0, r3
 8002dda:	f005 f869 	bl	8007eb0 <srand>
// initialize
	uint8_t f = 0;
 8002dde:	212f      	movs	r1, #47	; 0x2f
 8002de0:	187b      	adds	r3, r7, r1
 8002de2:	2200      	movs	r2, #0
 8002de4:	701a      	strb	r2, [r3, #0]
	for (f = 0; f < ANZAHL; f++) {
 8002de6:	187b      	adds	r3, r7, r1
 8002de8:	2200      	movs	r2, #0
 8002dea:	701a      	strb	r2, [r3, #0]
 8002dec:	e03a      	b.n	8002e64 <st7565_drawfallingbitmap+0xac>
		icons[f][XPOS] = rand() % 128;
 8002dee:	f005 f88f 	bl	8007f10 <rand>
 8002df2:	0003      	movs	r3, r0
 8002df4:	4a82      	ldr	r2, [pc, #520]	; (8003000 <st7565_drawfallingbitmap+0x248>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	d504      	bpl.n	8002e04 <st7565_drawfallingbitmap+0x4c>
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	2280      	movs	r2, #128	; 0x80
 8002dfe:	4252      	negs	r2, r2
 8002e00:	4313      	orrs	r3, r2
 8002e02:	3301      	adds	r3, #1
 8002e04:	0019      	movs	r1, r3
 8002e06:	242f      	movs	r4, #47	; 0x2f
 8002e08:	193b      	adds	r3, r7, r4
 8002e0a:	781a      	ldrb	r2, [r3, #0]
 8002e0c:	b2c8      	uxtb	r0, r1
 8002e0e:	2510      	movs	r5, #16
 8002e10:	1979      	adds	r1, r7, r5
 8002e12:	0013      	movs	r3, r2
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	189b      	adds	r3, r3, r2
 8002e18:	1c02      	adds	r2, r0, #0
 8002e1a:	545a      	strb	r2, [r3, r1]
		icons[f][YPOS] = 0;
 8002e1c:	193b      	adds	r3, r7, r4
 8002e1e:	781a      	ldrb	r2, [r3, #0]
 8002e20:	1979      	adds	r1, r7, r5
 8002e22:	0013      	movs	r3, r2
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	189b      	adds	r3, r3, r2
 8002e28:	18cb      	adds	r3, r1, r3
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	701a      	strb	r2, [r3, #0]
		icons[f][DELTAY] = rand() % 5 + 1;
 8002e30:	f005 f86e 	bl	8007f10 <rand>
 8002e34:	0003      	movs	r3, r0
 8002e36:	2105      	movs	r1, #5
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f7fd faef 	bl	800041c <__aeabi_idivmod>
 8002e3e:	000b      	movs	r3, r1
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	193a      	adds	r2, r7, r4
 8002e44:	7812      	ldrb	r2, [r2, #0]
 8002e46:	3301      	adds	r3, #1
 8002e48:	b2d8      	uxtb	r0, r3
 8002e4a:	1979      	adds	r1, r7, r5
 8002e4c:	0013      	movs	r3, r2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	189b      	adds	r3, r3, r2
 8002e52:	18cb      	adds	r3, r1, r3
 8002e54:	3302      	adds	r3, #2
 8002e56:	1c02      	adds	r2, r0, #0
 8002e58:	701a      	strb	r2, [r3, #0]
	for (f = 0; f < ANZAHL; f++) {
 8002e5a:	193b      	adds	r3, r7, r4
 8002e5c:	781a      	ldrb	r2, [r3, #0]
 8002e5e:	193b      	adds	r3, r7, r4
 8002e60:	3201      	adds	r2, #1
 8002e62:	701a      	strb	r2, [r3, #0]
 8002e64:	232f      	movs	r3, #47	; 0x2f
 8002e66:	18fb      	adds	r3, r7, r3
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b09      	cmp	r3, #9
 8002e6c:	d9bf      	bls.n	8002dee <st7565_drawfallingbitmap+0x36>
	}
	while (1) {
// draw each icon
		for (f = 0; f < ANZAHL; f++) {
 8002e6e:	232f      	movs	r3, #47	; 0x2f
 8002e70:	18fb      	adds	r3, r7, r3
 8002e72:	2200      	movs	r2, #0
 8002e74:	701a      	strb	r2, [r3, #0]
 8002e76:	e024      	b.n	8002ec2 <st7565_drawfallingbitmap+0x10a>
			st7565_drawbitmap(buffer, icons[f][XPOS], icons[f][YPOS], bitmap, w,
 8002e78:	252f      	movs	r5, #47	; 0x2f
 8002e7a:	197b      	adds	r3, r7, r5
 8002e7c:	781a      	ldrb	r2, [r3, #0]
 8002e7e:	2010      	movs	r0, #16
 8002e80:	1839      	adds	r1, r7, r0
 8002e82:	0013      	movs	r3, r2
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	189b      	adds	r3, r3, r2
 8002e88:	5c5c      	ldrb	r4, [r3, r1]
 8002e8a:	197b      	adds	r3, r7, r5
 8002e8c:	781a      	ldrb	r2, [r3, #0]
 8002e8e:	1839      	adds	r1, r7, r0
 8002e90:	0013      	movs	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	189b      	adds	r3, r3, r2
 8002e96:	18cb      	adds	r3, r1, r3
 8002e98:	3301      	adds	r3, #1
 8002e9a:	781a      	ldrb	r2, [r3, #0]
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	4859      	ldr	r0, [pc, #356]	; (8003004 <st7565_drawfallingbitmap+0x24c>)
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	9302      	str	r3, [sp, #8]
 8002ea4:	1dbb      	adds	r3, r7, #6
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	9301      	str	r3, [sp, #4]
 8002eaa:	1dfb      	adds	r3, r7, #7
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	000b      	movs	r3, r1
 8002eb2:	0021      	movs	r1, r4
 8002eb4:	f000 f913 	bl	80030de <st7565_drawbitmap>
		for (f = 0; f < ANZAHL; f++) {
 8002eb8:	197b      	adds	r3, r7, r5
 8002eba:	781a      	ldrb	r2, [r3, #0]
 8002ebc:	197b      	adds	r3, r7, r5
 8002ebe:	3201      	adds	r2, #1
 8002ec0:	701a      	strb	r2, [r3, #0]
 8002ec2:	242f      	movs	r4, #47	; 0x2f
 8002ec4:	193b      	adds	r3, r7, r4
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b09      	cmp	r3, #9
 8002eca:	d9d5      	bls.n	8002e78 <st7565_drawfallingbitmap+0xc0>
					h, 1);
		}
		DELAY(200);
 8002ecc:	20c8      	movs	r0, #200	; 0xc8
 8002ece:	f002 fa7d 	bl	80053cc <HAL_Delay>
		st7565_write_buffer(buffer);
 8002ed2:	4b4c      	ldr	r3, [pc, #304]	; (8003004 <st7565_drawfallingbitmap+0x24c>)
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f7ff fd8d 	bl	80029f4 <st7565_write_buffer>
// then erase it + move it
		for (f = 0; f < ANZAHL; f++) {
 8002eda:	193b      	adds	r3, r7, r4
 8002edc:	2200      	movs	r2, #0
 8002ede:	701a      	strb	r2, [r3, #0]
 8002ee0:	e084      	b.n	8002fec <st7565_drawfallingbitmap+0x234>
			st7565_drawbitmap(buffer, icons[f][XPOS], icons[f][YPOS], bitmap, w,
 8002ee2:	252f      	movs	r5, #47	; 0x2f
 8002ee4:	197b      	adds	r3, r7, r5
 8002ee6:	781a      	ldrb	r2, [r3, #0]
 8002ee8:	2610      	movs	r6, #16
 8002eea:	19b9      	adds	r1, r7, r6
 8002eec:	0013      	movs	r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	189b      	adds	r3, r3, r2
 8002ef2:	5c5c      	ldrb	r4, [r3, r1]
 8002ef4:	197b      	adds	r3, r7, r5
 8002ef6:	781a      	ldrb	r2, [r3, #0]
 8002ef8:	19b9      	adds	r1, r7, r6
 8002efa:	0013      	movs	r3, r2
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	189b      	adds	r3, r3, r2
 8002f00:	18cb      	adds	r3, r1, r3
 8002f02:	3301      	adds	r3, #1
 8002f04:	781a      	ldrb	r2, [r3, #0]
 8002f06:	68b9      	ldr	r1, [r7, #8]
 8002f08:	483e      	ldr	r0, [pc, #248]	; (8003004 <st7565_drawfallingbitmap+0x24c>)
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	9302      	str	r3, [sp, #8]
 8002f0e:	1dbb      	adds	r3, r7, #6
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	9301      	str	r3, [sp, #4]
 8002f14:	1dfb      	adds	r3, r7, #7
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	000b      	movs	r3, r1
 8002f1c:	0021      	movs	r1, r4
 8002f1e:	f000 f8de 	bl	80030de <st7565_drawbitmap>
					h, 0);
// move it
			icons[f][YPOS] += icons[f][DELTAY];
 8002f22:	197b      	adds	r3, r7, r5
 8002f24:	781a      	ldrb	r2, [r3, #0]
 8002f26:	19b9      	adds	r1, r7, r6
 8002f28:	0013      	movs	r3, r2
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	189b      	adds	r3, r3, r2
 8002f2e:	18cb      	adds	r3, r1, r3
 8002f30:	3301      	adds	r3, #1
 8002f32:	7819      	ldrb	r1, [r3, #0]
 8002f34:	197b      	adds	r3, r7, r5
 8002f36:	781a      	ldrb	r2, [r3, #0]
 8002f38:	19b8      	adds	r0, r7, r6
 8002f3a:	0013      	movs	r3, r2
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	189b      	adds	r3, r3, r2
 8002f40:	18c3      	adds	r3, r0, r3
 8002f42:	3302      	adds	r3, #2
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	197a      	adds	r2, r7, r5
 8002f48:	7812      	ldrb	r2, [r2, #0]
 8002f4a:	18cb      	adds	r3, r1, r3
 8002f4c:	b2d8      	uxtb	r0, r3
 8002f4e:	19b9      	adds	r1, r7, r6
 8002f50:	0013      	movs	r3, r2
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	189b      	adds	r3, r3, r2
 8002f56:	18cb      	adds	r3, r1, r3
 8002f58:	3301      	adds	r3, #1
 8002f5a:	1c02      	adds	r2, r0, #0
 8002f5c:	701a      	strb	r2, [r3, #0]
// if its gone, reinit
			if (icons[f][YPOS] > 64) {
 8002f5e:	197b      	adds	r3, r7, r5
 8002f60:	781a      	ldrb	r2, [r3, #0]
 8002f62:	19b9      	adds	r1, r7, r6
 8002f64:	0013      	movs	r3, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	189b      	adds	r3, r3, r2
 8002f6a:	18cb      	adds	r3, r1, r3
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b40      	cmp	r3, #64	; 0x40
 8002f72:	d935      	bls.n	8002fe0 <st7565_drawfallingbitmap+0x228>
				icons[f][XPOS] = rand() % 128;
 8002f74:	f004 ffcc 	bl	8007f10 <rand>
 8002f78:	0003      	movs	r3, r0
 8002f7a:	4a21      	ldr	r2, [pc, #132]	; (8003000 <st7565_drawfallingbitmap+0x248>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d504      	bpl.n	8002f8a <st7565_drawfallingbitmap+0x1d2>
 8002f80:	3b01      	subs	r3, #1
 8002f82:	2280      	movs	r2, #128	; 0x80
 8002f84:	4252      	negs	r2, r2
 8002f86:	4313      	orrs	r3, r2
 8002f88:	3301      	adds	r3, #1
 8002f8a:	0019      	movs	r1, r3
 8002f8c:	242f      	movs	r4, #47	; 0x2f
 8002f8e:	193b      	adds	r3, r7, r4
 8002f90:	781a      	ldrb	r2, [r3, #0]
 8002f92:	b2c8      	uxtb	r0, r1
 8002f94:	2510      	movs	r5, #16
 8002f96:	1979      	adds	r1, r7, r5
 8002f98:	0013      	movs	r3, r2
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	189b      	adds	r3, r3, r2
 8002f9e:	1c02      	adds	r2, r0, #0
 8002fa0:	545a      	strb	r2, [r3, r1]
				icons[f][YPOS] = 0;
 8002fa2:	193b      	adds	r3, r7, r4
 8002fa4:	781a      	ldrb	r2, [r3, #0]
 8002fa6:	1979      	adds	r1, r7, r5
 8002fa8:	0013      	movs	r3, r2
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	189b      	adds	r3, r3, r2
 8002fae:	18cb      	adds	r3, r1, r3
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	701a      	strb	r2, [r3, #0]
				icons[f][DELTAY] = rand() % 5 + 1;
 8002fb6:	f004 ffab 	bl	8007f10 <rand>
 8002fba:	0003      	movs	r3, r0
 8002fbc:	2105      	movs	r1, #5
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f7fd fa2c 	bl	800041c <__aeabi_idivmod>
 8002fc4:	000b      	movs	r3, r1
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	193a      	adds	r2, r7, r4
 8002fca:	7812      	ldrb	r2, [r2, #0]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	b2d8      	uxtb	r0, r3
 8002fd0:	1979      	adds	r1, r7, r5
 8002fd2:	0013      	movs	r3, r2
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	189b      	adds	r3, r3, r2
 8002fd8:	18cb      	adds	r3, r1, r3
 8002fda:	3302      	adds	r3, #2
 8002fdc:	1c02      	adds	r2, r0, #0
 8002fde:	701a      	strb	r2, [r3, #0]
		for (f = 0; f < ANZAHL; f++) {
 8002fe0:	212f      	movs	r1, #47	; 0x2f
 8002fe2:	187b      	adds	r3, r7, r1
 8002fe4:	781a      	ldrb	r2, [r3, #0]
 8002fe6:	187b      	adds	r3, r7, r1
 8002fe8:	3201      	adds	r2, #1
 8002fea:	701a      	strb	r2, [r3, #0]
 8002fec:	232f      	movs	r3, #47	; 0x2f
 8002fee:	18fb      	adds	r3, r7, r3
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b09      	cmp	r3, #9
 8002ff4:	d800      	bhi.n	8002ff8 <st7565_drawfallingbitmap+0x240>
 8002ff6:	e774      	b.n	8002ee2 <st7565_drawfallingbitmap+0x12a>
		for (f = 0; f < ANZAHL; f++) {
 8002ff8:	e739      	b.n	8002e6e <st7565_drawfallingbitmap+0xb6>
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	0000029a 	.word	0x0000029a
 8003000:	8000007f 	.word	0x8000007f
 8003004:	20000000 	.word	0x20000000

08003008 <st7565_setpixel>:
		}
	}
}

//set *pixel on *x/*y with *color
void st7565_setpixel(uint8_t *buff, uint8_t x, uint8_t y, uint8_t color) {
 8003008:	b590      	push	{r4, r7, lr}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	000c      	movs	r4, r1
 8003012:	0010      	movs	r0, r2
 8003014:	0019      	movs	r1, r3
 8003016:	1cfb      	adds	r3, r7, #3
 8003018:	1c22      	adds	r2, r4, #0
 800301a:	701a      	strb	r2, [r3, #0]
 800301c:	1cbb      	adds	r3, r7, #2
 800301e:	1c02      	adds	r2, r0, #0
 8003020:	701a      	strb	r2, [r3, #0]
 8003022:	1c7b      	adds	r3, r7, #1
 8003024:	1c0a      	adds	r2, r1, #0
 8003026:	701a      	strb	r2, [r3, #0]
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
 8003028:	1cfb      	adds	r3, r7, #3
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	b25b      	sxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	db51      	blt.n	80030d6 <st7565_setpixel+0xce>
 8003032:	1cbb      	adds	r3, r7, #2
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b3f      	cmp	r3, #63	; 0x3f
 8003038:	d84d      	bhi.n	80030d6 <st7565_setpixel+0xce>
		return;
// x is which column

	if (color)
 800303a:	1c7b      	adds	r3, r7, #1
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d023      	beq.n	800308a <st7565_setpixel+0x82>
		buff[x + (y / 8) * 128] |= (1 << (7 - (y % 8)));
 8003042:	1cfb      	adds	r3, r7, #3
 8003044:	781a      	ldrb	r2, [r3, #0]
 8003046:	1cbb      	adds	r3, r7, #2
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	08db      	lsrs	r3, r3, #3
 800304c:	b2d8      	uxtb	r0, r3
 800304e:	0003      	movs	r3, r0
 8003050:	01db      	lsls	r3, r3, #7
 8003052:	18d3      	adds	r3, r2, r3
 8003054:	001a      	movs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	189b      	adds	r3, r3, r2
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	b25a      	sxtb	r2, r3
 800305e:	1cbb      	adds	r3, r7, #2
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	43db      	mvns	r3, r3
 8003064:	2107      	movs	r1, #7
 8003066:	400b      	ands	r3, r1
 8003068:	2101      	movs	r1, #1
 800306a:	4099      	lsls	r1, r3
 800306c:	000b      	movs	r3, r1
 800306e:	b25b      	sxtb	r3, r3
 8003070:	4313      	orrs	r3, r2
 8003072:	b259      	sxtb	r1, r3
 8003074:	1cfb      	adds	r3, r7, #3
 8003076:	781a      	ldrb	r2, [r3, #0]
 8003078:	0003      	movs	r3, r0
 800307a:	01db      	lsls	r3, r3, #7
 800307c:	18d3      	adds	r3, r2, r3
 800307e:	001a      	movs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	189b      	adds	r3, r3, r2
 8003084:	b2ca      	uxtb	r2, r1
 8003086:	701a      	strb	r2, [r3, #0]
 8003088:	e026      	b.n	80030d8 <st7565_setpixel+0xd0>
	else
		buff[x + (y / 8) * 128] &= ~(1 << (7 - (y % 8)));
 800308a:	1cfb      	adds	r3, r7, #3
 800308c:	781a      	ldrb	r2, [r3, #0]
 800308e:	1cbb      	adds	r3, r7, #2
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	08db      	lsrs	r3, r3, #3
 8003094:	b2d8      	uxtb	r0, r3
 8003096:	0003      	movs	r3, r0
 8003098:	01db      	lsls	r3, r3, #7
 800309a:	18d3      	adds	r3, r2, r3
 800309c:	001a      	movs	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	189b      	adds	r3, r3, r2
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	b25b      	sxtb	r3, r3
 80030a6:	1cba      	adds	r2, r7, #2
 80030a8:	7812      	ldrb	r2, [r2, #0]
 80030aa:	43d2      	mvns	r2, r2
 80030ac:	2107      	movs	r1, #7
 80030ae:	400a      	ands	r2, r1
 80030b0:	2101      	movs	r1, #1
 80030b2:	4091      	lsls	r1, r2
 80030b4:	000a      	movs	r2, r1
 80030b6:	b252      	sxtb	r2, r2
 80030b8:	43d2      	mvns	r2, r2
 80030ba:	b252      	sxtb	r2, r2
 80030bc:	4013      	ands	r3, r2
 80030be:	b259      	sxtb	r1, r3
 80030c0:	1cfb      	adds	r3, r7, #3
 80030c2:	781a      	ldrb	r2, [r3, #0]
 80030c4:	0003      	movs	r3, r0
 80030c6:	01db      	lsls	r3, r3, #7
 80030c8:	18d3      	adds	r3, r2, r3
 80030ca:	001a      	movs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	189b      	adds	r3, r3, r2
 80030d0:	b2ca      	uxtb	r2, r1
 80030d2:	701a      	strb	r2, [r3, #0]
 80030d4:	e000      	b.n	80030d8 <st7565_setpixel+0xd0>
		return;
 80030d6:	46c0      	nop			; (mov r8, r8)
}
 80030d8:	46bd      	mov	sp, r7
 80030da:	b003      	add	sp, #12
 80030dc:	bd90      	pop	{r4, r7, pc}

080030de <st7565_drawbitmap>:

//draw pixel at *x/*y from *bitmap
void st7565_drawbitmap(uint8_t *buff, uint8_t x, uint8_t y,
		const uint8_t *bitmap, uint8_t w, uint8_t h, uint8_t color) {
 80030de:	b5b0      	push	{r4, r5, r7, lr}
 80030e0:	b086      	sub	sp, #24
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	0008      	movs	r0, r1
 80030e8:	0011      	movs	r1, r2
 80030ea:	607b      	str	r3, [r7, #4]
 80030ec:	230b      	movs	r3, #11
 80030ee:	18fb      	adds	r3, r7, r3
 80030f0:	1c02      	adds	r2, r0, #0
 80030f2:	701a      	strb	r2, [r3, #0]
 80030f4:	230a      	movs	r3, #10
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	1c0a      	adds	r2, r1, #0
 80030fa:	701a      	strb	r2, [r3, #0]
	uint8_t j, i;
	for (j = 0; j < h; j++) {
 80030fc:	2317      	movs	r3, #23
 80030fe:	18fb      	adds	r3, r7, r3
 8003100:	2200      	movs	r2, #0
 8003102:	701a      	strb	r2, [r3, #0]
 8003104:	e04c      	b.n	80031a0 <st7565_drawbitmap+0xc2>
		for (i = 0; i < w; i++) {
 8003106:	2316      	movs	r3, #22
 8003108:	18fb      	adds	r3, r7, r3
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]
 800310e:	e037      	b.n	8003180 <st7565_drawbitmap+0xa2>
			if (*(bitmap + i + (j / 8) * w) & (1 << (j % 8))) {
 8003110:	2416      	movs	r4, #22
 8003112:	193b      	adds	r3, r7, r4
 8003114:	781a      	ldrb	r2, [r3, #0]
 8003116:	2017      	movs	r0, #23
 8003118:	183b      	adds	r3, r7, r0
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	08db      	lsrs	r3, r3, #3
 800311e:	b2db      	uxtb	r3, r3
 8003120:	0019      	movs	r1, r3
 8003122:	2320      	movs	r3, #32
 8003124:	2508      	movs	r5, #8
 8003126:	195b      	adds	r3, r3, r5
 8003128:	19db      	adds	r3, r3, r7
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	434b      	muls	r3, r1
 800312e:	18d3      	adds	r3, r2, r3
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	18d3      	adds	r3, r2, r3
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	0019      	movs	r1, r3
 8003138:	183b      	adds	r3, r7, r0
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2207      	movs	r2, #7
 800313e:	4013      	ands	r3, r2
 8003140:	4119      	asrs	r1, r3
 8003142:	000b      	movs	r3, r1
 8003144:	2201      	movs	r2, #1
 8003146:	4013      	ands	r3, r2
 8003148:	d014      	beq.n	8003174 <st7565_drawbitmap+0x96>
				st7565_setpixel(buff, x + i, y + j, color);
 800314a:	230b      	movs	r3, #11
 800314c:	18fa      	adds	r2, r7, r3
 800314e:	193b      	adds	r3, r7, r4
 8003150:	7812      	ldrb	r2, [r2, #0]
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	18d3      	adds	r3, r2, r3
 8003156:	b2d9      	uxtb	r1, r3
 8003158:	230a      	movs	r3, #10
 800315a:	18fa      	adds	r2, r7, r3
 800315c:	183b      	adds	r3, r7, r0
 800315e:	7812      	ldrb	r2, [r2, #0]
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	18d3      	adds	r3, r2, r3
 8003164:	b2da      	uxtb	r2, r3
 8003166:	2328      	movs	r3, #40	; 0x28
 8003168:	195b      	adds	r3, r3, r5
 800316a:	19db      	adds	r3, r3, r7
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f7ff ff4a 	bl	8003008 <st7565_setpixel>
		for (i = 0; i < w; i++) {
 8003174:	2116      	movs	r1, #22
 8003176:	187b      	adds	r3, r7, r1
 8003178:	781a      	ldrb	r2, [r3, #0]
 800317a:	187b      	adds	r3, r7, r1
 800317c:	3201      	adds	r2, #1
 800317e:	701a      	strb	r2, [r3, #0]
 8003180:	2316      	movs	r3, #22
 8003182:	18fa      	adds	r2, r7, r3
 8003184:	2320      	movs	r3, #32
 8003186:	2108      	movs	r1, #8
 8003188:	185b      	adds	r3, r3, r1
 800318a:	19db      	adds	r3, r3, r7
 800318c:	7812      	ldrb	r2, [r2, #0]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d3bd      	bcc.n	8003110 <st7565_drawbitmap+0x32>
	for (j = 0; j < h; j++) {
 8003194:	2117      	movs	r1, #23
 8003196:	187b      	adds	r3, r7, r1
 8003198:	781a      	ldrb	r2, [r3, #0]
 800319a:	187b      	adds	r3, r7, r1
 800319c:	3201      	adds	r2, #1
 800319e:	701a      	strb	r2, [r3, #0]
 80031a0:	2317      	movs	r3, #23
 80031a2:	18fa      	adds	r2, r7, r3
 80031a4:	2324      	movs	r3, #36	; 0x24
 80031a6:	2108      	movs	r1, #8
 80031a8:	185b      	adds	r3, r3, r1
 80031aa:	19db      	adds	r3, r3, r7
 80031ac:	7812      	ldrb	r2, [r2, #0]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d3a8      	bcc.n	8003106 <st7565_drawbitmap+0x28>
			}
		}
	}
}
 80031b4:	46c0      	nop			; (mov r8, r8)
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	46bd      	mov	sp, r7
 80031ba:	b006      	add	sp, #24
 80031bc:	bdb0      	pop	{r4, r5, r7, pc}

080031be <st7565_drawstring>:

//draw a sting at *x/*y
void st7565_drawstring(uint8_t *buff, uint8_t x, uint8_t line, uint8_t *c) {
 80031be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031c0:	b085      	sub	sp, #20
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	0008      	movs	r0, r1
 80031c8:	0011      	movs	r1, r2
 80031ca:	607b      	str	r3, [r7, #4]
 80031cc:	230b      	movs	r3, #11
 80031ce:	18fb      	adds	r3, r7, r3
 80031d0:	1c02      	adds	r2, r0, #0
 80031d2:	701a      	strb	r2, [r3, #0]
 80031d4:	230a      	movs	r3, #10
 80031d6:	18fb      	adds	r3, r7, r3
 80031d8:	1c0a      	adds	r2, r1, #0
 80031da:	701a      	strb	r2, [r3, #0]
	while (c[0] != 0) {
 80031dc:	e025      	b.n	800322a <st7565_drawstring+0x6c>
		st7565_drawchar(buff, x, line, c[0]);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	781c      	ldrb	r4, [r3, #0]
 80031e2:	260a      	movs	r6, #10
 80031e4:	19bb      	adds	r3, r7, r6
 80031e6:	781a      	ldrb	r2, [r3, #0]
 80031e8:	250b      	movs	r5, #11
 80031ea:	197b      	adds	r3, r7, r5
 80031ec:	7819      	ldrb	r1, [r3, #0]
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	0023      	movs	r3, r4
 80031f2:	f000 f823 	bl	800323c <st7565_drawchar>
		c++;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3301      	adds	r3, #1
 80031fa:	607b      	str	r3, [r7, #4]
		x += 6; // 6 pixels wide
 80031fc:	0029      	movs	r1, r5
 80031fe:	187b      	adds	r3, r7, r1
 8003200:	187a      	adds	r2, r7, r1
 8003202:	7812      	ldrb	r2, [r2, #0]
 8003204:	3206      	adds	r2, #6
 8003206:	701a      	strb	r2, [r3, #0]
		if (x + 6 >= LCDWIDTH) {
 8003208:	187b      	adds	r3, r7, r1
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b79      	cmp	r3, #121	; 0x79
 800320e:	d907      	bls.n	8003220 <st7565_drawstring+0x62>
			x = 0; // ran out of this line
 8003210:	187b      	adds	r3, r7, r1
 8003212:	2200      	movs	r2, #0
 8003214:	701a      	strb	r2, [r3, #0]
			line++;
 8003216:	19bb      	adds	r3, r7, r6
 8003218:	781a      	ldrb	r2, [r3, #0]
 800321a:	19bb      	adds	r3, r7, r6
 800321c:	3201      	adds	r2, #1
 800321e:	701a      	strb	r2, [r3, #0]
		}
		if (line >= (LCDHEIGHT / 8))
 8003220:	230a      	movs	r3, #10
 8003222:	18fb      	adds	r3, r7, r3
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b07      	cmp	r3, #7
 8003228:	d804      	bhi.n	8003234 <st7565_drawstring+0x76>
	while (c[0] != 0) {
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1d5      	bne.n	80031de <st7565_drawstring+0x20>
 8003232:	e000      	b.n	8003236 <st7565_drawstring+0x78>
			return; // ran out of space :(
 8003234:	46c0      	nop			; (mov r8, r8)
	}
}
 8003236:	46bd      	mov	sp, r7
 8003238:	b005      	add	sp, #20
 800323a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800323c <st7565_drawchar>:

//draw a single character at *x/*y
void st7565_drawchar(uint8_t *buff, uint8_t x, uint8_t line, uint8_t c) {
 800323c:	b590      	push	{r4, r7, lr}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	000c      	movs	r4, r1
 8003246:	0010      	movs	r0, r2
 8003248:	0019      	movs	r1, r3
 800324a:	1cfb      	adds	r3, r7, #3
 800324c:	1c22      	adds	r2, r4, #0
 800324e:	701a      	strb	r2, [r3, #0]
 8003250:	1cbb      	adds	r3, r7, #2
 8003252:	1c02      	adds	r2, r0, #0
 8003254:	701a      	strb	r2, [r3, #0]
 8003256:	1c7b      	adds	r3, r7, #1
 8003258:	1c0a      	adds	r2, r1, #0
 800325a:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < 5; i++) {
 800325c:	230f      	movs	r3, #15
 800325e:	18fb      	adds	r3, r7, r3
 8003260:	2200      	movs	r2, #0
 8003262:	701a      	strb	r2, [r3, #0]
 8003264:	e020      	b.n	80032a8 <st7565_drawchar+0x6c>
		buff[x + (line * 128)] = *(lcdfont5x7 + (c * 5) + i);
 8003266:	1c7b      	adds	r3, r7, #1
 8003268:	781a      	ldrb	r2, [r3, #0]
 800326a:	0013      	movs	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	189b      	adds	r3, r3, r2
 8003270:	001a      	movs	r2, r3
 8003272:	200f      	movs	r0, #15
 8003274:	183b      	adds	r3, r7, r0
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	18d2      	adds	r2, r2, r3
 800327a:	4b10      	ldr	r3, [pc, #64]	; (80032bc <st7565_drawchar+0x80>)
 800327c:	18d2      	adds	r2, r2, r3
 800327e:	1cfb      	adds	r3, r7, #3
 8003280:	7819      	ldrb	r1, [r3, #0]
 8003282:	1cbb      	adds	r3, r7, #2
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	01db      	lsls	r3, r3, #7
 8003288:	18cb      	adds	r3, r1, r3
 800328a:	0019      	movs	r1, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	185b      	adds	r3, r3, r1
 8003290:	7812      	ldrb	r2, [r2, #0]
 8003292:	701a      	strb	r2, [r3, #0]
		x++;
 8003294:	1cfb      	adds	r3, r7, #3
 8003296:	781a      	ldrb	r2, [r3, #0]
 8003298:	1cfb      	adds	r3, r7, #3
 800329a:	3201      	adds	r2, #1
 800329c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 5; i++) {
 800329e:	183b      	adds	r3, r7, r0
 80032a0:	781a      	ldrb	r2, [r3, #0]
 80032a2:	183b      	adds	r3, r7, r0
 80032a4:	3201      	adds	r2, #1
 80032a6:	701a      	strb	r2, [r3, #0]
 80032a8:	230f      	movs	r3, #15
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d9d9      	bls.n	8003266 <st7565_drawchar+0x2a>
	}
}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	46c0      	nop			; (mov r8, r8)
 80032b6:	46bd      	mov	sp, r7
 80032b8:	b005      	add	sp, #20
 80032ba:	bd90      	pop	{r4, r7, pc}
 80032bc:	0800a868 	.word	0x0800a868

080032c0 <st7565_drawline>:
	buff[x + (y / 8) * 128] &= ~(1 << (7 - (y % 8)));
}

// Draw a line, based on bresenham's algorithm
void st7565_drawline(uint8_t *buff, uint8_t x0, uint8_t y0, uint8_t x1,
		uint8_t y1, uint8_t color) {
 80032c0:	b590      	push	{r4, r7, lr}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	000c      	movs	r4, r1
 80032ca:	0010      	movs	r0, r2
 80032cc:	0019      	movs	r1, r3
 80032ce:	1cfb      	adds	r3, r7, #3
 80032d0:	1c22      	adds	r2, r4, #0
 80032d2:	701a      	strb	r2, [r3, #0]
 80032d4:	1cbb      	adds	r3, r7, #2
 80032d6:	1c02      	adds	r2, r0, #0
 80032d8:	701a      	strb	r2, [r3, #0]
 80032da:	1c7b      	adds	r3, r7, #1
 80032dc:	1c0a      	adds	r2, r1, #0
 80032de:	701a      	strb	r2, [r3, #0]
	uint8_t tmp, swap = 0;
 80032e0:	230f      	movs	r3, #15
 80032e2:	18fb      	adds	r3, r7, r3
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
	uint8_t x, y;
	uint8_t dx, dy;
	int8_t ystep, err;

	if (x0 > x1)
 80032e8:	1cfa      	adds	r2, r7, #3
 80032ea:	1c7b      	adds	r3, r7, #1
 80032ec:	7812      	ldrb	r2, [r2, #0]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d908      	bls.n	8003306 <st7565_drawline+0x46>
		dx = x0 - x1;
 80032f4:	230c      	movs	r3, #12
 80032f6:	18fb      	adds	r3, r7, r3
 80032f8:	1cf9      	adds	r1, r7, #3
 80032fa:	1c7a      	adds	r2, r7, #1
 80032fc:	7809      	ldrb	r1, [r1, #0]
 80032fe:	7812      	ldrb	r2, [r2, #0]
 8003300:	1a8a      	subs	r2, r1, r2
 8003302:	701a      	strb	r2, [r3, #0]
 8003304:	e007      	b.n	8003316 <st7565_drawline+0x56>
	else
		dx = x1 - x0;
 8003306:	230c      	movs	r3, #12
 8003308:	18fb      	adds	r3, r7, r3
 800330a:	1c79      	adds	r1, r7, #1
 800330c:	1cfa      	adds	r2, r7, #3
 800330e:	7809      	ldrb	r1, [r1, #0]
 8003310:	7812      	ldrb	r2, [r2, #0]
 8003312:	1a8a      	subs	r2, r1, r2
 8003314:	701a      	strb	r2, [r3, #0]
	if (y0 > y1)
 8003316:	1cba      	adds	r2, r7, #2
 8003318:	2020      	movs	r0, #32
 800331a:	183b      	adds	r3, r7, r0
 800331c:	7812      	ldrb	r2, [r2, #0]
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d908      	bls.n	8003336 <st7565_drawline+0x76>
		dy = y0 - y1;
 8003324:	230b      	movs	r3, #11
 8003326:	18fa      	adds	r2, r7, r3
 8003328:	1cb9      	adds	r1, r7, #2
 800332a:	183b      	adds	r3, r7, r0
 800332c:	7809      	ldrb	r1, [r1, #0]
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	1acb      	subs	r3, r1, r3
 8003332:	7013      	strb	r3, [r2, #0]
 8003334:	e008      	b.n	8003348 <st7565_drawline+0x88>
	else
		dy = y1 - y0;
 8003336:	230b      	movs	r3, #11
 8003338:	18fa      	adds	r2, r7, r3
 800333a:	2320      	movs	r3, #32
 800333c:	18fb      	adds	r3, r7, r3
 800333e:	1cb8      	adds	r0, r7, #2
 8003340:	7819      	ldrb	r1, [r3, #0]
 8003342:	7803      	ldrb	r3, [r0, #0]
 8003344:	1acb      	subs	r3, r1, r3
 8003346:	7013      	strb	r3, [r2, #0]

	if (dy > dx) {
 8003348:	200b      	movs	r0, #11
 800334a:	183a      	adds	r2, r7, r0
 800334c:	240c      	movs	r4, #12
 800334e:	193b      	adds	r3, r7, r4
 8003350:	7812      	ldrb	r2, [r2, #0]
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	429a      	cmp	r2, r3
 8003356:	d929      	bls.n	80033ac <st7565_drawline+0xec>
		swap = 1;
 8003358:	230f      	movs	r3, #15
 800335a:	18fb      	adds	r3, r7, r3
 800335c:	2201      	movs	r2, #1
 800335e:	701a      	strb	r2, [r3, #0]
		tmp = dx;
 8003360:	2108      	movs	r1, #8
 8003362:	187b      	adds	r3, r7, r1
 8003364:	193a      	adds	r2, r7, r4
 8003366:	7812      	ldrb	r2, [r2, #0]
 8003368:	701a      	strb	r2, [r3, #0]
		dx = dy;
 800336a:	193b      	adds	r3, r7, r4
 800336c:	183a      	adds	r2, r7, r0
 800336e:	7812      	ldrb	r2, [r2, #0]
 8003370:	701a      	strb	r2, [r3, #0]
		dy = tmp;
 8003372:	183b      	adds	r3, r7, r0
 8003374:	187a      	adds	r2, r7, r1
 8003376:	7812      	ldrb	r2, [r2, #0]
 8003378:	701a      	strb	r2, [r3, #0]
		tmp = x0;
 800337a:	187b      	adds	r3, r7, r1
 800337c:	1cfa      	adds	r2, r7, #3
 800337e:	7812      	ldrb	r2, [r2, #0]
 8003380:	701a      	strb	r2, [r3, #0]
		x0 = y0;
 8003382:	1cfb      	adds	r3, r7, #3
 8003384:	1cba      	adds	r2, r7, #2
 8003386:	7812      	ldrb	r2, [r2, #0]
 8003388:	701a      	strb	r2, [r3, #0]
		y0 = tmp;
 800338a:	1cbb      	adds	r3, r7, #2
 800338c:	187a      	adds	r2, r7, r1
 800338e:	7812      	ldrb	r2, [r2, #0]
 8003390:	701a      	strb	r2, [r3, #0]
		tmp = x1;
 8003392:	187b      	adds	r3, r7, r1
 8003394:	1c7a      	adds	r2, r7, #1
 8003396:	7812      	ldrb	r2, [r2, #0]
 8003398:	701a      	strb	r2, [r3, #0]
		x1 = y1;
 800339a:	1c7a      	adds	r2, r7, #1
 800339c:	2020      	movs	r0, #32
 800339e:	183b      	adds	r3, r7, r0
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	7013      	strb	r3, [r2, #0]
		y1 = tmp;
 80033a4:	183b      	adds	r3, r7, r0
 80033a6:	187a      	adds	r2, r7, r1
 80033a8:	7812      	ldrb	r2, [r2, #0]
 80033aa:	701a      	strb	r2, [r3, #0]
	}
	if (x0 > x1) {
 80033ac:	1cfa      	adds	r2, r7, #3
 80033ae:	1c7b      	adds	r3, r7, #1
 80033b0:	7812      	ldrb	r2, [r2, #0]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d919      	bls.n	80033ec <st7565_drawline+0x12c>
		tmp = x0;
 80033b8:	2108      	movs	r1, #8
 80033ba:	187b      	adds	r3, r7, r1
 80033bc:	1cfa      	adds	r2, r7, #3
 80033be:	7812      	ldrb	r2, [r2, #0]
 80033c0:	701a      	strb	r2, [r3, #0]
		x0 = x1;
 80033c2:	1cfb      	adds	r3, r7, #3
 80033c4:	1c7a      	adds	r2, r7, #1
 80033c6:	7812      	ldrb	r2, [r2, #0]
 80033c8:	701a      	strb	r2, [r3, #0]
		x1 = tmp;
 80033ca:	1c7b      	adds	r3, r7, #1
 80033cc:	187a      	adds	r2, r7, r1
 80033ce:	7812      	ldrb	r2, [r2, #0]
 80033d0:	701a      	strb	r2, [r3, #0]
		tmp = y0;
 80033d2:	187b      	adds	r3, r7, r1
 80033d4:	1cba      	adds	r2, r7, #2
 80033d6:	7812      	ldrb	r2, [r2, #0]
 80033d8:	701a      	strb	r2, [r3, #0]
		y0 = y1;
 80033da:	1cba      	adds	r2, r7, #2
 80033dc:	2020      	movs	r0, #32
 80033de:	183b      	adds	r3, r7, r0
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	7013      	strb	r3, [r2, #0]
		y1 = tmp;
 80033e4:	183b      	adds	r3, r7, r0
 80033e6:	187a      	adds	r2, r7, r1
 80033e8:	7812      	ldrb	r2, [r2, #0]
 80033ea:	701a      	strb	r2, [r3, #0]
	}

	err = dx >> 1;
 80033ec:	230c      	movs	r3, #12
 80033ee:	18fb      	adds	r3, r7, r3
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	085b      	lsrs	r3, r3, #1
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	2309      	movs	r3, #9
 80033f8:	18fb      	adds	r3, r7, r3
 80033fa:	701a      	strb	r2, [r3, #0]
	if (y1 > y0)
 80033fc:	2320      	movs	r3, #32
 80033fe:	18fb      	adds	r3, r7, r3
 8003400:	1cb9      	adds	r1, r7, #2
 8003402:	781a      	ldrb	r2, [r3, #0]
 8003404:	780b      	ldrb	r3, [r1, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d904      	bls.n	8003414 <st7565_drawline+0x154>
		ystep = 1;
 800340a:	230a      	movs	r3, #10
 800340c:	18fb      	adds	r3, r7, r3
 800340e:	2201      	movs	r2, #1
 8003410:	701a      	strb	r2, [r3, #0]
 8003412:	e003      	b.n	800341c <st7565_drawline+0x15c>
	else
		ystep = -1;
 8003414:	230a      	movs	r3, #10
 8003416:	18fb      	adds	r3, r7, r3
 8003418:	22ff      	movs	r2, #255	; 0xff
 800341a:	701a      	strb	r2, [r3, #0]
	y = y0;
 800341c:	230d      	movs	r3, #13
 800341e:	18fb      	adds	r3, r7, r3
 8003420:	1cba      	adds	r2, r7, #2
 8003422:	7812      	ldrb	r2, [r2, #0]
 8003424:	701a      	strb	r2, [r3, #0]
	for (x = x0; x <= x1; x++) {
 8003426:	230e      	movs	r3, #14
 8003428:	18fb      	adds	r3, r7, r3
 800342a:	1cfa      	adds	r2, r7, #3
 800342c:	7812      	ldrb	r2, [r2, #0]
 800342e:	701a      	strb	r2, [r3, #0]
 8003430:	e045      	b.n	80034be <st7565_drawline+0x1fe>
		if (swap == 0)
 8003432:	230f      	movs	r3, #15
 8003434:	18fb      	adds	r3, r7, r3
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10d      	bne.n	8003458 <st7565_drawline+0x198>
			st7565_setpixel(buff, x, y, color);
 800343c:	2324      	movs	r3, #36	; 0x24
 800343e:	18fb      	adds	r3, r7, r3
 8003440:	781c      	ldrb	r4, [r3, #0]
 8003442:	230d      	movs	r3, #13
 8003444:	18fb      	adds	r3, r7, r3
 8003446:	781a      	ldrb	r2, [r3, #0]
 8003448:	230e      	movs	r3, #14
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	7819      	ldrb	r1, [r3, #0]
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	0023      	movs	r3, r4
 8003452:	f7ff fdd9 	bl	8003008 <st7565_setpixel>
 8003456:	e00c      	b.n	8003472 <st7565_drawline+0x1b2>
		else
			st7565_setpixel(buff, y, x, color);
 8003458:	2324      	movs	r3, #36	; 0x24
 800345a:	18fb      	adds	r3, r7, r3
 800345c:	781c      	ldrb	r4, [r3, #0]
 800345e:	230e      	movs	r3, #14
 8003460:	18fb      	adds	r3, r7, r3
 8003462:	781a      	ldrb	r2, [r3, #0]
 8003464:	230d      	movs	r3, #13
 8003466:	18fb      	adds	r3, r7, r3
 8003468:	7819      	ldrb	r1, [r3, #0]
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	0023      	movs	r3, r4
 800346e:	f7ff fdcb 	bl	8003008 <st7565_setpixel>
		err -= (uint8_t) dy;
 8003472:	2009      	movs	r0, #9
 8003474:	183b      	adds	r3, r7, r0
 8003476:	781a      	ldrb	r2, [r3, #0]
 8003478:	230b      	movs	r3, #11
 800347a:	18fb      	adds	r3, r7, r3
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	b2da      	uxtb	r2, r3
 8003482:	183b      	adds	r3, r7, r0
 8003484:	701a      	strb	r2, [r3, #0]
		if (err < 0) {
 8003486:	183b      	adds	r3, r7, r0
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b7f      	cmp	r3, #127	; 0x7f
 800348c:	d911      	bls.n	80034b2 <st7565_drawline+0x1f2>
			y += (uint8_t) ystep;
 800348e:	230a      	movs	r3, #10
 8003490:	18fb      	adds	r3, r7, r3
 8003492:	7819      	ldrb	r1, [r3, #0]
 8003494:	220d      	movs	r2, #13
 8003496:	18bb      	adds	r3, r7, r2
 8003498:	18ba      	adds	r2, r7, r2
 800349a:	7812      	ldrb	r2, [r2, #0]
 800349c:	188a      	adds	r2, r1, r2
 800349e:	701a      	strb	r2, [r3, #0]
			err += (uint8_t) dx;
 80034a0:	183b      	adds	r3, r7, r0
 80034a2:	781a      	ldrb	r2, [r3, #0]
 80034a4:	230c      	movs	r3, #12
 80034a6:	18fb      	adds	r3, r7, r3
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	18d3      	adds	r3, r2, r3
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	183b      	adds	r3, r7, r0
 80034b0:	701a      	strb	r2, [r3, #0]
	for (x = x0; x <= x1; x++) {
 80034b2:	210e      	movs	r1, #14
 80034b4:	187b      	adds	r3, r7, r1
 80034b6:	781a      	ldrb	r2, [r3, #0]
 80034b8:	187b      	adds	r3, r7, r1
 80034ba:	3201      	adds	r2, #1
 80034bc:	701a      	strb	r2, [r3, #0]
 80034be:	230e      	movs	r3, #14
 80034c0:	18fa      	adds	r2, r7, r3
 80034c2:	1c7b      	adds	r3, r7, #1
 80034c4:	7812      	ldrb	r2, [r2, #0]
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d9b2      	bls.n	8003432 <st7565_drawline+0x172>
		}
	}
}
 80034cc:	46c0      	nop			; (mov r8, r8)
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	46bd      	mov	sp, r7
 80034d2:	b005      	add	sp, #20
 80034d4:	bd90      	pop	{r4, r7, pc}

080034d6 <st7565_drawrect>:
	}
}

// draw a rectangle
void st7565_drawrect(uint8_t *buff, uint8_t x, uint8_t y, uint8_t w, uint8_t h,
		uint8_t color) {
 80034d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034d8:	b085      	sub	sp, #20
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	000c      	movs	r4, r1
 80034e0:	0010      	movs	r0, r2
 80034e2:	0019      	movs	r1, r3
 80034e4:	1cfb      	adds	r3, r7, #3
 80034e6:	1c22      	adds	r2, r4, #0
 80034e8:	701a      	strb	r2, [r3, #0]
 80034ea:	1cbb      	adds	r3, r7, #2
 80034ec:	1c02      	adds	r2, r0, #0
 80034ee:	701a      	strb	r2, [r3, #0]
 80034f0:	1c7b      	adds	r3, r7, #1
 80034f2:	1c0a      	adds	r2, r1, #0
 80034f4:	701a      	strb	r2, [r3, #0]
// stupidest version - just pixels - but fast with internal buffer!
	uint8_t i;
	for (i = x; i < x + w; i++) {
 80034f6:	230f      	movs	r3, #15
 80034f8:	18fb      	adds	r3, r7, r3
 80034fa:	1cfa      	adds	r2, r7, #3
 80034fc:	7812      	ldrb	r2, [r2, #0]
 80034fe:	701a      	strb	r2, [r3, #0]
 8003500:	e026      	b.n	8003550 <st7565_drawrect+0x7a>
		st7565_setpixel(buff, i, y, color);
 8003502:	2624      	movs	r6, #36	; 0x24
 8003504:	2108      	movs	r1, #8
 8003506:	1873      	adds	r3, r6, r1
 8003508:	19db      	adds	r3, r3, r7
 800350a:	781c      	ldrb	r4, [r3, #0]
 800350c:	1cbb      	adds	r3, r7, #2
 800350e:	781a      	ldrb	r2, [r3, #0]
 8003510:	250f      	movs	r5, #15
 8003512:	197b      	adds	r3, r7, r5
 8003514:	7819      	ldrb	r1, [r3, #0]
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	0023      	movs	r3, r4
 800351a:	f7ff fd75 	bl	8003008 <st7565_setpixel>
		st7565_setpixel(buff, i, y + h - 1, color);
 800351e:	1cba      	adds	r2, r7, #2
 8003520:	2320      	movs	r3, #32
 8003522:	2108      	movs	r1, #8
 8003524:	185b      	adds	r3, r3, r1
 8003526:	19db      	adds	r3, r3, r7
 8003528:	7812      	ldrb	r2, [r2, #0]
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	18d3      	adds	r3, r2, r3
 800352e:	b2db      	uxtb	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b2da      	uxtb	r2, r3
 8003534:	1873      	adds	r3, r6, r1
 8003536:	19db      	adds	r3, r3, r7
 8003538:	781c      	ldrb	r4, [r3, #0]
 800353a:	197b      	adds	r3, r7, r5
 800353c:	7819      	ldrb	r1, [r3, #0]
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	0023      	movs	r3, r4
 8003542:	f7ff fd61 	bl	8003008 <st7565_setpixel>
	for (i = x; i < x + w; i++) {
 8003546:	197b      	adds	r3, r7, r5
 8003548:	781a      	ldrb	r2, [r3, #0]
 800354a:	197b      	adds	r3, r7, r5
 800354c:	3201      	adds	r2, #1
 800354e:	701a      	strb	r2, [r3, #0]
 8003550:	200f      	movs	r0, #15
 8003552:	183b      	adds	r3, r7, r0
 8003554:	781a      	ldrb	r2, [r3, #0]
 8003556:	1cfb      	adds	r3, r7, #3
 8003558:	7819      	ldrb	r1, [r3, #0]
 800355a:	1c7b      	adds	r3, r7, #1
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	18cb      	adds	r3, r1, r3
 8003560:	429a      	cmp	r2, r3
 8003562:	dbce      	blt.n	8003502 <st7565_drawrect+0x2c>
	}
	for (i = y; i < y + h; i++) {
 8003564:	183b      	adds	r3, r7, r0
 8003566:	1cba      	adds	r2, r7, #2
 8003568:	7812      	ldrb	r2, [r2, #0]
 800356a:	701a      	strb	r2, [r3, #0]
 800356c:	e024      	b.n	80035b8 <st7565_drawrect+0xe2>
		st7565_setpixel(buff, x, i, color);
 800356e:	2624      	movs	r6, #36	; 0x24
 8003570:	2308      	movs	r3, #8
 8003572:	18f2      	adds	r2, r6, r3
 8003574:	19d3      	adds	r3, r2, r7
 8003576:	781c      	ldrb	r4, [r3, #0]
 8003578:	250f      	movs	r5, #15
 800357a:	197b      	adds	r3, r7, r5
 800357c:	781a      	ldrb	r2, [r3, #0]
 800357e:	1cfb      	adds	r3, r7, #3
 8003580:	7819      	ldrb	r1, [r3, #0]
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	0023      	movs	r3, r4
 8003586:	f7ff fd3f 	bl	8003008 <st7565_setpixel>
		st7565_setpixel(buff, x + w - 1, i, color);
 800358a:	1cfa      	adds	r2, r7, #3
 800358c:	1c7b      	adds	r3, r7, #1
 800358e:	7812      	ldrb	r2, [r2, #0]
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	18d3      	adds	r3, r2, r3
 8003594:	b2db      	uxtb	r3, r3
 8003596:	3b01      	subs	r3, #1
 8003598:	b2d9      	uxtb	r1, r3
 800359a:	2308      	movs	r3, #8
 800359c:	18f3      	adds	r3, r6, r3
 800359e:	19db      	adds	r3, r3, r7
 80035a0:	781c      	ldrb	r4, [r3, #0]
 80035a2:	197b      	adds	r3, r7, r5
 80035a4:	781a      	ldrb	r2, [r3, #0]
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	0023      	movs	r3, r4
 80035aa:	f7ff fd2d 	bl	8003008 <st7565_setpixel>
	for (i = y; i < y + h; i++) {
 80035ae:	197b      	adds	r3, r7, r5
 80035b0:	781a      	ldrb	r2, [r3, #0]
 80035b2:	197b      	adds	r3, r7, r5
 80035b4:	3201      	adds	r2, #1
 80035b6:	701a      	strb	r2, [r3, #0]
 80035b8:	230f      	movs	r3, #15
 80035ba:	18fb      	adds	r3, r7, r3
 80035bc:	781a      	ldrb	r2, [r3, #0]
 80035be:	1cbb      	adds	r3, r7, #2
 80035c0:	7819      	ldrb	r1, [r3, #0]
 80035c2:	2320      	movs	r3, #32
 80035c4:	2008      	movs	r0, #8
 80035c6:	181b      	adds	r3, r3, r0
 80035c8:	19db      	adds	r3, r3, r7
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	18cb      	adds	r3, r1, r3
 80035ce:	429a      	cmp	r2, r3
 80035d0:	dbcd      	blt.n	800356e <st7565_drawrect+0x98>
	}
}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	46c0      	nop			; (mov r8, r8)
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b005      	add	sp, #20
 80035da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035de:	b0bb      	sub	sp, #236	; 0xec
 80035e0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035e2:	f001 fe8f 	bl	8005304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035e6:	f001 fa13 	bl	8004a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035ea:	f001 fb7b 	bl	8004ce4 <MX_GPIO_Init>
  MX_TIM16_Init();
 80035ee:	f001 fb4f 	bl	8004c90 <MX_TIM16_Init>
  MX_ADC_Init();
 80035f2:	f001 fa51 	bl	8004a98 <MX_ADC_Init>
  MX_SPI1_Init();
 80035f6:	f001 fb0d 	bl	8004c14 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	uint16_t adcValue = 0;
 80035fa:	23ba      	movs	r3, #186	; 0xba
 80035fc:	18fb      	adds	r3, r7, r3
 80035fe:	2200      	movs	r2, #0
 8003600:	801a      	strh	r2, [r3, #0]
	double Voltage_mV = 0;
 8003602:	2200      	movs	r2, #0
 8003604:	2300      	movs	r3, #0
 8003606:	21b0      	movs	r1, #176	; 0xb0
 8003608:	1879      	adds	r1, r7, r1
 800360a:	600a      	str	r2, [r1, #0]
 800360c:	604b      	str	r3, [r1, #4]
	double Voltage_V = 0;
 800360e:	2200      	movs	r2, #0
 8003610:	2300      	movs	r3, #0
 8003612:	21a8      	movs	r1, #168	; 0xa8
 8003614:	1879      	adds	r1, r7, r1
 8003616:	600a      	str	r2, [r1, #0]
 8003618:	604b      	str	r3, [r1, #4]
	double voltageanalog= 0;
 800361a:	2200      	movs	r2, #0
 800361c:	2300      	movs	r3, #0
 800361e:	21a0      	movs	r1, #160	; 0xa0
 8003620:	1879      	adds	r1, r7, r1
 8003622:	600a      	str	r2, [r1, #0]
 8003624:	604b      	str	r3, [r1, #4]
	//Start timer used for displaying a char on the bottom left corner each second
	HAL_TIM_Base_Start(&htim16);
 8003626:	4bd2      	ldr	r3, [pc, #840]	; (8003970 <main+0x394>)
 8003628:	0018      	movs	r0, r3
 800362a:	f003 fed7 	bl	80073dc <HAL_TIM_Base_Start>

	// initialize LCD
	st7565_init();
 800362e:	f7ff fa6b 	bl	8002b08 <st7565_init>
	st7565_backlight_enable();
 8003632:	f7ff fb17 	bl	8002c64 <st7565_backlight_enable>
		st7565_drawline(buffer, 0, 0, i, 63, 1);
		HAL_Delay(50);
		st7565_write_buffer(buffer);
	}*/
	//HAL_Delay(2000);
	st7565_clear_buffer(buffer);
 8003636:	4bcf      	ldr	r3, [pc, #828]	; (8003974 <main+0x398>)
 8003638:	0018      	movs	r0, r3
 800363a:	f7ff fbad 	bl	8002d98 <st7565_clear_buffer>
	//HAL_Delay(500);

		uint8_t poza = 0;
 800363e:	23d7      	movs	r3, #215	; 0xd7
 8003640:	18fb      	adds	r3, r7, r3
 8003642:	2200      	movs	r2, #0
 8003644:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


	 uint8_t minim = 0;
 8003646:	239f      	movs	r3, #159	; 0x9f
 8003648:	18fb      	adds	r3, r7, r3
 800364a:	2200      	movs	r2, #0
 800364c:	701a      	strb	r2, [r3, #0]
	 uint8_t maxim= 5;
 800364e:	239e      	movs	r3, #158	; 0x9e
 8003650:	18fb      	adds	r3, r7, r3
 8003652:	2205      	movs	r2, #5
 8003654:	701a      	strb	r2, [r3, #0]

	 int currentValue = 1 - checkLCD();
 8003656:	f001 fc01 	bl	8004e5c <checkLCD>
 800365a:	0003      	movs	r3, r0
 800365c:	2201      	movs	r2, #1
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	22d0      	movs	r2, #208	; 0xd0
 8003662:	18ba      	adds	r2, r7, r2
 8003664:	6013      	str	r3, [r2, #0]
	 int nextValue;
	 int buton = 0;
 8003666:	2300      	movs	r3, #0
 8003668:	2298      	movs	r2, #152	; 0x98
 800366a:	18ba      	adds	r2, r7, r2
 800366c:	6013      	str	r3, [r2, #0]
	 int8_t adcstate = 0;
 800366e:	2397      	movs	r3, #151	; 0x97
 8003670:	18fb      	adds	r3, r7, r3
 8003672:	2200      	movs	r2, #0
 8003674:	701a      	strb	r2, [r3, #0]
	 int istoric[10];
	 uint8_t indexistoric=0;
 8003676:	23cf      	movs	r3, #207	; 0xcf
 8003678:	18fb      	adds	r3, r7, r3
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]

	 int8_t indexmeniu = 0;
 800367e:	23ce      	movs	r3, #206	; 0xce
 8003680:	18fb      	adds	r3, r7, r3
 8003682:	2200      	movs	r2, #0
 8003684:	701a      	strb	r2, [r3, #0]
	 int8_t indexcase1 = 0;
 8003686:	23cd      	movs	r3, #205	; 0xcd
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	2200      	movs	r2, #0
 800368c:	701a      	strb	r2, [r3, #0]
	 uint8_t butonapasat = 0;
 800368e:	23cc      	movs	r3, #204	; 0xcc
 8003690:	18fb      	adds	r3, r7, r3
 8003692:	2200      	movs	r2, #0
 8003694:	701a      	strb	r2, [r3, #0]
	// HAL_ADCEx_Calibration_Start(&hadc);


	while (1)
	{
		HAL_ADC_Stop(&hadc);
 8003696:	4bb8      	ldr	r3, [pc, #736]	; (8003978 <main+0x39c>)
 8003698:	0018      	movs	r0, r3
 800369a:	f002 f84f 	bl	800573c <HAL_ADC_Stop>
		HAL_ADC_Start(&hadc);
 800369e:	4bb6      	ldr	r3, [pc, #728]	; (8003978 <main+0x39c>)
 80036a0:	0018      	movs	r0, r3
 80036a2:	f001 fff7 	bl	8005694 <HAL_ADC_Start>
		nextValue = checkLCD();
 80036a6:	f001 fbd9 	bl	8004e5c <checkLCD>
 80036aa:	0003      	movs	r3, r0
 80036ac:	2490      	movs	r4, #144	; 0x90
 80036ae:	193a      	adds	r2, r7, r4
 80036b0:	6013      	str	r3, [r2, #0]
		st7565_clear_buffer(buffer);
 80036b2:	4bb0      	ldr	r3, [pc, #704]	; (8003974 <main+0x398>)
 80036b4:	0018      	movs	r0, r3
 80036b6:	f7ff fb6f 	bl	8002d98 <st7565_clear_buffer>


		if (nextValue == 0 && currentValue != nextValue)//dezactivare display si activare bec
 80036ba:	0021      	movs	r1, r4
 80036bc:	187b      	adds	r3, r7, r1
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d113      	bne.n	80036ec <main+0x110>
 80036c4:	23d0      	movs	r3, #208	; 0xd0
 80036c6:	18fb      	adds	r3, r7, r3
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	187b      	adds	r3, r7, r1
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d00c      	beq.n	80036ec <main+0x110>
		{
			st7565_clear_screen();
 80036d2:	f7ff fb05 	bl	8002ce0 <st7565_clear_screen>
			st7565_backlight_disable();
 80036d6:	f7ff fad2 	bl	8002c7e <st7565_backlight_disable>
			initA5GPIO();
 80036da:	f001 fbd1 	bl	8004e80 <initA5GPIO>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80036de:	2390      	movs	r3, #144	; 0x90
 80036e0:	05db      	lsls	r3, r3, #23
 80036e2:	2201      	movs	r2, #1
 80036e4:	2120      	movs	r1, #32
 80036e6:	0018      	movs	r0, r3
 80036e8:	f002 fda5 	bl	8006236 <HAL_GPIO_WritePin>
		}

		if (nextValue == 1 && currentValue != nextValue) //dezactivare bec si reinitializare SPI
 80036ec:	2190      	movs	r1, #144	; 0x90
 80036ee:	187b      	adds	r3, r7, r1
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d115      	bne.n	8003722 <main+0x146>
 80036f6:	23d0      	movs	r3, #208	; 0xd0
 80036f8:	18fb      	adds	r3, r7, r3
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	187b      	adds	r3, r7, r1
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d00e      	beq.n	8003722 <main+0x146>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8003704:	2390      	movs	r3, #144	; 0x90
 8003706:	05db      	lsls	r3, r3, #23
 8003708:	2200      	movs	r2, #0
 800370a:	2120      	movs	r1, #32
 800370c:	0018      	movs	r0, r3
 800370e:	f002 fd92 	bl	8006236 <HAL_GPIO_WritePin>
			initA5SPI();
 8003712:	f001 fbd6 	bl	8004ec2 <initA5SPI>
			MX_SPI1_Init();
 8003716:	f001 fa7d 	bl	8004c14 <MX_SPI1_Init>
			st7565_init();
 800371a:	f7ff f9f5 	bl	8002b08 <st7565_init>
			st7565_backlight_enable();
 800371e:	f7ff faa1 	bl	8002c64 <st7565_backlight_enable>
		}
		currentValue = nextValue;
 8003722:	2390      	movs	r3, #144	; 0x90
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	22d0      	movs	r2, #208	; 0xd0
 800372a:	18ba      	adds	r2, r7, r2
 800372c:	6013      	str	r3, [r2, #0]
		ADC_Select_CH0(1);
 800372e:	2001      	movs	r0, #1
 8003730:	f001 fa20 	bl	8004b74 <ADC_Select_CH0>

		HAL_ADC_Start(&hadc);
 8003734:	4b90      	ldr	r3, [pc, #576]	; (8003978 <main+0x39c>)
 8003736:	0018      	movs	r0, r3
 8003738:	f001 ffac 	bl	8005694 <HAL_ADC_Start>
						HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800373c:	2301      	movs	r3, #1
 800373e:	425a      	negs	r2, r3
 8003740:	4b8d      	ldr	r3, [pc, #564]	; (8003978 <main+0x39c>)
 8003742:	0011      	movs	r1, r2
 8003744:	0018      	movs	r0, r3
 8003746:	f002 f839 	bl	80057bc <HAL_ADC_PollForConversion>
						uint16_t joystickinpudt = HAL_ADC_GetValue(&hadc);
 800374a:	4b8b      	ldr	r3, [pc, #556]	; (8003978 <main+0x39c>)
 800374c:	0018      	movs	r0, r3
 800374e:	f002 f8cd 	bl	80058ec <HAL_ADC_GetValue>
 8003752:	0002      	movs	r2, r0
 8003754:	238e      	movs	r3, #142	; 0x8e
 8003756:	18fb      	adds	r3, r7, r3
 8003758:	801a      	strh	r2, [r3, #0]
						ADC_Select_CH0(ADC_RANK_NONE);
 800375a:	4b88      	ldr	r3, [pc, #544]	; (800397c <main+0x3a0>)
 800375c:	0018      	movs	r0, r3
 800375e:	f001 fa09 	bl	8004b74 <ADC_Select_CH0>

		switch(indexmeniu)
 8003762:	23ce      	movs	r3, #206	; 0xce
 8003764:	18fb      	adds	r3, r7, r3
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	b25b      	sxtb	r3, r3
 800376a:	2b06      	cmp	r3, #6
 800376c:	d901      	bls.n	8003772 <main+0x196>
 800376e:	f001 f927 	bl	80049c0 <main+0x13e4>
 8003772:	009a      	lsls	r2, r3, #2
 8003774:	4b82      	ldr	r3, [pc, #520]	; (8003980 <main+0x3a4>)
 8003776:	18d3      	adds	r3, r2, r3
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	469f      	mov	pc, r3

			case 0:
			{


				ADC_Select_CH0(1);
 800377c:	2001      	movs	r0, #1
 800377e:	f001 f9f9 	bl	8004b74 <ADC_Select_CH0>
				HAL_ADC_Start(&hadc);
 8003782:	4b7d      	ldr	r3, [pc, #500]	; (8003978 <main+0x39c>)
 8003784:	0018      	movs	r0, r3
 8003786:	f001 ff85 	bl	8005694 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800378a:	2301      	movs	r3, #1
 800378c:	425a      	negs	r2, r3
 800378e:	4b7a      	ldr	r3, [pc, #488]	; (8003978 <main+0x39c>)
 8003790:	0011      	movs	r1, r2
 8003792:	0018      	movs	r0, r3
 8003794:	f002 f812 	bl	80057bc <HAL_ADC_PollForConversion>
				uint16_t joystickinput = HAL_ADC_GetValue(&hadc);
 8003798:	4b77      	ldr	r3, [pc, #476]	; (8003978 <main+0x39c>)
 800379a:	0018      	movs	r0, r3
 800379c:	f002 f8a6 	bl	80058ec <HAL_ADC_GetValue>
 80037a0:	0002      	movs	r2, r0
 80037a2:	2366      	movs	r3, #102	; 0x66
 80037a4:	18fb      	adds	r3, r7, r3
 80037a6:	801a      	strh	r2, [r3, #0]

				for(uint8_t i = 0; i < ItemiMeniu; i++ )
 80037a8:	23cb      	movs	r3, #203	; 0xcb
 80037aa:	18fb      	adds	r3, r7, r3
 80037ac:	2200      	movs	r2, #0
 80037ae:	701a      	strb	r2, [r3, #0]
 80037b0:	e013      	b.n	80037da <main+0x1fe>
					{
					st7565_drawstring(buffer, 12, i,DenumiriMeniu[i]);
 80037b2:	20cb      	movs	r0, #203	; 0xcb
 80037b4:	183b      	adds	r3, r7, r0
 80037b6:	781a      	ldrb	r2, [r3, #0]
 80037b8:	4b72      	ldr	r3, [pc, #456]	; (8003984 <main+0x3a8>)
 80037ba:	0092      	lsls	r2, r2, #2
 80037bc:	58d1      	ldr	r1, [r2, r3]
 80037be:	0004      	movs	r4, r0
 80037c0:	183b      	adds	r3, r7, r0
 80037c2:	781a      	ldrb	r2, [r3, #0]
 80037c4:	486b      	ldr	r0, [pc, #428]	; (8003974 <main+0x398>)
 80037c6:	000b      	movs	r3, r1
 80037c8:	210c      	movs	r1, #12
 80037ca:	f7ff fcf8 	bl	80031be <st7565_drawstring>
				for(uint8_t i = 0; i < ItemiMeniu; i++ )
 80037ce:	0020      	movs	r0, r4
 80037d0:	183b      	adds	r3, r7, r0
 80037d2:	781a      	ldrb	r2, [r3, #0]
 80037d4:	183b      	adds	r3, r7, r0
 80037d6:	3201      	adds	r2, #1
 80037d8:	701a      	strb	r2, [r3, #0]
 80037da:	23cb      	movs	r3, #203	; 0xcb
 80037dc:	18fb      	adds	r3, r7, r3
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b05      	cmp	r3, #5
 80037e2:	d9e6      	bls.n	80037b2 <main+0x1d6>
					}
				st7565_drawstring(buffer, 113, indexcase1,"<-");
 80037e4:	24cd      	movs	r4, #205	; 0xcd
 80037e6:	193b      	adds	r3, r7, r4
 80037e8:	781a      	ldrb	r2, [r3, #0]
 80037ea:	4b67      	ldr	r3, [pc, #412]	; (8003988 <main+0x3ac>)
 80037ec:	4861      	ldr	r0, [pc, #388]	; (8003974 <main+0x398>)
 80037ee:	2171      	movs	r1, #113	; 0x71
 80037f0:	f7ff fce5 	bl	80031be <st7565_drawstring>
				st7565_drawstring(buffer, 0, indexcase1,"->");
 80037f4:	193b      	adds	r3, r7, r4
 80037f6:	781a      	ldrb	r2, [r3, #0]
 80037f8:	4b64      	ldr	r3, [pc, #400]	; (800398c <main+0x3b0>)
 80037fa:	485e      	ldr	r0, [pc, #376]	; (8003974 <main+0x398>)
 80037fc:	2100      	movs	r1, #0
 80037fe:	f7ff fcde 	bl	80031be <st7565_drawstring>
				st7565_write_buffer(buffer);
 8003802:	4b5c      	ldr	r3, [pc, #368]	; (8003974 <main+0x398>)
 8003804:	0018      	movs	r0, r3
 8003806:	f7ff f8f5 	bl	80029f4 <st7565_write_buffer>

				if(joystickinput>350 && joystickinput<630)
 800380a:	2166      	movs	r1, #102	; 0x66
 800380c:	187b      	adds	r3, r7, r1
 800380e:	881a      	ldrh	r2, [r3, #0]
 8003810:	23af      	movs	r3, #175	; 0xaf
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	429a      	cmp	r2, r3
 8003816:	d928      	bls.n	800386a <main+0x28e>
 8003818:	187b      	adds	r3, r7, r1
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	4a5c      	ldr	r2, [pc, #368]	; (8003990 <main+0x3b4>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d823      	bhi.n	800386a <main+0x28e>
				{
					if(indexcase1==5)
 8003822:	193b      	adds	r3, r7, r4
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	b25b      	sxtb	r3, r3
 8003828:	2b05      	cmp	r3, #5
 800382a:	d102      	bne.n	8003832 <main+0x256>
						indexcase1 = -1;
 800382c:	193b      	adds	r3, r7, r4
 800382e:	22ff      	movs	r2, #255	; 0xff
 8003830:	701a      	strb	r2, [r3, #0]
					indexcase1++;
 8003832:	21cd      	movs	r1, #205	; 0xcd
 8003834:	187b      	adds	r3, r7, r1
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	b25b      	sxtb	r3, r3
 800383a:	b2db      	uxtb	r3, r3
 800383c:	3301      	adds	r3, #1
 800383e:	b2da      	uxtb	r2, r3
 8003840:	187b      	adds	r3, r7, r1
 8003842:	701a      	strb	r2, [r3, #0]
					st7565_drawstring(buffer, 113, indexcase1,"<-");
 8003844:	000c      	movs	r4, r1
 8003846:	187b      	adds	r3, r7, r1
 8003848:	781a      	ldrb	r2, [r3, #0]
 800384a:	4b4f      	ldr	r3, [pc, #316]	; (8003988 <main+0x3ac>)
 800384c:	4849      	ldr	r0, [pc, #292]	; (8003974 <main+0x398>)
 800384e:	2171      	movs	r1, #113	; 0x71
 8003850:	f7ff fcb5 	bl	80031be <st7565_drawstring>
					st7565_drawstring(buffer, 0, indexcase1,"->");
 8003854:	193b      	adds	r3, r7, r4
 8003856:	781a      	ldrb	r2, [r3, #0]
 8003858:	4b4c      	ldr	r3, [pc, #304]	; (800398c <main+0x3b0>)
 800385a:	4846      	ldr	r0, [pc, #280]	; (8003974 <main+0x398>)
 800385c:	2100      	movs	r1, #0
 800385e:	f7ff fcae 	bl	80031be <st7565_drawstring>
					st7565_write_buffer(buffer);
 8003862:	4b44      	ldr	r3, [pc, #272]	; (8003974 <main+0x398>)
 8003864:	0018      	movs	r0, r3
 8003866:	f7ff f8c5 	bl	80029f4 <st7565_write_buffer>

				}
				if (joystickinput>100&&joystickinput<350)
 800386a:	2266      	movs	r2, #102	; 0x66
 800386c:	18bb      	adds	r3, r7, r2
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	2b64      	cmp	r3, #100	; 0x64
 8003872:	d95a      	bls.n	800392a <main+0x34e>
 8003874:	18bb      	adds	r3, r7, r2
 8003876:	881a      	ldrh	r2, [r3, #0]
 8003878:	23af      	movs	r3, #175	; 0xaf
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	429a      	cmp	r2, r3
 800387e:	d254      	bcs.n	800392a <main+0x34e>
					{//indexmeniu++;
						if(indexcase1 == 0)
 8003880:	23cd      	movs	r3, #205	; 0xcd
 8003882:	18fb      	adds	r3, r7, r3
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	b25b      	sxtb	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d109      	bne.n	80038a0 <main+0x2c4>
							indexmeniu++;
 800388c:	21ce      	movs	r1, #206	; 0xce
 800388e:	187b      	adds	r3, r7, r1
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	b25b      	sxtb	r3, r3
 8003894:	b2db      	uxtb	r3, r3
 8003896:	3301      	adds	r3, #1
 8003898:	b2da      	uxtb	r2, r3
 800389a:	187b      	adds	r3, r7, r1
 800389c:	701a      	strb	r2, [r3, #0]
 800389e:	e044      	b.n	800392a <main+0x34e>
						else if (indexcase1 == 1)
 80038a0:	23cd      	movs	r3, #205	; 0xcd
 80038a2:	18fb      	adds	r3, r7, r3
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	b25b      	sxtb	r3, r3
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d107      	bne.n	80038bc <main+0x2e0>
							indexmeniu+=2;
 80038ac:	21ce      	movs	r1, #206	; 0xce
 80038ae:	187b      	adds	r3, r7, r1
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	3302      	adds	r3, #2
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	187b      	adds	r3, r7, r1
 80038b8:	701a      	strb	r2, [r3, #0]
 80038ba:	e036      	b.n	800392a <main+0x34e>
						else if (indexcase1 == 2)
 80038bc:	23cd      	movs	r3, #205	; 0xcd
 80038be:	18fb      	adds	r3, r7, r3
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	b25b      	sxtb	r3, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d107      	bne.n	80038d8 <main+0x2fc>
							indexmeniu+=3;
 80038c8:	21ce      	movs	r1, #206	; 0xce
 80038ca:	187b      	adds	r3, r7, r1
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	3303      	adds	r3, #3
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	187b      	adds	r3, r7, r1
 80038d4:	701a      	strb	r2, [r3, #0]
 80038d6:	e028      	b.n	800392a <main+0x34e>
						else if (indexcase1 == 3)
 80038d8:	23cd      	movs	r3, #205	; 0xcd
 80038da:	18fb      	adds	r3, r7, r3
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	b25b      	sxtb	r3, r3
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d107      	bne.n	80038f4 <main+0x318>
							indexmeniu+=4;
 80038e4:	21ce      	movs	r1, #206	; 0xce
 80038e6:	187b      	adds	r3, r7, r1
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	3304      	adds	r3, #4
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	187b      	adds	r3, r7, r1
 80038f0:	701a      	strb	r2, [r3, #0]
 80038f2:	e01a      	b.n	800392a <main+0x34e>
						else if (indexcase1 == 4)
 80038f4:	23cd      	movs	r3, #205	; 0xcd
 80038f6:	18fb      	adds	r3, r7, r3
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	b25b      	sxtb	r3, r3
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d107      	bne.n	8003910 <main+0x334>
							indexmeniu+=5;
 8003900:	21ce      	movs	r1, #206	; 0xce
 8003902:	187b      	adds	r3, r7, r1
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	3305      	adds	r3, #5
 8003908:	b2da      	uxtb	r2, r3
 800390a:	187b      	adds	r3, r7, r1
 800390c:	701a      	strb	r2, [r3, #0]
 800390e:	e00c      	b.n	800392a <main+0x34e>
						else if(indexcase1 == 5)
 8003910:	23cd      	movs	r3, #205	; 0xcd
 8003912:	18fb      	adds	r3, r7, r3
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	b25b      	sxtb	r3, r3
 8003918:	2b05      	cmp	r3, #5
 800391a:	d106      	bne.n	800392a <main+0x34e>
							indexmeniu+=6;
 800391c:	21ce      	movs	r1, #206	; 0xce
 800391e:	187b      	adds	r3, r7, r1
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	3306      	adds	r3, #6
 8003924:	b2da      	uxtb	r2, r3
 8003926:	187b      	adds	r3, r7, r1
 8003928:	701a      	strb	r2, [r3, #0]

				}
				HAL_Delay(200);
 800392a:	20c8      	movs	r0, #200	; 0xc8
 800392c:	f001 fd4e 	bl	80053cc <HAL_Delay>

				break;
 8003930:	f001 f846 	bl	80049c0 <main+0x13e4>
			}
			case 1:	//digital
			{

				if((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 )&&(butonapasat == 1))
 8003934:	2380      	movs	r3, #128	; 0x80
 8003936:	019b      	lsls	r3, r3, #6
 8003938:	4a16      	ldr	r2, [pc, #88]	; (8003994 <main+0x3b8>)
 800393a:	0019      	movs	r1, r3
 800393c:	0010      	movs	r0, r2
 800393e:	f002 fc5d 	bl	80061fc <HAL_GPIO_ReadPin>
 8003942:	1e03      	subs	r3, r0, #0
 8003944:	d128      	bne.n	8003998 <main+0x3bc>
 8003946:	23cc      	movs	r3, #204	; 0xcc
 8003948:	18fb      	adds	r3, r7, r3
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d123      	bne.n	8003998 <main+0x3bc>
					{
					while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 )
 8003950:	46c0      	nop			; (mov r8, r8)
 8003952:	2380      	movs	r3, #128	; 0x80
 8003954:	019b      	lsls	r3, r3, #6
 8003956:	4a0f      	ldr	r2, [pc, #60]	; (8003994 <main+0x3b8>)
 8003958:	0019      	movs	r1, r3
 800395a:	0010      	movs	r0, r2
 800395c:	f002 fc4e 	bl	80061fc <HAL_GPIO_ReadPin>
 8003960:	1e03      	subs	r3, r0, #0
 8003962:	d0f6      	beq.n	8003952 <main+0x376>
					{
					}
					butonapasat = 0;
 8003964:	23cc      	movs	r3, #204	; 0xcc
 8003966:	18fb      	adds	r3, r7, r3
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]
 800396c:	e030      	b.n	80039d0 <main+0x3f4>
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	20002acc 	.word	0x20002acc
 8003974:	20000000 	.word	0x20000000
 8003978:	20002a28 	.word	0x20002a28
 800397c:	00001001 	.word	0x00001001
 8003980:	0800ad64 	.word	0x0800ad64
 8003984:	20002808 	.word	0x20002808
 8003988:	0800a670 	.word	0x0800a670
 800398c:	0800a674 	.word	0x0800a674
 8003990:	00000275 	.word	0x00000275
 8003994:	48000800 	.word	0x48000800
					}

				else if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 )&&(butonapasat == 0))
 8003998:	2380      	movs	r3, #128	; 0x80
 800399a:	019b      	lsls	r3, r3, #6
 800399c:	4ad0      	ldr	r2, [pc, #832]	; (8003ce0 <main+0x704>)
 800399e:	0019      	movs	r1, r3
 80039a0:	0010      	movs	r0, r2
 80039a2:	f002 fc2b 	bl	80061fc <HAL_GPIO_ReadPin>
 80039a6:	1e03      	subs	r3, r0, #0
 80039a8:	d112      	bne.n	80039d0 <main+0x3f4>
 80039aa:	23cc      	movs	r3, #204	; 0xcc
 80039ac:	18fb      	adds	r3, r7, r3
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10d      	bne.n	80039d0 <main+0x3f4>
				{
					while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 )
 80039b4:	46c0      	nop			; (mov r8, r8)
 80039b6:	2380      	movs	r3, #128	; 0x80
 80039b8:	019b      	lsls	r3, r3, #6
 80039ba:	4ac9      	ldr	r2, [pc, #804]	; (8003ce0 <main+0x704>)
 80039bc:	0019      	movs	r1, r3
 80039be:	0010      	movs	r0, r2
 80039c0:	f002 fc1c 	bl	80061fc <HAL_GPIO_ReadPin>
 80039c4:	1e03      	subs	r3, r0, #0
 80039c6:	d0f6      	beq.n	80039b6 <main+0x3da>
					{
					}
					butonapasat = 1;
 80039c8:	23cc      	movs	r3, #204	; 0xcc
 80039ca:	18fb      	adds	r3, r7, r3
 80039cc:	2201      	movs	r2, #1
 80039ce:	701a      	strb	r2, [r3, #0]
				}
				if(butonapasat == 0)
 80039d0:	23cc      	movs	r3, #204	; 0xcc
 80039d2:	18fb      	adds	r3, r7, r3
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d000      	beq.n	80039dc <main+0x400>
 80039da:	e224      	b.n	8003e26 <main+0x84a>
				{
				ADC_Select_CH0(ADC_RANK_NONE);
 80039dc:	4bc1      	ldr	r3, [pc, #772]	; (8003ce4 <main+0x708>)
 80039de:	0018      	movs	r0, r3
 80039e0:	f001 f8c8 	bl	8004b74 <ADC_Select_CH0>
				ADC_Select_CH13(1);
 80039e4:	2001      	movs	r0, #1
 80039e6:	f001 f89d 	bl	8004b24 <ADC_Select_CH13>
				HAL_ADC_Start(&hadc);
 80039ea:	4bbf      	ldr	r3, [pc, #764]	; (8003ce8 <main+0x70c>)
 80039ec:	0018      	movs	r0, r3
 80039ee:	f001 fe51 	bl	8005694 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80039f2:	2301      	movs	r3, #1
 80039f4:	425a      	negs	r2, r3
 80039f6:	4bbc      	ldr	r3, [pc, #752]	; (8003ce8 <main+0x70c>)
 80039f8:	0011      	movs	r1, r2
 80039fa:	0018      	movs	r0, r3
 80039fc:	f001 fede 	bl	80057bc <HAL_ADC_PollForConversion>

				adcValue = HAL_ADC_GetValue(&hadc);
 8003a00:	4bb9      	ldr	r3, [pc, #740]	; (8003ce8 <main+0x70c>)
 8003a02:	0018      	movs	r0, r3
 8003a04:	f001 ff72 	bl	80058ec <HAL_ADC_GetValue>
 8003a08:	0002      	movs	r2, r0
 8003a0a:	24ba      	movs	r4, #186	; 0xba
 8003a0c:	193b      	adds	r3, r7, r4
 8003a0e:	801a      	strh	r2, [r3, #0]

				Voltage_mV = adcValue *3.22;
 8003a10:	193b      	adds	r3, r7, r4
 8003a12:	881b      	ldrh	r3, [r3, #0]
 8003a14:	0018      	movs	r0, r3
 8003a16:	f7fe ff31 	bl	800287c <__aeabi_i2d>
 8003a1a:	4ab4      	ldr	r2, [pc, #720]	; (8003cec <main+0x710>)
 8003a1c:	4bb4      	ldr	r3, [pc, #720]	; (8003cf0 <main+0x714>)
 8003a1e:	f7fe f8db 	bl	8001bd8 <__aeabi_dmul>
 8003a22:	0002      	movs	r2, r0
 8003a24:	000b      	movs	r3, r1
 8003a26:	21b0      	movs	r1, #176	; 0xb0
 8003a28:	1878      	adds	r0, r7, r1
 8003a2a:	6002      	str	r2, [r0, #0]
 8003a2c:	6043      	str	r3, [r0, #4]
				Voltage_V = (Voltage_mV / 1000);
 8003a2e:	2200      	movs	r2, #0
 8003a30:	4bb0      	ldr	r3, [pc, #704]	; (8003cf4 <main+0x718>)
 8003a32:	1879      	adds	r1, r7, r1
 8003a34:	6808      	ldr	r0, [r1, #0]
 8003a36:	6849      	ldr	r1, [r1, #4]
 8003a38:	f7fd fccc 	bl	80013d4 <__aeabi_ddiv>
 8003a3c:	0002      	movs	r2, r0
 8003a3e:	000b      	movs	r3, r1
 8003a40:	21a8      	movs	r1, #168	; 0xa8
 8003a42:	1879      	adds	r1, r7, r1
 8003a44:	600a      	str	r2, [r1, #0]
 8003a46:	604b      	str	r3, [r1, #4]
				if(indexistoric<7)
 8003a48:	20cf      	movs	r0, #207	; 0xcf
 8003a4a:	183b      	adds	r3, r7, r0
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	2b06      	cmp	r3, #6
 8003a50:	d80d      	bhi.n	8003a6e <main+0x492>
				{
					istoric[indexistoric]=adcValue;
 8003a52:	183b      	adds	r3, r7, r0
 8003a54:	781a      	ldrb	r2, [r3, #0]
 8003a56:	193b      	adds	r3, r7, r4
 8003a58:	8819      	ldrh	r1, [r3, #0]
 8003a5a:	233c      	movs	r3, #60	; 0x3c
 8003a5c:	18fb      	adds	r3, r7, r3
 8003a5e:	0092      	lsls	r2, r2, #2
 8003a60:	50d1      	str	r1, [r2, r3]
					indexistoric++;
 8003a62:	183b      	adds	r3, r7, r0
 8003a64:	781a      	ldrb	r2, [r3, #0]
 8003a66:	183b      	adds	r3, r7, r0
 8003a68:	3201      	adds	r2, #1
 8003a6a:	701a      	strb	r2, [r3, #0]
 8003a6c:	e021      	b.n	8003ab2 <main+0x4d6>
				}
				else
				{
					for(int cnt=0;cnt<6;cnt++)
 8003a6e:	2300      	movs	r3, #0
 8003a70:	22c4      	movs	r2, #196	; 0xc4
 8003a72:	18ba      	adds	r2, r7, r2
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	e011      	b.n	8003a9c <main+0x4c0>
					{
						istoric[cnt]=istoric[cnt+1];
 8003a78:	20c4      	movs	r0, #196	; 0xc4
 8003a7a:	183b      	adds	r3, r7, r0
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	243c      	movs	r4, #60	; 0x3c
 8003a82:	193b      	adds	r3, r7, r4
 8003a84:	0092      	lsls	r2, r2, #2
 8003a86:	58d1      	ldr	r1, [r2, r3]
 8003a88:	193b      	adds	r3, r7, r4
 8003a8a:	183a      	adds	r2, r7, r0
 8003a8c:	6812      	ldr	r2, [r2, #0]
 8003a8e:	0092      	lsls	r2, r2, #2
 8003a90:	50d1      	str	r1, [r2, r3]
					for(int cnt=0;cnt<6;cnt++)
 8003a92:	183b      	adds	r3, r7, r0
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	3301      	adds	r3, #1
 8003a98:	183a      	adds	r2, r7, r0
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	23c4      	movs	r3, #196	; 0xc4
 8003a9e:	18fb      	adds	r3, r7, r3
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b05      	cmp	r3, #5
 8003aa4:	dde8      	ble.n	8003a78 <main+0x49c>
					}
					istoric[6]=adcValue;
 8003aa6:	23ba      	movs	r3, #186	; 0xba
 8003aa8:	18fb      	adds	r3, r7, r3
 8003aaa:	881a      	ldrh	r2, [r3, #0]
 8003aac:	233c      	movs	r3, #60	; 0x3c
 8003aae:	18fb      	adds	r3, r7, r3
 8003ab0:	619a      	str	r2, [r3, #24]
				}
				if (Voltage_V <= minim) poza = 0;
 8003ab2:	239f      	movs	r3, #159	; 0x9f
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	0018      	movs	r0, r3
 8003aba:	f7fe fedf 	bl	800287c <__aeabi_i2d>
 8003abe:	0002      	movs	r2, r0
 8003ac0:	000b      	movs	r3, r1
 8003ac2:	21a8      	movs	r1, #168	; 0xa8
 8003ac4:	1879      	adds	r1, r7, r1
 8003ac6:	6808      	ldr	r0, [r1, #0]
 8003ac8:	6849      	ldr	r1, [r1, #4]
 8003aca:	f7fc fccd 	bl	8000468 <__aeabi_dcmple>
 8003ace:	1e03      	subs	r3, r0, #0
 8003ad0:	d004      	beq.n	8003adc <main+0x500>
 8003ad2:	23d7      	movs	r3, #215	; 0xd7
 8003ad4:	18fb      	adds	r3, r7, r3
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	701a      	strb	r2, [r3, #0]
 8003ada:	e09c      	b.n	8003c16 <main+0x63a>
				else if (Voltage_V > maxim) poza = 7;
 8003adc:	239e      	movs	r3, #158	; 0x9e
 8003ade:	18fb      	adds	r3, r7, r3
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f7fe feca 	bl	800287c <__aeabi_i2d>
 8003ae8:	0002      	movs	r2, r0
 8003aea:	000b      	movs	r3, r1
 8003aec:	21a8      	movs	r1, #168	; 0xa8
 8003aee:	1879      	adds	r1, r7, r1
 8003af0:	6808      	ldr	r0, [r1, #0]
 8003af2:	6849      	ldr	r1, [r1, #4]
 8003af4:	f7fc fcc2 	bl	800047c <__aeabi_dcmpgt>
 8003af8:	1e03      	subs	r3, r0, #0
 8003afa:	d004      	beq.n	8003b06 <main+0x52a>
 8003afc:	23d7      	movs	r3, #215	; 0xd7
 8003afe:	18fb      	adds	r3, r7, r3
 8003b00:	2207      	movs	r2, #7
 8003b02:	701a      	strb	r2, [r3, #0]
 8003b04:	e087      	b.n	8003c16 <main+0x63a>
				else if (Voltage_V < 1) poza = 1;
 8003b06:	2200      	movs	r2, #0
 8003b08:	4b7b      	ldr	r3, [pc, #492]	; (8003cf8 <main+0x71c>)
 8003b0a:	21a8      	movs	r1, #168	; 0xa8
 8003b0c:	1879      	adds	r1, r7, r1
 8003b0e:	6808      	ldr	r0, [r1, #0]
 8003b10:	6849      	ldr	r1, [r1, #4]
 8003b12:	f7fc fc9f 	bl	8000454 <__aeabi_dcmplt>
 8003b16:	1e03      	subs	r3, r0, #0
 8003b18:	d004      	beq.n	8003b24 <main+0x548>
 8003b1a:	23d7      	movs	r3, #215	; 0xd7
 8003b1c:	18fb      	adds	r3, r7, r3
 8003b1e:	2201      	movs	r2, #1
 8003b20:	701a      	strb	r2, [r3, #0]
 8003b22:	e078      	b.n	8003c16 <main+0x63a>
				else if (Voltage_V < 2 && Voltage_V >= 1) poza = 2;
 8003b24:	2200      	movs	r2, #0
 8003b26:	2380      	movs	r3, #128	; 0x80
 8003b28:	05db      	lsls	r3, r3, #23
 8003b2a:	24a8      	movs	r4, #168	; 0xa8
 8003b2c:	1939      	adds	r1, r7, r4
 8003b2e:	6808      	ldr	r0, [r1, #0]
 8003b30:	6849      	ldr	r1, [r1, #4]
 8003b32:	f7fc fc8f 	bl	8000454 <__aeabi_dcmplt>
 8003b36:	1e03      	subs	r3, r0, #0
 8003b38:	d00d      	beq.n	8003b56 <main+0x57a>
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	4b6e      	ldr	r3, [pc, #440]	; (8003cf8 <main+0x71c>)
 8003b3e:	1939      	adds	r1, r7, r4
 8003b40:	6808      	ldr	r0, [r1, #0]
 8003b42:	6849      	ldr	r1, [r1, #4]
 8003b44:	f7fc fca4 	bl	8000490 <__aeabi_dcmpge>
 8003b48:	1e03      	subs	r3, r0, #0
 8003b4a:	d004      	beq.n	8003b56 <main+0x57a>
 8003b4c:	23d7      	movs	r3, #215	; 0xd7
 8003b4e:	18fb      	adds	r3, r7, r3
 8003b50:	2202      	movs	r2, #2
 8003b52:	701a      	strb	r2, [r3, #0]
 8003b54:	e05f      	b.n	8003c16 <main+0x63a>
				else if (Voltage_V < 3 && Voltage_V >= 2) poza = 3;
 8003b56:	2200      	movs	r2, #0
 8003b58:	4b68      	ldr	r3, [pc, #416]	; (8003cfc <main+0x720>)
 8003b5a:	24a8      	movs	r4, #168	; 0xa8
 8003b5c:	1939      	adds	r1, r7, r4
 8003b5e:	6808      	ldr	r0, [r1, #0]
 8003b60:	6849      	ldr	r1, [r1, #4]
 8003b62:	f7fc fc77 	bl	8000454 <__aeabi_dcmplt>
 8003b66:	1e03      	subs	r3, r0, #0
 8003b68:	d00e      	beq.n	8003b88 <main+0x5ac>
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	2380      	movs	r3, #128	; 0x80
 8003b6e:	05db      	lsls	r3, r3, #23
 8003b70:	1939      	adds	r1, r7, r4
 8003b72:	6808      	ldr	r0, [r1, #0]
 8003b74:	6849      	ldr	r1, [r1, #4]
 8003b76:	f7fc fc8b 	bl	8000490 <__aeabi_dcmpge>
 8003b7a:	1e03      	subs	r3, r0, #0
 8003b7c:	d004      	beq.n	8003b88 <main+0x5ac>
 8003b7e:	23d7      	movs	r3, #215	; 0xd7
 8003b80:	18fb      	adds	r3, r7, r3
 8003b82:	2203      	movs	r2, #3
 8003b84:	701a      	strb	r2, [r3, #0]
 8003b86:	e046      	b.n	8003c16 <main+0x63a>
				else if (Voltage_V < 4 && Voltage_V >= 3) poza = 4;
 8003b88:	2200      	movs	r2, #0
 8003b8a:	4b5d      	ldr	r3, [pc, #372]	; (8003d00 <main+0x724>)
 8003b8c:	24a8      	movs	r4, #168	; 0xa8
 8003b8e:	1939      	adds	r1, r7, r4
 8003b90:	6808      	ldr	r0, [r1, #0]
 8003b92:	6849      	ldr	r1, [r1, #4]
 8003b94:	f7fc fc5e 	bl	8000454 <__aeabi_dcmplt>
 8003b98:	1e03      	subs	r3, r0, #0
 8003b9a:	d00d      	beq.n	8003bb8 <main+0x5dc>
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	4b57      	ldr	r3, [pc, #348]	; (8003cfc <main+0x720>)
 8003ba0:	1939      	adds	r1, r7, r4
 8003ba2:	6808      	ldr	r0, [r1, #0]
 8003ba4:	6849      	ldr	r1, [r1, #4]
 8003ba6:	f7fc fc73 	bl	8000490 <__aeabi_dcmpge>
 8003baa:	1e03      	subs	r3, r0, #0
 8003bac:	d004      	beq.n	8003bb8 <main+0x5dc>
 8003bae:	23d7      	movs	r3, #215	; 0xd7
 8003bb0:	18fb      	adds	r3, r7, r3
 8003bb2:	2204      	movs	r2, #4
 8003bb4:	701a      	strb	r2, [r3, #0]
 8003bb6:	e02e      	b.n	8003c16 <main+0x63a>
				else if (Voltage_V < 4.5 && Voltage_V >= 4) poza = 5;
 8003bb8:	2200      	movs	r2, #0
 8003bba:	4b52      	ldr	r3, [pc, #328]	; (8003d04 <main+0x728>)
 8003bbc:	24a8      	movs	r4, #168	; 0xa8
 8003bbe:	1939      	adds	r1, r7, r4
 8003bc0:	6808      	ldr	r0, [r1, #0]
 8003bc2:	6849      	ldr	r1, [r1, #4]
 8003bc4:	f7fc fc46 	bl	8000454 <__aeabi_dcmplt>
 8003bc8:	1e03      	subs	r3, r0, #0
 8003bca:	d00d      	beq.n	8003be8 <main+0x60c>
 8003bcc:	2200      	movs	r2, #0
 8003bce:	4b4c      	ldr	r3, [pc, #304]	; (8003d00 <main+0x724>)
 8003bd0:	1939      	adds	r1, r7, r4
 8003bd2:	6808      	ldr	r0, [r1, #0]
 8003bd4:	6849      	ldr	r1, [r1, #4]
 8003bd6:	f7fc fc5b 	bl	8000490 <__aeabi_dcmpge>
 8003bda:	1e03      	subs	r3, r0, #0
 8003bdc:	d004      	beq.n	8003be8 <main+0x60c>
 8003bde:	23d7      	movs	r3, #215	; 0xd7
 8003be0:	18fb      	adds	r3, r7, r3
 8003be2:	2205      	movs	r2, #5
 8003be4:	701a      	strb	r2, [r3, #0]
 8003be6:	e016      	b.n	8003c16 <main+0x63a>
				else if (Voltage_V <= 5 && Voltage_V >= 4.5) poza = 6;
 8003be8:	2200      	movs	r2, #0
 8003bea:	4b47      	ldr	r3, [pc, #284]	; (8003d08 <main+0x72c>)
 8003bec:	24a8      	movs	r4, #168	; 0xa8
 8003bee:	1939      	adds	r1, r7, r4
 8003bf0:	6808      	ldr	r0, [r1, #0]
 8003bf2:	6849      	ldr	r1, [r1, #4]
 8003bf4:	f7fc fc38 	bl	8000468 <__aeabi_dcmple>
 8003bf8:	1e03      	subs	r3, r0, #0
 8003bfa:	d00c      	beq.n	8003c16 <main+0x63a>
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	4b41      	ldr	r3, [pc, #260]	; (8003d04 <main+0x728>)
 8003c00:	1939      	adds	r1, r7, r4
 8003c02:	6808      	ldr	r0, [r1, #0]
 8003c04:	6849      	ldr	r1, [r1, #4]
 8003c06:	f7fc fc43 	bl	8000490 <__aeabi_dcmpge>
 8003c0a:	1e03      	subs	r3, r0, #0
 8003c0c:	d003      	beq.n	8003c16 <main+0x63a>
 8003c0e:	23d7      	movs	r3, #215	; 0xd7
 8003c10:	18fb      	adds	r3, r7, r3
 8003c12:	2206      	movs	r2, #6
 8003c14:	701a      	strb	r2, [r3, #0]
				switch (poza)
 8003c16:	23d7      	movs	r3, #215	; 0xd7
 8003c18:	18fb      	adds	r3, r7, r3
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b07      	cmp	r3, #7
 8003c1e:	d900      	bls.n	8003c22 <main+0x646>
 8003c20:	e0ad      	b.n	8003d7e <main+0x7a2>
 8003c22:	009a      	lsls	r2, r3, #2
 8003c24:	4b39      	ldr	r3, [pc, #228]	; (8003d0c <main+0x730>)
 8003c26:	18d3      	adds	r3, r2, r3
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	469f      	mov	pc, r3
					{
						case 0:
							{
								st7565_clear_screen();
 8003c2c:	f7ff f858 	bl	8002ce0 <st7565_clear_screen>
								st7565_backlight_disable();
 8003c30:	f7ff f825 	bl	8002c7e <st7565_backlight_disable>
								break;
 8003c34:	e0a3      	b.n	8003d7e <main+0x7a2>
							}

						case 1:
							{
								st7565_drawbitmap(buffer, 0, 0, ptData, 128, 64, 1);
 8003c36:	4b36      	ldr	r3, [pc, #216]	; (8003d10 <main+0x734>)
 8003c38:	4836      	ldr	r0, [pc, #216]	; (8003d14 <main+0x738>)
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	9202      	str	r2, [sp, #8]
 8003c3e:	2240      	movs	r2, #64	; 0x40
 8003c40:	9201      	str	r2, [sp, #4]
 8003c42:	2280      	movs	r2, #128	; 0x80
 8003c44:	9200      	str	r2, [sp, #0]
 8003c46:	2200      	movs	r2, #0
 8003c48:	2100      	movs	r1, #0
 8003c4a:	f7ff fa48 	bl	80030de <st7565_drawbitmap>
								st7565_write_buffer(buffer);
 8003c4e:	4b31      	ldr	r3, [pc, #196]	; (8003d14 <main+0x738>)
 8003c50:	0018      	movs	r0, r3
 8003c52:	f7fe fecf 	bl	80029f4 <st7565_write_buffer>
								break;
 8003c56:	e092      	b.n	8003d7e <main+0x7a2>
							}

						case 2:
							{
								st7565_drawbitmap(buffer, 0, 0, ptData1, 128, 64, 1);
 8003c58:	4b2f      	ldr	r3, [pc, #188]	; (8003d18 <main+0x73c>)
 8003c5a:	482e      	ldr	r0, [pc, #184]	; (8003d14 <main+0x738>)
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	9202      	str	r2, [sp, #8]
 8003c60:	2240      	movs	r2, #64	; 0x40
 8003c62:	9201      	str	r2, [sp, #4]
 8003c64:	2280      	movs	r2, #128	; 0x80
 8003c66:	9200      	str	r2, [sp, #0]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	f7ff fa37 	bl	80030de <st7565_drawbitmap>
								st7565_write_buffer(buffer);
 8003c70:	4b28      	ldr	r3, [pc, #160]	; (8003d14 <main+0x738>)
 8003c72:	0018      	movs	r0, r3
 8003c74:	f7fe febe 	bl	80029f4 <st7565_write_buffer>
								break;
 8003c78:	e081      	b.n	8003d7e <main+0x7a2>
							}

						case 3:
							{
								st7565_drawbitmap(buffer, 0, 0, ptData2, 128, 64, 1);
 8003c7a:	4b28      	ldr	r3, [pc, #160]	; (8003d1c <main+0x740>)
 8003c7c:	4825      	ldr	r0, [pc, #148]	; (8003d14 <main+0x738>)
 8003c7e:	2201      	movs	r2, #1
 8003c80:	9202      	str	r2, [sp, #8]
 8003c82:	2240      	movs	r2, #64	; 0x40
 8003c84:	9201      	str	r2, [sp, #4]
 8003c86:	2280      	movs	r2, #128	; 0x80
 8003c88:	9200      	str	r2, [sp, #0]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	f7ff fa26 	bl	80030de <st7565_drawbitmap>
								st7565_write_buffer(buffer);
 8003c92:	4b20      	ldr	r3, [pc, #128]	; (8003d14 <main+0x738>)
 8003c94:	0018      	movs	r0, r3
 8003c96:	f7fe fead 	bl	80029f4 <st7565_write_buffer>
								break;
 8003c9a:	e070      	b.n	8003d7e <main+0x7a2>
							}

						case 4:
							{
								st7565_drawbitmap(buffer, 0, 0, ptData3, 128, 64, 1);
 8003c9c:	4b20      	ldr	r3, [pc, #128]	; (8003d20 <main+0x744>)
 8003c9e:	481d      	ldr	r0, [pc, #116]	; (8003d14 <main+0x738>)
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	9202      	str	r2, [sp, #8]
 8003ca4:	2240      	movs	r2, #64	; 0x40
 8003ca6:	9201      	str	r2, [sp, #4]
 8003ca8:	2280      	movs	r2, #128	; 0x80
 8003caa:	9200      	str	r2, [sp, #0]
 8003cac:	2200      	movs	r2, #0
 8003cae:	2100      	movs	r1, #0
 8003cb0:	f7ff fa15 	bl	80030de <st7565_drawbitmap>
								st7565_write_buffer(buffer);
 8003cb4:	4b17      	ldr	r3, [pc, #92]	; (8003d14 <main+0x738>)
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f7fe fe9c 	bl	80029f4 <st7565_write_buffer>
								break;
 8003cbc:	e05f      	b.n	8003d7e <main+0x7a2>
							}

						case 5:
							{
								st7565_drawbitmap(buffer, 0, 0, ptData4, 128, 64, 1);
 8003cbe:	4b19      	ldr	r3, [pc, #100]	; (8003d24 <main+0x748>)
 8003cc0:	4814      	ldr	r0, [pc, #80]	; (8003d14 <main+0x738>)
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	9202      	str	r2, [sp, #8]
 8003cc6:	2240      	movs	r2, #64	; 0x40
 8003cc8:	9201      	str	r2, [sp, #4]
 8003cca:	2280      	movs	r2, #128	; 0x80
 8003ccc:	9200      	str	r2, [sp, #0]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	f7ff fa04 	bl	80030de <st7565_drawbitmap>
								st7565_write_buffer(buffer);
 8003cd6:	4b0f      	ldr	r3, [pc, #60]	; (8003d14 <main+0x738>)
 8003cd8:	0018      	movs	r0, r3
 8003cda:	f7fe fe8b 	bl	80029f4 <st7565_write_buffer>
								break;
 8003cde:	e04e      	b.n	8003d7e <main+0x7a2>
 8003ce0:	48000800 	.word	0x48000800
 8003ce4:	00001001 	.word	0x00001001
 8003ce8:	20002a28 	.word	0x20002a28
 8003cec:	5c28f5c3 	.word	0x5c28f5c3
 8003cf0:	4009c28f 	.word	0x4009c28f
 8003cf4:	408f4000 	.word	0x408f4000
 8003cf8:	3ff00000 	.word	0x3ff00000
 8003cfc:	40080000 	.word	0x40080000
 8003d00:	40100000 	.word	0x40100000
 8003d04:	40120000 	.word	0x40120000
 8003d08:	40140000 	.word	0x40140000
 8003d0c:	0800ad80 	.word	0x0800ad80
 8003d10:	20000408 	.word	0x20000408
 8003d14:	20000000 	.word	0x20000000
 8003d18:	20000808 	.word	0x20000808
 8003d1c:	20000c08 	.word	0x20000c08
 8003d20:	20001008 	.word	0x20001008
 8003d24:	20001408 	.word	0x20001408
							}

						case 6:
							{
								st7565_drawbitmap(buffer, 0, 0, ptData5, 128, 64, 1);
 8003d28:	4bd6      	ldr	r3, [pc, #856]	; (8004084 <main+0xaa8>)
 8003d2a:	48d7      	ldr	r0, [pc, #860]	; (8004088 <main+0xaac>)
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	9202      	str	r2, [sp, #8]
 8003d30:	2240      	movs	r2, #64	; 0x40
 8003d32:	9201      	str	r2, [sp, #4]
 8003d34:	2280      	movs	r2, #128	; 0x80
 8003d36:	9200      	str	r2, [sp, #0]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	f7ff f9cf 	bl	80030de <st7565_drawbitmap>
								st7565_write_buffer(buffer);
 8003d40:	4bd1      	ldr	r3, [pc, #836]	; (8004088 <main+0xaac>)
 8003d42:	0018      	movs	r0, r3
 8003d44:	f7fe fe56 	bl	80029f4 <st7565_write_buffer>
								break;
 8003d48:	e019      	b.n	8003d7e <main+0x7a2>

						case 7:
							{
								while (Voltage_V > maxim)
								{
									st7565_backlight_disable();
 8003d4a:	f7fe ff98 	bl	8002c7e <st7565_backlight_disable>
									HAL_Delay(2000);
 8003d4e:	23fa      	movs	r3, #250	; 0xfa
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	0018      	movs	r0, r3
 8003d54:	f001 fb3a 	bl	80053cc <HAL_Delay>
									st7565_backlight_enable();
 8003d58:	f7fe ff84 	bl	8002c64 <st7565_backlight_enable>
								while (Voltage_V > maxim)
 8003d5c:	239e      	movs	r3, #158	; 0x9e
 8003d5e:	18fb      	adds	r3, r7, r3
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	0018      	movs	r0, r3
 8003d64:	f7fe fd8a 	bl	800287c <__aeabi_i2d>
 8003d68:	0002      	movs	r2, r0
 8003d6a:	000b      	movs	r3, r1
 8003d6c:	21a8      	movs	r1, #168	; 0xa8
 8003d6e:	1879      	adds	r1, r7, r1
 8003d70:	6808      	ldr	r0, [r1, #0]
 8003d72:	6849      	ldr	r1, [r1, #4]
 8003d74:	f7fc fb82 	bl	800047c <__aeabi_dcmpgt>
 8003d78:	1e03      	subs	r3, r0, #0
 8003d7a:	d1e6      	bne.n	8003d4a <main+0x76e>
								}

								break;
 8003d7c:	46c0      	nop			; (mov r8, r8)
							}

					}
				if(Voltage_V>minim)
 8003d7e:	239f      	movs	r3, #159	; 0x9f
 8003d80:	18fb      	adds	r3, r7, r3
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	0018      	movs	r0, r3
 8003d86:	f7fe fd79 	bl	800287c <__aeabi_i2d>
 8003d8a:	0002      	movs	r2, r0
 8003d8c:	000b      	movs	r3, r1
 8003d8e:	25a8      	movs	r5, #168	; 0xa8
 8003d90:	1979      	adds	r1, r7, r5
 8003d92:	6808      	ldr	r0, [r1, #0]
 8003d94:	6849      	ldr	r1, [r1, #4]
 8003d96:	f7fc fb71 	bl	800047c <__aeabi_dcmpgt>
 8003d9a:	1e03      	subs	r3, r0, #0
 8003d9c:	d038      	beq.n	8003e10 <main+0x834>
							{
					//	st7565_backlight_enable();
							uint8_t* text = (unsigned char *)("Volti: ");
 8003d9e:	4bbb      	ldr	r3, [pc, #748]	; (800408c <main+0xab0>)
 8003da0:	66bb      	str	r3, [r7, #104]	; 0x68
							//uint8_t v = (double)(Voltage_V);
							st7565_drawstring(buffer, 0, 0, text);
 8003da2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003da4:	48b8      	ldr	r0, [pc, #736]	; (8004088 <main+0xaac>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	2100      	movs	r1, #0
 8003daa:	f7ff fa08 	bl	80031be <st7565_drawstring>
							char c[11]="";
 8003dae:	2430      	movs	r4, #48	; 0x30
 8003db0:	193b      	adds	r3, r7, r4
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	3304      	adds	r3, #4
 8003db8:	2207      	movs	r2, #7
 8003dba:	2100      	movs	r1, #0
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	f003 fc01 	bl	80075c4 <memset>
							sprintf(c,"%.1f",Voltage_V);
 8003dc2:	197b      	adds	r3, r7, r5
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	49b1      	ldr	r1, [pc, #708]	; (8004090 <main+0xab4>)
 8003dca:	1938      	adds	r0, r7, r4
 8003dcc:	f004 f8de 	bl	8007f8c <siprintf>
							st7565_drawstring(buffer, 35, 0, c);
 8003dd0:	193b      	adds	r3, r7, r4
 8003dd2:	48ad      	ldr	r0, [pc, #692]	; (8004088 <main+0xaac>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	2123      	movs	r1, #35	; 0x23
 8003dd8:	f7ff f9f1 	bl	80031be <st7565_drawstring>
							text = (unsigned char *)("Milivolti: ");
 8003ddc:	4bad      	ldr	r3, [pc, #692]	; (8004094 <main+0xab8>)
 8003dde:	66bb      	str	r3, [r7, #104]	; 0x68
							c[11]="";
 8003de0:	4bad      	ldr	r3, [pc, #692]	; (8004098 <main+0xabc>)
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	193b      	adds	r3, r7, r4
 8003de6:	72da      	strb	r2, [r3, #11]
							st7565_drawstring(buffer, 0, 1, text);
 8003de8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dea:	48a7      	ldr	r0, [pc, #668]	; (8004088 <main+0xaac>)
 8003dec:	2201      	movs	r2, #1
 8003dee:	2100      	movs	r1, #0
 8003df0:	f7ff f9e5 	bl	80031be <st7565_drawstring>
										sprintf(c,"%.1f",Voltage_mV);
 8003df4:	23b0      	movs	r3, #176	; 0xb0
 8003df6:	18fb      	adds	r3, r7, r3
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	49a4      	ldr	r1, [pc, #656]	; (8004090 <main+0xab4>)
 8003dfe:	1938      	adds	r0, r7, r4
 8003e00:	f004 f8c4 	bl	8007f8c <siprintf>
										st7565_drawstring(buffer, 60, 1, c);
 8003e04:	193b      	adds	r3, r7, r4
 8003e06:	48a0      	ldr	r0, [pc, #640]	; (8004088 <main+0xaac>)
 8003e08:	2201      	movs	r2, #1
 8003e0a:	213c      	movs	r1, #60	; 0x3c
 8003e0c:	f7ff f9d7 	bl	80031be <st7565_drawstring>


						//	st7565_drawchar(buffer, 0, 7, 0x30 );

							/* Send buffer to LCD */
							st7565_write_buffer(buffer);
 8003e10:	4b9d      	ldr	r3, [pc, #628]	; (8004088 <main+0xaac>)
 8003e12:	0018      	movs	r0, r3
 8003e14:	f7fe fdee 	bl	80029f4 <st7565_write_buffer>

							HAL_Delay(500);
 8003e18:	23fa      	movs	r3, #250	; 0xfa
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	f001 fad5 	bl	80053cc <HAL_Delay>
						break;
					}

				}

				break;
 8003e22:	f000 fdc2 	bl	80049aa <main+0x13ce>
					ADC_Select_CH0(1);
 8003e26:	2001      	movs	r0, #1
 8003e28:	f000 fea4 	bl	8004b74 <ADC_Select_CH0>
					HAL_ADC_Start(&hadc);
 8003e2c:	4b9b      	ldr	r3, [pc, #620]	; (800409c <main+0xac0>)
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f001 fc30 	bl	8005694 <HAL_ADC_Start>
					HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8003e34:	2301      	movs	r3, #1
 8003e36:	425a      	negs	r2, r3
 8003e38:	4b98      	ldr	r3, [pc, #608]	; (800409c <main+0xac0>)
 8003e3a:	0011      	movs	r1, r2
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f001 fcbd 	bl	80057bc <HAL_ADC_PollForConversion>
					uint16_t joystickinput = HAL_ADC_GetValue(&hadc);
 8003e42:	4b96      	ldr	r3, [pc, #600]	; (800409c <main+0xac0>)
 8003e44:	0018      	movs	r0, r3
 8003e46:	f001 fd51 	bl	80058ec <HAL_ADC_GetValue>
 8003e4a:	0002      	movs	r2, r0
 8003e4c:	216c      	movs	r1, #108	; 0x6c
 8003e4e:	187b      	adds	r3, r7, r1
 8003e50:	801a      	strh	r2, [r3, #0]
					if (joystickinput>100&&joystickinput<350)
 8003e52:	000a      	movs	r2, r1
 8003e54:	18bb      	adds	r3, r7, r2
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	2b64      	cmp	r3, #100	; 0x64
 8003e5a:	d801      	bhi.n	8003e60 <main+0x884>
 8003e5c:	f000 fda5 	bl	80049aa <main+0x13ce>
 8003e60:	18bb      	adds	r3, r7, r2
 8003e62:	881a      	ldrh	r2, [r3, #0]
 8003e64:	23af      	movs	r3, #175	; 0xaf
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d301      	bcc.n	8003e70 <main+0x894>
 8003e6c:	f000 fd9d 	bl	80049aa <main+0x13ce>
						indexmeniu=0;
 8003e70:	23ce      	movs	r3, #206	; 0xce
 8003e72:	18fb      	adds	r3, r7, r3
 8003e74:	2200      	movs	r2, #0
 8003e76:	701a      	strb	r2, [r3, #0]
						butonapasat = 0;
 8003e78:	23cc      	movs	r3, #204	; 0xcc
 8003e7a:	18fb      	adds	r3, r7, r3
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
						HAL_Delay(500);
 8003e80:	23fa      	movs	r3, #250	; 0xfa
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	0018      	movs	r0, r3
 8003e86:	f001 faa1 	bl	80053cc <HAL_Delay>
						break;
 8003e8a:	f000 fd99 	bl	80049c0 <main+0x13e4>
			}
			case 2://analog
			{


				if((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 )&&(butonapasat == 1))
 8003e8e:	2380      	movs	r3, #128	; 0x80
 8003e90:	019b      	lsls	r3, r3, #6
 8003e92:	4a83      	ldr	r2, [pc, #524]	; (80040a0 <main+0xac4>)
 8003e94:	0019      	movs	r1, r3
 8003e96:	0010      	movs	r0, r2
 8003e98:	f002 f9b0 	bl	80061fc <HAL_GPIO_ReadPin>
 8003e9c:	1e03      	subs	r3, r0, #0
 8003e9e:	d113      	bne.n	8003ec8 <main+0x8ec>
 8003ea0:	23cc      	movs	r3, #204	; 0xcc
 8003ea2:	18fb      	adds	r3, r7, r3
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d10e      	bne.n	8003ec8 <main+0x8ec>
					{
					while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 )
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	2380      	movs	r3, #128	; 0x80
 8003eae:	019b      	lsls	r3, r3, #6
 8003eb0:	4a7b      	ldr	r2, [pc, #492]	; (80040a0 <main+0xac4>)
 8003eb2:	0019      	movs	r1, r3
 8003eb4:	0010      	movs	r0, r2
 8003eb6:	f002 f9a1 	bl	80061fc <HAL_GPIO_ReadPin>
 8003eba:	1e03      	subs	r3, r0, #0
 8003ebc:	d0f6      	beq.n	8003eac <main+0x8d0>
					{
					}
					butonapasat = 0;
 8003ebe:	23cc      	movs	r3, #204	; 0xcc
 8003ec0:	18fb      	adds	r3, r7, r3
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	701a      	strb	r2, [r3, #0]
 8003ec6:	e01b      	b.n	8003f00 <main+0x924>
					}

				else if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 )&&(butonapasat == 0))
 8003ec8:	2380      	movs	r3, #128	; 0x80
 8003eca:	019b      	lsls	r3, r3, #6
 8003ecc:	4a74      	ldr	r2, [pc, #464]	; (80040a0 <main+0xac4>)
 8003ece:	0019      	movs	r1, r3
 8003ed0:	0010      	movs	r0, r2
 8003ed2:	f002 f993 	bl	80061fc <HAL_GPIO_ReadPin>
 8003ed6:	1e03      	subs	r3, r0, #0
 8003ed8:	d112      	bne.n	8003f00 <main+0x924>
 8003eda:	23cc      	movs	r3, #204	; 0xcc
 8003edc:	18fb      	adds	r3, r7, r3
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10d      	bne.n	8003f00 <main+0x924>
				{
					while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 )
 8003ee4:	46c0      	nop			; (mov r8, r8)
 8003ee6:	2380      	movs	r3, #128	; 0x80
 8003ee8:	019b      	lsls	r3, r3, #6
 8003eea:	4a6d      	ldr	r2, [pc, #436]	; (80040a0 <main+0xac4>)
 8003eec:	0019      	movs	r1, r3
 8003eee:	0010      	movs	r0, r2
 8003ef0:	f002 f984 	bl	80061fc <HAL_GPIO_ReadPin>
 8003ef4:	1e03      	subs	r3, r0, #0
 8003ef6:	d0f6      	beq.n	8003ee6 <main+0x90a>
					{
					}
					butonapasat = 1;
 8003ef8:	23cc      	movs	r3, #204	; 0xcc
 8003efa:	18fb      	adds	r3, r7, r3
 8003efc:	2201      	movs	r2, #1
 8003efe:	701a      	strb	r2, [r3, #0]
				}
				if(butonapasat == 0)
 8003f00:	23cc      	movs	r3, #204	; 0xcc
 8003f02:	18fb      	adds	r3, r7, r3
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d000      	beq.n	8003f0c <main+0x930>
 8003f0a:	e14d      	b.n	80041a8 <main+0xbcc>
				{

				st7565_drawbitmap(buffer, 0, 0, pozanalog, 128, 64, 1);
 8003f0c:	4b65      	ldr	r3, [pc, #404]	; (80040a4 <main+0xac8>)
 8003f0e:	485e      	ldr	r0, [pc, #376]	; (8004088 <main+0xaac>)
 8003f10:	2201      	movs	r2, #1
 8003f12:	9202      	str	r2, [sp, #8]
 8003f14:	2240      	movs	r2, #64	; 0x40
 8003f16:	9201      	str	r2, [sp, #4]
 8003f18:	2280      	movs	r2, #128	; 0x80
 8003f1a:	9200      	str	r2, [sp, #0]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	2100      	movs	r1, #0
 8003f20:	f7ff f8dd 	bl	80030de <st7565_drawbitmap>

				ADC_Select_CH0(ADC_RANK_NONE);
 8003f24:	4b60      	ldr	r3, [pc, #384]	; (80040a8 <main+0xacc>)
 8003f26:	0018      	movs	r0, r3
 8003f28:	f000 fe24 	bl	8004b74 <ADC_Select_CH0>
				ADC_Select_CH13(1);
 8003f2c:	2001      	movs	r0, #1
 8003f2e:	f000 fdf9 	bl	8004b24 <ADC_Select_CH13>
				HAL_ADC_Start(&hadc);
 8003f32:	4b5a      	ldr	r3, [pc, #360]	; (800409c <main+0xac0>)
 8003f34:	0018      	movs	r0, r3
 8003f36:	f001 fbad 	bl	8005694 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	425a      	negs	r2, r3
 8003f3e:	4b57      	ldr	r3, [pc, #348]	; (800409c <main+0xac0>)
 8003f40:	0011      	movs	r1, r2
 8003f42:	0018      	movs	r0, r3
 8003f44:	f001 fc3a 	bl	80057bc <HAL_ADC_PollForConversion>
				adcValue = HAL_ADC_GetValue(&hadc);
 8003f48:	4b54      	ldr	r3, [pc, #336]	; (800409c <main+0xac0>)
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f001 fcce 	bl	80058ec <HAL_ADC_GetValue>
 8003f50:	0002      	movs	r2, r0
 8003f52:	21ba      	movs	r1, #186	; 0xba
 8003f54:	187b      	adds	r3, r7, r1
 8003f56:	801a      	strh	r2, [r3, #0]
				voltageanalog = (adcValue *3.22)/1000;
 8003f58:	187b      	adds	r3, r7, r1
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f7fe fc8d 	bl	800287c <__aeabi_i2d>
 8003f62:	4a52      	ldr	r2, [pc, #328]	; (80040ac <main+0xad0>)
 8003f64:	4b52      	ldr	r3, [pc, #328]	; (80040b0 <main+0xad4>)
 8003f66:	f7fd fe37 	bl	8001bd8 <__aeabi_dmul>
 8003f6a:	0002      	movs	r2, r0
 8003f6c:	000b      	movs	r3, r1
 8003f6e:	0010      	movs	r0, r2
 8003f70:	0019      	movs	r1, r3
 8003f72:	2200      	movs	r2, #0
 8003f74:	4b4f      	ldr	r3, [pc, #316]	; (80040b4 <main+0xad8>)
 8003f76:	f7fd fa2d 	bl	80013d4 <__aeabi_ddiv>
 8003f7a:	0002      	movs	r2, r0
 8003f7c:	000b      	movs	r3, r1
 8003f7e:	21a0      	movs	r1, #160	; 0xa0
 8003f80:	1878      	adds	r0, r7, r1
 8003f82:	6002      	str	r2, [r0, #0]
 8003f84:	6043      	str	r3, [r0, #4]

				if(voltageanalog<0.5)
 8003f86:	2200      	movs	r2, #0
 8003f88:	4b4b      	ldr	r3, [pc, #300]	; (80040b8 <main+0xadc>)
 8003f8a:	1879      	adds	r1, r7, r1
 8003f8c:	6808      	ldr	r0, [r1, #0]
 8003f8e:	6849      	ldr	r1, [r1, #4]
 8003f90:	f7fc fa60 	bl	8000454 <__aeabi_dcmplt>
 8003f94:	1e03      	subs	r3, r0, #0
 8003f96:	d00a      	beq.n	8003fae <main+0x9d2>
					st7565_drawline(buffer, 64, 64, 15, 42, 1);//0
 8003f98:	483b      	ldr	r0, [pc, #236]	; (8004088 <main+0xaac>)
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	9301      	str	r3, [sp, #4]
 8003f9e:	232a      	movs	r3, #42	; 0x2a
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	230f      	movs	r3, #15
 8003fa4:	2240      	movs	r2, #64	; 0x40
 8003fa6:	2140      	movs	r1, #64	; 0x40
 8003fa8:	f7ff f98a 	bl	80032c0 <st7565_drawline>
 8003fac:	e0f6      	b.n	800419c <main+0xbc0>
				else if (voltageanalog<1)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	4b42      	ldr	r3, [pc, #264]	; (80040bc <main+0xae0>)
 8003fb2:	21a0      	movs	r1, #160	; 0xa0
 8003fb4:	1879      	adds	r1, r7, r1
 8003fb6:	6808      	ldr	r0, [r1, #0]
 8003fb8:	6849      	ldr	r1, [r1, #4]
 8003fba:	f7fc fa4b 	bl	8000454 <__aeabi_dcmplt>
 8003fbe:	1e03      	subs	r3, r0, #0
 8003fc0:	d00a      	beq.n	8003fd8 <main+0x9fc>
					st7565_drawline(buffer, 64, 64, 22, 37, 1);//0.5
 8003fc2:	4831      	ldr	r0, [pc, #196]	; (8004088 <main+0xaac>)
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	9301      	str	r3, [sp, #4]
 8003fc8:	2325      	movs	r3, #37	; 0x25
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	2316      	movs	r3, #22
 8003fce:	2240      	movs	r2, #64	; 0x40
 8003fd0:	2140      	movs	r1, #64	; 0x40
 8003fd2:	f7ff f975 	bl	80032c0 <st7565_drawline>
 8003fd6:	e0e1      	b.n	800419c <main+0xbc0>
				else if (voltageanalog<1.5)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	4b39      	ldr	r3, [pc, #228]	; (80040c0 <main+0xae4>)
 8003fdc:	21a0      	movs	r1, #160	; 0xa0
 8003fde:	1879      	adds	r1, r7, r1
 8003fe0:	6808      	ldr	r0, [r1, #0]
 8003fe2:	6849      	ldr	r1, [r1, #4]
 8003fe4:	f7fc fa36 	bl	8000454 <__aeabi_dcmplt>
 8003fe8:	1e03      	subs	r3, r0, #0
 8003fea:	d00a      	beq.n	8004002 <main+0xa26>
					st7565_drawline(buffer, 64, 64, 30, 32, 1);//1
 8003fec:	4826      	ldr	r0, [pc, #152]	; (8004088 <main+0xaac>)
 8003fee:	2301      	movs	r3, #1
 8003ff0:	9301      	str	r3, [sp, #4]
 8003ff2:	2320      	movs	r3, #32
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	231e      	movs	r3, #30
 8003ff8:	2240      	movs	r2, #64	; 0x40
 8003ffa:	2140      	movs	r1, #64	; 0x40
 8003ffc:	f7ff f960 	bl	80032c0 <st7565_drawline>
 8004000:	e0cc      	b.n	800419c <main+0xbc0>
				else if (voltageanalog<2)
 8004002:	2200      	movs	r2, #0
 8004004:	2380      	movs	r3, #128	; 0x80
 8004006:	05db      	lsls	r3, r3, #23
 8004008:	21a0      	movs	r1, #160	; 0xa0
 800400a:	1879      	adds	r1, r7, r1
 800400c:	6808      	ldr	r0, [r1, #0]
 800400e:	6849      	ldr	r1, [r1, #4]
 8004010:	f7fc fa20 	bl	8000454 <__aeabi_dcmplt>
 8004014:	1e03      	subs	r3, r0, #0
 8004016:	d00a      	beq.n	800402e <main+0xa52>
					st7565_drawline(buffer, 64, 64, 39, 27, 1);//1.5
 8004018:	481b      	ldr	r0, [pc, #108]	; (8004088 <main+0xaac>)
 800401a:	2301      	movs	r3, #1
 800401c:	9301      	str	r3, [sp, #4]
 800401e:	231b      	movs	r3, #27
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	2327      	movs	r3, #39	; 0x27
 8004024:	2240      	movs	r2, #64	; 0x40
 8004026:	2140      	movs	r1, #64	; 0x40
 8004028:	f7ff f94a 	bl	80032c0 <st7565_drawline>
 800402c:	e0b6      	b.n	800419c <main+0xbc0>
				else if (voltageanalog<2.5)
 800402e:	2200      	movs	r2, #0
 8004030:	4b24      	ldr	r3, [pc, #144]	; (80040c4 <main+0xae8>)
 8004032:	21a0      	movs	r1, #160	; 0xa0
 8004034:	1879      	adds	r1, r7, r1
 8004036:	6808      	ldr	r0, [r1, #0]
 8004038:	6849      	ldr	r1, [r1, #4]
 800403a:	f7fc fa0b 	bl	8000454 <__aeabi_dcmplt>
 800403e:	1e03      	subs	r3, r0, #0
 8004040:	d00a      	beq.n	8004058 <main+0xa7c>
					st7565_drawline(buffer, 64, 64, 49, 22, 1);//2
 8004042:	4811      	ldr	r0, [pc, #68]	; (8004088 <main+0xaac>)
 8004044:	2301      	movs	r3, #1
 8004046:	9301      	str	r3, [sp, #4]
 8004048:	2316      	movs	r3, #22
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	2331      	movs	r3, #49	; 0x31
 800404e:	2240      	movs	r2, #64	; 0x40
 8004050:	2140      	movs	r1, #64	; 0x40
 8004052:	f7ff f935 	bl	80032c0 <st7565_drawline>
 8004056:	e0a1      	b.n	800419c <main+0xbc0>
				else if (voltageanalog<3)
 8004058:	2200      	movs	r2, #0
 800405a:	4b1b      	ldr	r3, [pc, #108]	; (80040c8 <main+0xaec>)
 800405c:	21a0      	movs	r1, #160	; 0xa0
 800405e:	1879      	adds	r1, r7, r1
 8004060:	6808      	ldr	r0, [r1, #0]
 8004062:	6849      	ldr	r1, [r1, #4]
 8004064:	f7fc f9f6 	bl	8000454 <__aeabi_dcmplt>
 8004068:	1e03      	subs	r3, r0, #0
 800406a:	d02f      	beq.n	80040cc <main+0xaf0>
					st7565_drawline(buffer, 64, 64, 64, 22, 1);//2.5
 800406c:	4806      	ldr	r0, [pc, #24]	; (8004088 <main+0xaac>)
 800406e:	2301      	movs	r3, #1
 8004070:	9301      	str	r3, [sp, #4]
 8004072:	2316      	movs	r3, #22
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	2340      	movs	r3, #64	; 0x40
 8004078:	2240      	movs	r2, #64	; 0x40
 800407a:	2140      	movs	r1, #64	; 0x40
 800407c:	f7ff f920 	bl	80032c0 <st7565_drawline>
 8004080:	e08c      	b.n	800419c <main+0xbc0>
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	20001808 	.word	0x20001808
 8004088:	20000000 	.word	0x20000000
 800408c:	0800a678 	.word	0x0800a678
 8004090:	0800a680 	.word	0x0800a680
 8004094:	0800a688 	.word	0x0800a688
 8004098:	0800a694 	.word	0x0800a694
 800409c:	20002a28 	.word	0x20002a28
 80040a0:	48000800 	.word	0x48000800
 80040a4:	20002008 	.word	0x20002008
 80040a8:	00001001 	.word	0x00001001
 80040ac:	5c28f5c3 	.word	0x5c28f5c3
 80040b0:	4009c28f 	.word	0x4009c28f
 80040b4:	408f4000 	.word	0x408f4000
 80040b8:	3fe00000 	.word	0x3fe00000
 80040bc:	3ff00000 	.word	0x3ff00000
 80040c0:	3ff80000 	.word	0x3ff80000
 80040c4:	40040000 	.word	0x40040000
 80040c8:	40080000 	.word	0x40080000
				else if (voltageanalog<3.5)
 80040cc:	2200      	movs	r2, #0
 80040ce:	4bd0      	ldr	r3, [pc, #832]	; (8004410 <main+0xe34>)
 80040d0:	21a0      	movs	r1, #160	; 0xa0
 80040d2:	1879      	adds	r1, r7, r1
 80040d4:	6808      	ldr	r0, [r1, #0]
 80040d6:	6849      	ldr	r1, [r1, #4]
 80040d8:	f7fc f9bc 	bl	8000454 <__aeabi_dcmplt>
 80040dc:	1e03      	subs	r3, r0, #0
 80040de:	d00a      	beq.n	80040f6 <main+0xb1a>
					st7565_drawline(buffer, 64, 64, 79, 22, 1);//3
 80040e0:	48cc      	ldr	r0, [pc, #816]	; (8004414 <main+0xe38>)
 80040e2:	2301      	movs	r3, #1
 80040e4:	9301      	str	r3, [sp, #4]
 80040e6:	2316      	movs	r3, #22
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	234f      	movs	r3, #79	; 0x4f
 80040ec:	2240      	movs	r2, #64	; 0x40
 80040ee:	2140      	movs	r1, #64	; 0x40
 80040f0:	f7ff f8e6 	bl	80032c0 <st7565_drawline>
 80040f4:	e052      	b.n	800419c <main+0xbc0>
				else if (voltageanalog<4)
 80040f6:	2200      	movs	r2, #0
 80040f8:	4bc7      	ldr	r3, [pc, #796]	; (8004418 <main+0xe3c>)
 80040fa:	21a0      	movs	r1, #160	; 0xa0
 80040fc:	1879      	adds	r1, r7, r1
 80040fe:	6808      	ldr	r0, [r1, #0]
 8004100:	6849      	ldr	r1, [r1, #4]
 8004102:	f7fc f9a7 	bl	8000454 <__aeabi_dcmplt>
 8004106:	1e03      	subs	r3, r0, #0
 8004108:	d00a      	beq.n	8004120 <main+0xb44>
					st7565_drawline(buffer, 64, 64, 88, 27, 1);//3.5
 800410a:	48c2      	ldr	r0, [pc, #776]	; (8004414 <main+0xe38>)
 800410c:	2301      	movs	r3, #1
 800410e:	9301      	str	r3, [sp, #4]
 8004110:	231b      	movs	r3, #27
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	2358      	movs	r3, #88	; 0x58
 8004116:	2240      	movs	r2, #64	; 0x40
 8004118:	2140      	movs	r1, #64	; 0x40
 800411a:	f7ff f8d1 	bl	80032c0 <st7565_drawline>
 800411e:	e03d      	b.n	800419c <main+0xbc0>
				else if (voltageanalog<4.5)
 8004120:	2200      	movs	r2, #0
 8004122:	4bbe      	ldr	r3, [pc, #760]	; (800441c <main+0xe40>)
 8004124:	21a0      	movs	r1, #160	; 0xa0
 8004126:	1879      	adds	r1, r7, r1
 8004128:	6808      	ldr	r0, [r1, #0]
 800412a:	6849      	ldr	r1, [r1, #4]
 800412c:	f7fc f992 	bl	8000454 <__aeabi_dcmplt>
 8004130:	1e03      	subs	r3, r0, #0
 8004132:	d00a      	beq.n	800414a <main+0xb6e>
					st7565_drawline(buffer, 64, 64, 97, 32, 1);//4
 8004134:	48b7      	ldr	r0, [pc, #732]	; (8004414 <main+0xe38>)
 8004136:	2301      	movs	r3, #1
 8004138:	9301      	str	r3, [sp, #4]
 800413a:	2320      	movs	r3, #32
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	2361      	movs	r3, #97	; 0x61
 8004140:	2240      	movs	r2, #64	; 0x40
 8004142:	2140      	movs	r1, #64	; 0x40
 8004144:	f7ff f8bc 	bl	80032c0 <st7565_drawline>
 8004148:	e028      	b.n	800419c <main+0xbc0>
				else if (voltageanalog<5)
 800414a:	2200      	movs	r2, #0
 800414c:	4bb4      	ldr	r3, [pc, #720]	; (8004420 <main+0xe44>)
 800414e:	21a0      	movs	r1, #160	; 0xa0
 8004150:	1879      	adds	r1, r7, r1
 8004152:	6808      	ldr	r0, [r1, #0]
 8004154:	6849      	ldr	r1, [r1, #4]
 8004156:	f7fc f97d 	bl	8000454 <__aeabi_dcmplt>
 800415a:	1e03      	subs	r3, r0, #0
 800415c:	d00a      	beq.n	8004174 <main+0xb98>
					st7565_drawline(buffer, 64, 64, 104, 37, 1);//4.5
 800415e:	48ad      	ldr	r0, [pc, #692]	; (8004414 <main+0xe38>)
 8004160:	2301      	movs	r3, #1
 8004162:	9301      	str	r3, [sp, #4]
 8004164:	2325      	movs	r3, #37	; 0x25
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	2368      	movs	r3, #104	; 0x68
 800416a:	2240      	movs	r2, #64	; 0x40
 800416c:	2140      	movs	r1, #64	; 0x40
 800416e:	f7ff f8a7 	bl	80032c0 <st7565_drawline>
 8004172:	e013      	b.n	800419c <main+0xbc0>
				else if (voltageanalog<=5.5)
 8004174:	2200      	movs	r2, #0
 8004176:	4bab      	ldr	r3, [pc, #684]	; (8004424 <main+0xe48>)
 8004178:	21a0      	movs	r1, #160	; 0xa0
 800417a:	1879      	adds	r1, r7, r1
 800417c:	6808      	ldr	r0, [r1, #0]
 800417e:	6849      	ldr	r1, [r1, #4]
 8004180:	f7fc f972 	bl	8000468 <__aeabi_dcmple>
 8004184:	1e03      	subs	r3, r0, #0
 8004186:	d009      	beq.n	800419c <main+0xbc0>
					st7565_drawline(buffer, 64, 64, 111, 42, 1);//5
 8004188:	48a2      	ldr	r0, [pc, #648]	; (8004414 <main+0xe38>)
 800418a:	2301      	movs	r3, #1
 800418c:	9301      	str	r3, [sp, #4]
 800418e:	232a      	movs	r3, #42	; 0x2a
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	236f      	movs	r3, #111	; 0x6f
 8004194:	2240      	movs	r2, #64	; 0x40
 8004196:	2140      	movs	r1, #64	; 0x40
 8004198:	f7ff f892 	bl	80032c0 <st7565_drawline>
				st7565_write_buffer(buffer);
 800419c:	4b9d      	ldr	r3, [pc, #628]	; (8004414 <main+0xe38>)
 800419e:	0018      	movs	r0, r3
 80041a0:	f7fe fc28 	bl	80029f4 <st7565_write_buffer>
						butonapasat = 0;
						HAL_Delay(500);
						break;
					}
				}
				break;
 80041a4:	f000 fc03 	bl	80049ae <main+0x13d2>
					ADC_Select_CH0(1);
 80041a8:	2001      	movs	r0, #1
 80041aa:	f000 fce3 	bl	8004b74 <ADC_Select_CH0>
					HAL_ADC_Start(&hadc);
 80041ae:	4b9e      	ldr	r3, [pc, #632]	; (8004428 <main+0xe4c>)
 80041b0:	0018      	movs	r0, r3
 80041b2:	f001 fa6f 	bl	8005694 <HAL_ADC_Start>
					HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80041b6:	2301      	movs	r3, #1
 80041b8:	425a      	negs	r2, r3
 80041ba:	4b9b      	ldr	r3, [pc, #620]	; (8004428 <main+0xe4c>)
 80041bc:	0011      	movs	r1, r2
 80041be:	0018      	movs	r0, r3
 80041c0:	f001 fafc 	bl	80057bc <HAL_ADC_PollForConversion>
					uint16_t joystickinput = HAL_ADC_GetValue(&hadc);
 80041c4:	4b98      	ldr	r3, [pc, #608]	; (8004428 <main+0xe4c>)
 80041c6:	0018      	movs	r0, r3
 80041c8:	f001 fb90 	bl	80058ec <HAL_ADC_GetValue>
 80041cc:	0002      	movs	r2, r0
 80041ce:	216e      	movs	r1, #110	; 0x6e
 80041d0:	187b      	adds	r3, r7, r1
 80041d2:	801a      	strh	r2, [r3, #0]
					if (joystickinput>100&&joystickinput<350)
 80041d4:	000a      	movs	r2, r1
 80041d6:	18bb      	adds	r3, r7, r2
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	2b64      	cmp	r3, #100	; 0x64
 80041dc:	d801      	bhi.n	80041e2 <main+0xc06>
 80041de:	f000 fbe6 	bl	80049ae <main+0x13d2>
 80041e2:	18bb      	adds	r3, r7, r2
 80041e4:	881a      	ldrh	r2, [r3, #0]
 80041e6:	23af      	movs	r3, #175	; 0xaf
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d301      	bcc.n	80041f2 <main+0xc16>
 80041ee:	f000 fbde 	bl	80049ae <main+0x13d2>
						indexmeniu=0;
 80041f2:	23ce      	movs	r3, #206	; 0xce
 80041f4:	18fb      	adds	r3, r7, r3
 80041f6:	2200      	movs	r2, #0
 80041f8:	701a      	strb	r2, [r3, #0]
						butonapasat = 0;
 80041fa:	23cc      	movs	r3, #204	; 0xcc
 80041fc:	18fb      	adds	r3, r7, r3
 80041fe:	2200      	movs	r2, #0
 8004200:	701a      	strb	r2, [r3, #0]
						HAL_Delay(500);
 8004202:	23fa      	movs	r3, #250	; 0xfa
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	0018      	movs	r0, r3
 8004208:	f001 f8e0 	bl	80053cc <HAL_Delay>
						break;
 800420c:	f000 fbd8 	bl	80049c0 <main+0x13e4>

			}
			case 3://temperatura
			{
				if((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 )&&(butonapasat == 1))
 8004210:	2380      	movs	r3, #128	; 0x80
 8004212:	019b      	lsls	r3, r3, #6
 8004214:	4a85      	ldr	r2, [pc, #532]	; (800442c <main+0xe50>)
 8004216:	0019      	movs	r1, r3
 8004218:	0010      	movs	r0, r2
 800421a:	f001 ffef 	bl	80061fc <HAL_GPIO_ReadPin>
 800421e:	1e03      	subs	r3, r0, #0
 8004220:	d113      	bne.n	800424a <main+0xc6e>
 8004222:	23cc      	movs	r3, #204	; 0xcc
 8004224:	18fb      	adds	r3, r7, r3
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d10e      	bne.n	800424a <main+0xc6e>
					{
					while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 )
 800422c:	46c0      	nop			; (mov r8, r8)
 800422e:	2380      	movs	r3, #128	; 0x80
 8004230:	019b      	lsls	r3, r3, #6
 8004232:	4a7e      	ldr	r2, [pc, #504]	; (800442c <main+0xe50>)
 8004234:	0019      	movs	r1, r3
 8004236:	0010      	movs	r0, r2
 8004238:	f001 ffe0 	bl	80061fc <HAL_GPIO_ReadPin>
 800423c:	1e03      	subs	r3, r0, #0
 800423e:	d0f6      	beq.n	800422e <main+0xc52>
					{
					}
					butonapasat = 0;
 8004240:	23cc      	movs	r3, #204	; 0xcc
 8004242:	18fb      	adds	r3, r7, r3
 8004244:	2200      	movs	r2, #0
 8004246:	701a      	strb	r2, [r3, #0]
 8004248:	e01b      	b.n	8004282 <main+0xca6>
					}

				else if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 )&&(butonapasat == 0))
 800424a:	2380      	movs	r3, #128	; 0x80
 800424c:	019b      	lsls	r3, r3, #6
 800424e:	4a77      	ldr	r2, [pc, #476]	; (800442c <main+0xe50>)
 8004250:	0019      	movs	r1, r3
 8004252:	0010      	movs	r0, r2
 8004254:	f001 ffd2 	bl	80061fc <HAL_GPIO_ReadPin>
 8004258:	1e03      	subs	r3, r0, #0
 800425a:	d112      	bne.n	8004282 <main+0xca6>
 800425c:	23cc      	movs	r3, #204	; 0xcc
 800425e:	18fb      	adds	r3, r7, r3
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10d      	bne.n	8004282 <main+0xca6>
				{
					while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 )
 8004266:	46c0      	nop			; (mov r8, r8)
 8004268:	2380      	movs	r3, #128	; 0x80
 800426a:	019b      	lsls	r3, r3, #6
 800426c:	4a6f      	ldr	r2, [pc, #444]	; (800442c <main+0xe50>)
 800426e:	0019      	movs	r1, r3
 8004270:	0010      	movs	r0, r2
 8004272:	f001 ffc3 	bl	80061fc <HAL_GPIO_ReadPin>
 8004276:	1e03      	subs	r3, r0, #0
 8004278:	d0f6      	beq.n	8004268 <main+0xc8c>
					{
					}
					butonapasat = 1;
 800427a:	23cc      	movs	r3, #204	; 0xcc
 800427c:	18fb      	adds	r3, r7, r3
 800427e:	2201      	movs	r2, #1
 8004280:	701a      	strb	r2, [r3, #0]
				}
				if(butonapasat == 0)
 8004282:	23cc      	movs	r3, #204	; 0xcc
 8004284:	18fb      	adds	r3, r7, r3
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d000      	beq.n	800428e <main+0xcb2>
 800428c:	e13a      	b.n	8004504 <main+0xf28>
				{
				st7565_clear_buffer(buffer);
 800428e:	4b61      	ldr	r3, [pc, #388]	; (8004414 <main+0xe38>)
 8004290:	0018      	movs	r0, r3
 8004292:	f7fe fd81 	bl	8002d98 <st7565_clear_buffer>
				st7565_drawbitmap(buffer, 0, 0, termometrupoza, 128, 64, 1);
 8004296:	4b66      	ldr	r3, [pc, #408]	; (8004430 <main+0xe54>)
 8004298:	485e      	ldr	r0, [pc, #376]	; (8004414 <main+0xe38>)
 800429a:	2201      	movs	r2, #1
 800429c:	9202      	str	r2, [sp, #8]
 800429e:	2240      	movs	r2, #64	; 0x40
 80042a0:	9201      	str	r2, [sp, #4]
 80042a2:	2280      	movs	r2, #128	; 0x80
 80042a4:	9200      	str	r2, [sp, #0]
 80042a6:	2200      	movs	r2, #0
 80042a8:	2100      	movs	r1, #0
 80042aa:	f7fe ff18 	bl	80030de <st7565_drawbitmap>
				ADC_Select_CH0(ADC_RANK_NONE);
 80042ae:	4b61      	ldr	r3, [pc, #388]	; (8004434 <main+0xe58>)
 80042b0:	0018      	movs	r0, r3
 80042b2:	f000 fc5f 	bl	8004b74 <ADC_Select_CH0>
				ADC_Select_CH13(ADC_RANK_NONE);
 80042b6:	4b5f      	ldr	r3, [pc, #380]	; (8004434 <main+0xe58>)
 80042b8:	0018      	movs	r0, r3
 80042ba:	f000 fc33 	bl	8004b24 <ADC_Select_CH13>
				 ADC_Select_CHTemp(1);
 80042be:	2001      	movs	r0, #1
 80042c0:	f000 fc80 	bl	8004bc4 <ADC_Select_CHTemp>
				 HAL_ADC_Start(&hadc);
 80042c4:	4b58      	ldr	r3, [pc, #352]	; (8004428 <main+0xe4c>)
 80042c6:	0018      	movs	r0, r3
 80042c8:	f001 f9e4 	bl	8005694 <HAL_ADC_Start>
				 HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80042cc:	2301      	movs	r3, #1
 80042ce:	425a      	negs	r2, r3
 80042d0:	4b55      	ldr	r3, [pc, #340]	; (8004428 <main+0xe4c>)
 80042d2:	0011      	movs	r1, r2
 80042d4:	0018      	movs	r0, r3
 80042d6:	f001 fa71 	bl	80057bc <HAL_ADC_PollForConversion>
				// Temp = ((3.3*HAL_ADC_GetValue(&hadc)/1023 - V25)/Avg_Slope)+25;
				 Temp= (float)((HAL_ADC_GetValue(&hadc)*3300/1024 -500)/10-32)*5/9-10;
 80042da:	4b53      	ldr	r3, [pc, #332]	; (8004428 <main+0xe4c>)
 80042dc:	0018      	movs	r0, r3
 80042de:	f001 fb05 	bl	80058ec <HAL_ADC_GetValue>
 80042e2:	0003      	movs	r3, r0
 80042e4:	4a54      	ldr	r2, [pc, #336]	; (8004438 <main+0xe5c>)
 80042e6:	4353      	muls	r3, r2
 80042e8:	0a9b      	lsrs	r3, r3, #10
 80042ea:	3bf5      	subs	r3, #245	; 0xf5
 80042ec:	3bff      	subs	r3, #255	; 0xff
 80042ee:	210a      	movs	r1, #10
 80042f0:	0018      	movs	r0, r3
 80042f2:	f7fb ff23 	bl	800013c <__udivsi3>
 80042f6:	0003      	movs	r3, r0
 80042f8:	3b20      	subs	r3, #32
 80042fa:	0018      	movs	r0, r3
 80042fc:	f7fc fcec 	bl	8000cd8 <__aeabi_ui2f>
 8004300:	1c03      	adds	r3, r0, #0
 8004302:	494e      	ldr	r1, [pc, #312]	; (800443c <main+0xe60>)
 8004304:	1c18      	adds	r0, r3, #0
 8004306:	f7fc fa13 	bl	8000730 <__aeabi_fmul>
 800430a:	1c03      	adds	r3, r0, #0
 800430c:	494c      	ldr	r1, [pc, #304]	; (8004440 <main+0xe64>)
 800430e:	1c18      	adds	r0, r3, #0
 8004310:	f7fc f8f6 	bl	8000500 <__aeabi_fdiv>
 8004314:	1c03      	adds	r3, r0, #0
 8004316:	494b      	ldr	r1, [pc, #300]	; (8004444 <main+0xe68>)
 8004318:	1c18      	adds	r0, r3, #0
 800431a:	f7fc fb2f 	bl	800097c <__aeabi_fsub>
 800431e:	1c03      	adds	r3, r0, #0
 8004320:	1c18      	adds	r0, r3, #0
 8004322:	f7fe fb01 	bl	8002928 <__aeabi_f2d>
 8004326:	0002      	movs	r2, r0
 8004328:	000b      	movs	r3, r1
 800432a:	4947      	ldr	r1, [pc, #284]	; (8004448 <main+0xe6c>)
 800432c:	600a      	str	r2, [r1, #0]
 800432e:	604b      	str	r3, [r1, #4]
				// Temp = (HAL_ADC_GetValue(&hadc)*(3300/1024))*100;
				 uint8_t* text = (unsigned char *)("Temperatura: ");
 8004330:	4b46      	ldr	r3, [pc, #280]	; (800444c <main+0xe70>)
 8004332:	673b      	str	r3, [r7, #112]	; 0x70
				 st7565_drawstring(buffer, 0, 3, text);
 8004334:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004336:	4837      	ldr	r0, [pc, #220]	; (8004414 <main+0xe38>)
 8004338:	2203      	movs	r2, #3
 800433a:	2100      	movs	r1, #0
 800433c:	f7fe ff3f 	bl	80031be <st7565_drawstring>
				 char c[11]="";
 8004340:	2424      	movs	r4, #36	; 0x24
 8004342:	193b      	adds	r3, r7, r4
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	3304      	adds	r3, #4
 800434a:	2207      	movs	r2, #7
 800434c:	2100      	movs	r1, #0
 800434e:	0018      	movs	r0, r3
 8004350:	f003 f938 	bl	80075c4 <memset>
				 sprintf(c,"%.1f",Temp);
 8004354:	4b3c      	ldr	r3, [pc, #240]	; (8004448 <main+0xe6c>)
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	493d      	ldr	r1, [pc, #244]	; (8004450 <main+0xe74>)
 800435c:	1938      	adds	r0, r7, r4
 800435e:	f003 fe15 	bl	8007f8c <siprintf>

				 st7565_drawstring(buffer, 70, 3, c);
 8004362:	193b      	adds	r3, r7, r4
 8004364:	482b      	ldr	r0, [pc, #172]	; (8004414 <main+0xe38>)
 8004366:	2203      	movs	r2, #3
 8004368:	2146      	movs	r1, #70	; 0x46
 800436a:	f7fe ff28 	bl	80031be <st7565_drawstring>
				 if(Temp<25)
 800436e:	4b36      	ldr	r3, [pc, #216]	; (8004448 <main+0xe6c>)
 8004370:	6818      	ldr	r0, [r3, #0]
 8004372:	6859      	ldr	r1, [r3, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	4b37      	ldr	r3, [pc, #220]	; (8004454 <main+0xe78>)
 8004378:	f7fc f86c 	bl	8000454 <__aeabi_dcmplt>
 800437c:	1e03      	subs	r3, r0, #0
 800437e:	d01e      	beq.n	80043be <main+0xde2>
				 {
					 st7565_drawline(buffer, 115, 50, 115, 40, 255);
 8004380:	4824      	ldr	r0, [pc, #144]	; (8004414 <main+0xe38>)
 8004382:	23ff      	movs	r3, #255	; 0xff
 8004384:	9301      	str	r3, [sp, #4]
 8004386:	2328      	movs	r3, #40	; 0x28
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	2373      	movs	r3, #115	; 0x73
 800438c:	2232      	movs	r2, #50	; 0x32
 800438e:	2173      	movs	r1, #115	; 0x73
 8004390:	f7fe ff96 	bl	80032c0 <st7565_drawline>
					 st7565_drawline(buffer, 114, 50, 114, 40, 255);
 8004394:	481f      	ldr	r0, [pc, #124]	; (8004414 <main+0xe38>)
 8004396:	23ff      	movs	r3, #255	; 0xff
 8004398:	9301      	str	r3, [sp, #4]
 800439a:	2328      	movs	r3, #40	; 0x28
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	2372      	movs	r3, #114	; 0x72
 80043a0:	2232      	movs	r2, #50	; 0x32
 80043a2:	2172      	movs	r1, #114	; 0x72
 80043a4:	f7fe ff8c 	bl	80032c0 <st7565_drawline>
					 st7565_drawline(buffer, 116, 50, 116, 40, 255);
 80043a8:	481a      	ldr	r0, [pc, #104]	; (8004414 <main+0xe38>)
 80043aa:	23ff      	movs	r3, #255	; 0xff
 80043ac:	9301      	str	r3, [sp, #4]
 80043ae:	2328      	movs	r3, #40	; 0x28
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	2374      	movs	r3, #116	; 0x74
 80043b4:	2232      	movs	r2, #50	; 0x32
 80043b6:	2174      	movs	r1, #116	; 0x74
 80043b8:	f7fe ff82 	bl	80032c0 <st7565_drawline>
 80043bc:	e09d      	b.n	80044fa <main+0xf1e>
				 }
				 else if (Temp<30)
 80043be:	4b22      	ldr	r3, [pc, #136]	; (8004448 <main+0xe6c>)
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	6859      	ldr	r1, [r3, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	4b24      	ldr	r3, [pc, #144]	; (8004458 <main+0xe7c>)
 80043c8:	f7fc f844 	bl	8000454 <__aeabi_dcmplt>
 80043cc:	1e03      	subs	r3, r0, #0
 80043ce:	d045      	beq.n	800445c <main+0xe80>
				 {
					st7565_drawline(buffer, 115, 50, 115, 30, 255);
 80043d0:	4810      	ldr	r0, [pc, #64]	; (8004414 <main+0xe38>)
 80043d2:	23ff      	movs	r3, #255	; 0xff
 80043d4:	9301      	str	r3, [sp, #4]
 80043d6:	231e      	movs	r3, #30
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	2373      	movs	r3, #115	; 0x73
 80043dc:	2232      	movs	r2, #50	; 0x32
 80043de:	2173      	movs	r1, #115	; 0x73
 80043e0:	f7fe ff6e 	bl	80032c0 <st7565_drawline>
					st7565_drawline(buffer, 114, 50, 114, 30, 255);
 80043e4:	480b      	ldr	r0, [pc, #44]	; (8004414 <main+0xe38>)
 80043e6:	23ff      	movs	r3, #255	; 0xff
 80043e8:	9301      	str	r3, [sp, #4]
 80043ea:	231e      	movs	r3, #30
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	2372      	movs	r3, #114	; 0x72
 80043f0:	2232      	movs	r2, #50	; 0x32
 80043f2:	2172      	movs	r1, #114	; 0x72
 80043f4:	f7fe ff64 	bl	80032c0 <st7565_drawline>
					st7565_drawline(buffer, 116, 50, 116, 30, 255);
 80043f8:	4806      	ldr	r0, [pc, #24]	; (8004414 <main+0xe38>)
 80043fa:	23ff      	movs	r3, #255	; 0xff
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	231e      	movs	r3, #30
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	2374      	movs	r3, #116	; 0x74
 8004404:	2232      	movs	r2, #50	; 0x32
 8004406:	2174      	movs	r1, #116	; 0x74
 8004408:	f7fe ff5a 	bl	80032c0 <st7565_drawline>
 800440c:	e075      	b.n	80044fa <main+0xf1e>
 800440e:	46c0      	nop			; (mov r8, r8)
 8004410:	400c0000 	.word	0x400c0000
 8004414:	20000000 	.word	0x20000000
 8004418:	40100000 	.word	0x40100000
 800441c:	40120000 	.word	0x40120000
 8004420:	40140000 	.word	0x40140000
 8004424:	40160000 	.word	0x40160000
 8004428:	20002a28 	.word	0x20002a28
 800442c:	48000800 	.word	0x48000800
 8004430:	20001c08 	.word	0x20001c08
 8004434:	00001001 	.word	0x00001001
 8004438:	00000ce4 	.word	0x00000ce4
 800443c:	40a00000 	.word	0x40a00000
 8004440:	41100000 	.word	0x41100000
 8004444:	41200000 	.word	0x41200000
 8004448:	20002a20 	.word	0x20002a20
 800444c:	0800a698 	.word	0x0800a698
 8004450:	0800a680 	.word	0x0800a680
 8004454:	40390000 	.word	0x40390000
 8004458:	403e0000 	.word	0x403e0000
				 }
				 else if (Temp<35)
 800445c:	4bc9      	ldr	r3, [pc, #804]	; (8004784 <main+0x11a8>)
 800445e:	6818      	ldr	r0, [r3, #0]
 8004460:	6859      	ldr	r1, [r3, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	4bc8      	ldr	r3, [pc, #800]	; (8004788 <main+0x11ac>)
 8004466:	f7fb fff5 	bl	8000454 <__aeabi_dcmplt>
 800446a:	1e03      	subs	r3, r0, #0
 800446c:	d01e      	beq.n	80044ac <main+0xed0>
				 {
					st7565_drawline(buffer, 115, 50, 115, 20, 255);
 800446e:	48c7      	ldr	r0, [pc, #796]	; (800478c <main+0x11b0>)
 8004470:	23ff      	movs	r3, #255	; 0xff
 8004472:	9301      	str	r3, [sp, #4]
 8004474:	2314      	movs	r3, #20
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	2373      	movs	r3, #115	; 0x73
 800447a:	2232      	movs	r2, #50	; 0x32
 800447c:	2173      	movs	r1, #115	; 0x73
 800447e:	f7fe ff1f 	bl	80032c0 <st7565_drawline>
					st7565_drawline(buffer, 114, 50, 114, 20, 255);
 8004482:	48c2      	ldr	r0, [pc, #776]	; (800478c <main+0x11b0>)
 8004484:	23ff      	movs	r3, #255	; 0xff
 8004486:	9301      	str	r3, [sp, #4]
 8004488:	2314      	movs	r3, #20
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	2372      	movs	r3, #114	; 0x72
 800448e:	2232      	movs	r2, #50	; 0x32
 8004490:	2172      	movs	r1, #114	; 0x72
 8004492:	f7fe ff15 	bl	80032c0 <st7565_drawline>
					st7565_drawline(buffer, 116, 50, 116, 20, 255);
 8004496:	48bd      	ldr	r0, [pc, #756]	; (800478c <main+0x11b0>)
 8004498:	23ff      	movs	r3, #255	; 0xff
 800449a:	9301      	str	r3, [sp, #4]
 800449c:	2314      	movs	r3, #20
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	2374      	movs	r3, #116	; 0x74
 80044a2:	2232      	movs	r2, #50	; 0x32
 80044a4:	2174      	movs	r1, #116	; 0x74
 80044a6:	f7fe ff0b 	bl	80032c0 <st7565_drawline>
 80044aa:	e026      	b.n	80044fa <main+0xf1e>
				 }
				 else if (Temp>=35)
 80044ac:	4bb5      	ldr	r3, [pc, #724]	; (8004784 <main+0x11a8>)
 80044ae:	6818      	ldr	r0, [r3, #0]
 80044b0:	6859      	ldr	r1, [r3, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	4bb4      	ldr	r3, [pc, #720]	; (8004788 <main+0x11ac>)
 80044b6:	f7fb ffeb 	bl	8000490 <__aeabi_dcmpge>
 80044ba:	1e03      	subs	r3, r0, #0
 80044bc:	d01d      	beq.n	80044fa <main+0xf1e>
				 {
					st7565_drawline(buffer, 115, 50, 115, 10, 255);
 80044be:	48b3      	ldr	r0, [pc, #716]	; (800478c <main+0x11b0>)
 80044c0:	23ff      	movs	r3, #255	; 0xff
 80044c2:	9301      	str	r3, [sp, #4]
 80044c4:	230a      	movs	r3, #10
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	2373      	movs	r3, #115	; 0x73
 80044ca:	2232      	movs	r2, #50	; 0x32
 80044cc:	2173      	movs	r1, #115	; 0x73
 80044ce:	f7fe fef7 	bl	80032c0 <st7565_drawline>
					st7565_drawline(buffer, 114, 50, 114, 10, 255);
 80044d2:	48ae      	ldr	r0, [pc, #696]	; (800478c <main+0x11b0>)
 80044d4:	23ff      	movs	r3, #255	; 0xff
 80044d6:	9301      	str	r3, [sp, #4]
 80044d8:	230a      	movs	r3, #10
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	2372      	movs	r3, #114	; 0x72
 80044de:	2232      	movs	r2, #50	; 0x32
 80044e0:	2172      	movs	r1, #114	; 0x72
 80044e2:	f7fe feed 	bl	80032c0 <st7565_drawline>
					st7565_drawline(buffer, 116, 50, 116, 10, 255);
 80044e6:	48a9      	ldr	r0, [pc, #676]	; (800478c <main+0x11b0>)
 80044e8:	23ff      	movs	r3, #255	; 0xff
 80044ea:	9301      	str	r3, [sp, #4]
 80044ec:	230a      	movs	r3, #10
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	2374      	movs	r3, #116	; 0x74
 80044f2:	2232      	movs	r2, #50	; 0x32
 80044f4:	2174      	movs	r1, #116	; 0x74
 80044f6:	f7fe fee3 	bl	80032c0 <st7565_drawline>
				 }
				 st7565_write_buffer(buffer);
 80044fa:	4ba4      	ldr	r3, [pc, #656]	; (800478c <main+0x11b0>)
 80044fc:	0018      	movs	r0, r3
 80044fe:	f7fe fa79 	bl	80029f4 <st7565_write_buffer>
						butonapasat = 0;
						HAL_Delay(500);
						break;
					}
				}
				break;
 8004502:	e256      	b.n	80049b2 <main+0x13d6>
					ADC_Select_CH0(1);
 8004504:	2001      	movs	r0, #1
 8004506:	f000 fb35 	bl	8004b74 <ADC_Select_CH0>
					HAL_ADC_Start(&hadc);
 800450a:	4ba1      	ldr	r3, [pc, #644]	; (8004790 <main+0x11b4>)
 800450c:	0018      	movs	r0, r3
 800450e:	f001 f8c1 	bl	8005694 <HAL_ADC_Start>
					HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8004512:	2301      	movs	r3, #1
 8004514:	425a      	negs	r2, r3
 8004516:	4b9e      	ldr	r3, [pc, #632]	; (8004790 <main+0x11b4>)
 8004518:	0011      	movs	r1, r2
 800451a:	0018      	movs	r0, r3
 800451c:	f001 f94e 	bl	80057bc <HAL_ADC_PollForConversion>
					uint16_t joystickinput = HAL_ADC_GetValue(&hadc);
 8004520:	4b9b      	ldr	r3, [pc, #620]	; (8004790 <main+0x11b4>)
 8004522:	0018      	movs	r0, r3
 8004524:	f001 f9e2 	bl	80058ec <HAL_ADC_GetValue>
 8004528:	0002      	movs	r2, r0
 800452a:	2174      	movs	r1, #116	; 0x74
 800452c:	187b      	adds	r3, r7, r1
 800452e:	801a      	strh	r2, [r3, #0]
					if (joystickinput>100&&joystickinput<350)
 8004530:	000a      	movs	r2, r1
 8004532:	18bb      	adds	r3, r7, r2
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	2b64      	cmp	r3, #100	; 0x64
 8004538:	d800      	bhi.n	800453c <main+0xf60>
 800453a:	e23a      	b.n	80049b2 <main+0x13d6>
 800453c:	18bb      	adds	r3, r7, r2
 800453e:	881a      	ldrh	r2, [r3, #0]
 8004540:	23af      	movs	r3, #175	; 0xaf
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	429a      	cmp	r2, r3
 8004546:	d300      	bcc.n	800454a <main+0xf6e>
 8004548:	e233      	b.n	80049b2 <main+0x13d6>
						indexmeniu=0;
 800454a:	23ce      	movs	r3, #206	; 0xce
 800454c:	18fb      	adds	r3, r7, r3
 800454e:	2200      	movs	r2, #0
 8004550:	701a      	strb	r2, [r3, #0]
						butonapasat = 0;
 8004552:	23cc      	movs	r3, #204	; 0xcc
 8004554:	18fb      	adds	r3, r7, r3
 8004556:	2200      	movs	r2, #0
 8004558:	701a      	strb	r2, [r3, #0]
						HAL_Delay(500);
 800455a:	23fa      	movs	r3, #250	; 0xfa
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	0018      	movs	r0, r3
 8004560:	f000 ff34 	bl	80053cc <HAL_Delay>
						break;
 8004564:	e22c      	b.n	80049c0 <main+0x13e4>
			}
			case 4://minigame
			{
				if((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 )&&(butonapasat == 1))
 8004566:	2380      	movs	r3, #128	; 0x80
 8004568:	019b      	lsls	r3, r3, #6
 800456a:	4a8a      	ldr	r2, [pc, #552]	; (8004794 <main+0x11b8>)
 800456c:	0019      	movs	r1, r3
 800456e:	0010      	movs	r0, r2
 8004570:	f001 fe44 	bl	80061fc <HAL_GPIO_ReadPin>
 8004574:	1e03      	subs	r3, r0, #0
 8004576:	d113      	bne.n	80045a0 <main+0xfc4>
 8004578:	23cc      	movs	r3, #204	; 0xcc
 800457a:	18fb      	adds	r3, r7, r3
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d10e      	bne.n	80045a0 <main+0xfc4>
					{
					while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 )
 8004582:	46c0      	nop			; (mov r8, r8)
 8004584:	2380      	movs	r3, #128	; 0x80
 8004586:	019b      	lsls	r3, r3, #6
 8004588:	4a82      	ldr	r2, [pc, #520]	; (8004794 <main+0x11b8>)
 800458a:	0019      	movs	r1, r3
 800458c:	0010      	movs	r0, r2
 800458e:	f001 fe35 	bl	80061fc <HAL_GPIO_ReadPin>
 8004592:	1e03      	subs	r3, r0, #0
 8004594:	d0f6      	beq.n	8004584 <main+0xfa8>
					{
					}
					butonapasat = 0;
 8004596:	23cc      	movs	r3, #204	; 0xcc
 8004598:	18fb      	adds	r3, r7, r3
 800459a:	2200      	movs	r2, #0
 800459c:	701a      	strb	r2, [r3, #0]
 800459e:	e01b      	b.n	80045d8 <main+0xffc>
					}

				else if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 )&&(butonapasat == 0))
 80045a0:	2380      	movs	r3, #128	; 0x80
 80045a2:	019b      	lsls	r3, r3, #6
 80045a4:	4a7b      	ldr	r2, [pc, #492]	; (8004794 <main+0x11b8>)
 80045a6:	0019      	movs	r1, r3
 80045a8:	0010      	movs	r0, r2
 80045aa:	f001 fe27 	bl	80061fc <HAL_GPIO_ReadPin>
 80045ae:	1e03      	subs	r3, r0, #0
 80045b0:	d112      	bne.n	80045d8 <main+0xffc>
 80045b2:	23cc      	movs	r3, #204	; 0xcc
 80045b4:	18fb      	adds	r3, r7, r3
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10d      	bne.n	80045d8 <main+0xffc>
				{
					while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 )
 80045bc:	46c0      	nop			; (mov r8, r8)
 80045be:	2380      	movs	r3, #128	; 0x80
 80045c0:	019b      	lsls	r3, r3, #6
 80045c2:	4a74      	ldr	r2, [pc, #464]	; (8004794 <main+0x11b8>)
 80045c4:	0019      	movs	r1, r3
 80045c6:	0010      	movs	r0, r2
 80045c8:	f001 fe18 	bl	80061fc <HAL_GPIO_ReadPin>
 80045cc:	1e03      	subs	r3, r0, #0
 80045ce:	d0f6      	beq.n	80045be <main+0xfe2>
					{
					}
					butonapasat = 1;
 80045d0:	23cc      	movs	r3, #204	; 0xcc
 80045d2:	18fb      	adds	r3, r7, r3
 80045d4:	2201      	movs	r2, #1
 80045d6:	701a      	strb	r2, [r3, #0]
				}
				if(butonapasat == 0)
 80045d8:	23cc      	movs	r3, #204	; 0xcc
 80045da:	18fb      	adds	r3, r7, r3
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <main+0x1014>
				{
				st7565_drawfallingbitmap(buffer, pozafall, 128, 64);
 80045e2:	496d      	ldr	r1, [pc, #436]	; (8004798 <main+0x11bc>)
 80045e4:	4869      	ldr	r0, [pc, #420]	; (800478c <main+0x11b0>)
 80045e6:	2340      	movs	r3, #64	; 0x40
 80045e8:	2280      	movs	r2, #128	; 0x80
 80045ea:	f7fe fbe5 	bl	8002db8 <st7565_drawfallingbitmap>
						butonapasat = 0;
						HAL_Delay(500);
						break;
					}
				}
				break;
 80045ee:	e1e2      	b.n	80049b6 <main+0x13da>
					ADC_Select_CH0(1);
 80045f0:	2001      	movs	r0, #1
 80045f2:	f000 fabf 	bl	8004b74 <ADC_Select_CH0>
					HAL_ADC_Start(&hadc);
 80045f6:	4b66      	ldr	r3, [pc, #408]	; (8004790 <main+0x11b4>)
 80045f8:	0018      	movs	r0, r3
 80045fa:	f001 f84b 	bl	8005694 <HAL_ADC_Start>
					HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80045fe:	2301      	movs	r3, #1
 8004600:	425a      	negs	r2, r3
 8004602:	4b63      	ldr	r3, [pc, #396]	; (8004790 <main+0x11b4>)
 8004604:	0011      	movs	r1, r2
 8004606:	0018      	movs	r0, r3
 8004608:	f001 f8d8 	bl	80057bc <HAL_ADC_PollForConversion>
					uint16_t joystickinput = HAL_ADC_GetValue(&hadc);
 800460c:	4b60      	ldr	r3, [pc, #384]	; (8004790 <main+0x11b4>)
 800460e:	0018      	movs	r0, r3
 8004610:	f001 f96c 	bl	80058ec <HAL_ADC_GetValue>
 8004614:	0002      	movs	r2, r0
 8004616:	2176      	movs	r1, #118	; 0x76
 8004618:	187b      	adds	r3, r7, r1
 800461a:	801a      	strh	r2, [r3, #0]
					if (joystickinput>100&&joystickinput<350)
 800461c:	000a      	movs	r2, r1
 800461e:	18bb      	adds	r3, r7, r2
 8004620:	881b      	ldrh	r3, [r3, #0]
 8004622:	2b64      	cmp	r3, #100	; 0x64
 8004624:	d800      	bhi.n	8004628 <main+0x104c>
 8004626:	e1c6      	b.n	80049b6 <main+0x13da>
 8004628:	18bb      	adds	r3, r7, r2
 800462a:	881a      	ldrh	r2, [r3, #0]
 800462c:	23af      	movs	r3, #175	; 0xaf
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	429a      	cmp	r2, r3
 8004632:	d300      	bcc.n	8004636 <main+0x105a>
 8004634:	e1bf      	b.n	80049b6 <main+0x13da>
						indexmeniu=0;
 8004636:	23ce      	movs	r3, #206	; 0xce
 8004638:	18fb      	adds	r3, r7, r3
 800463a:	2200      	movs	r2, #0
 800463c:	701a      	strb	r2, [r3, #0]
						butonapasat = 0;
 800463e:	23cc      	movs	r3, #204	; 0xcc
 8004640:	18fb      	adds	r3, r7, r3
 8004642:	2200      	movs	r2, #0
 8004644:	701a      	strb	r2, [r3, #0]
						HAL_Delay(500);
 8004646:	23fa      	movs	r3, #250	; 0xfa
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	0018      	movs	r0, r3
 800464c:	f000 febe 	bl	80053cc <HAL_Delay>
						break;
 8004650:	e1b6      	b.n	80049c0 <main+0x13e4>
			}
			case 5://prezentare
			{
				if((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 )&&(butonapasat == 1))
 8004652:	2380      	movs	r3, #128	; 0x80
 8004654:	019b      	lsls	r3, r3, #6
 8004656:	4a4f      	ldr	r2, [pc, #316]	; (8004794 <main+0x11b8>)
 8004658:	0019      	movs	r1, r3
 800465a:	0010      	movs	r0, r2
 800465c:	f001 fdce 	bl	80061fc <HAL_GPIO_ReadPin>
 8004660:	1e03      	subs	r3, r0, #0
 8004662:	d113      	bne.n	800468c <main+0x10b0>
 8004664:	23cc      	movs	r3, #204	; 0xcc
 8004666:	18fb      	adds	r3, r7, r3
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d10e      	bne.n	800468c <main+0x10b0>
					{
					while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 )
 800466e:	46c0      	nop			; (mov r8, r8)
 8004670:	2380      	movs	r3, #128	; 0x80
 8004672:	019b      	lsls	r3, r3, #6
 8004674:	4a47      	ldr	r2, [pc, #284]	; (8004794 <main+0x11b8>)
 8004676:	0019      	movs	r1, r3
 8004678:	0010      	movs	r0, r2
 800467a:	f001 fdbf 	bl	80061fc <HAL_GPIO_ReadPin>
 800467e:	1e03      	subs	r3, r0, #0
 8004680:	d0f6      	beq.n	8004670 <main+0x1094>
					{
					}
					butonapasat = 0;
 8004682:	23cc      	movs	r3, #204	; 0xcc
 8004684:	18fb      	adds	r3, r7, r3
 8004686:	2200      	movs	r2, #0
 8004688:	701a      	strb	r2, [r3, #0]
 800468a:	e01b      	b.n	80046c4 <main+0x10e8>
					}

				else if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 )&&(butonapasat == 0))
 800468c:	2380      	movs	r3, #128	; 0x80
 800468e:	019b      	lsls	r3, r3, #6
 8004690:	4a40      	ldr	r2, [pc, #256]	; (8004794 <main+0x11b8>)
 8004692:	0019      	movs	r1, r3
 8004694:	0010      	movs	r0, r2
 8004696:	f001 fdb1 	bl	80061fc <HAL_GPIO_ReadPin>
 800469a:	1e03      	subs	r3, r0, #0
 800469c:	d112      	bne.n	80046c4 <main+0x10e8>
 800469e:	23cc      	movs	r3, #204	; 0xcc
 80046a0:	18fb      	adds	r3, r7, r3
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10d      	bne.n	80046c4 <main+0x10e8>
				{
					while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 )
 80046a8:	46c0      	nop			; (mov r8, r8)
 80046aa:	2380      	movs	r3, #128	; 0x80
 80046ac:	019b      	lsls	r3, r3, #6
 80046ae:	4a39      	ldr	r2, [pc, #228]	; (8004794 <main+0x11b8>)
 80046b0:	0019      	movs	r1, r3
 80046b2:	0010      	movs	r0, r2
 80046b4:	f001 fda2 	bl	80061fc <HAL_GPIO_ReadPin>
 80046b8:	1e03      	subs	r3, r0, #0
 80046ba:	d0f6      	beq.n	80046aa <main+0x10ce>
					{
					}
					butonapasat = 1;
 80046bc:	23cc      	movs	r3, #204	; 0xcc
 80046be:	18fb      	adds	r3, r7, r3
 80046c0:	2201      	movs	r2, #1
 80046c2:	701a      	strb	r2, [r3, #0]
				}
				if(butonapasat == 0)
 80046c4:	23cc      	movs	r3, #204	; 0xcc
 80046c6:	18fb      	adds	r3, r7, r3
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10c      	bne.n	80046e8 <main+0x110c>
				{
				int32_t text = (unsigned char *)("Sovaiala Alexandru     PREH WORKSHOP            2022 ");
 80046ce:	4b33      	ldr	r3, [pc, #204]	; (800479c <main+0x11c0>)
 80046d0:	67bb      	str	r3, [r7, #120]	; 0x78
				st7565_drawstring(buffer, 10, 2, text);
 80046d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046d4:	482d      	ldr	r0, [pc, #180]	; (800478c <main+0x11b0>)
 80046d6:	2202      	movs	r2, #2
 80046d8:	210a      	movs	r1, #10
 80046da:	f7fe fd70 	bl	80031be <st7565_drawstring>
				st7565_write_buffer(buffer);
 80046de:	4b2b      	ldr	r3, [pc, #172]	; (800478c <main+0x11b0>)
 80046e0:	0018      	movs	r0, r3
 80046e2:	f7fe f987 	bl	80029f4 <st7565_write_buffer>
						HAL_Delay(500);
						break;
					}
				}

				break;
 80046e6:	e168      	b.n	80049ba <main+0x13de>
					ADC_Select_CH0(1);
 80046e8:	2001      	movs	r0, #1
 80046ea:	f000 fa43 	bl	8004b74 <ADC_Select_CH0>
					HAL_ADC_Start(&hadc);
 80046ee:	4b28      	ldr	r3, [pc, #160]	; (8004790 <main+0x11b4>)
 80046f0:	0018      	movs	r0, r3
 80046f2:	f000 ffcf 	bl	8005694 <HAL_ADC_Start>
					HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80046f6:	2301      	movs	r3, #1
 80046f8:	425a      	negs	r2, r3
 80046fa:	4b25      	ldr	r3, [pc, #148]	; (8004790 <main+0x11b4>)
 80046fc:	0011      	movs	r1, r2
 80046fe:	0018      	movs	r0, r3
 8004700:	f001 f85c 	bl	80057bc <HAL_ADC_PollForConversion>
					uint16_t joystickinput = HAL_ADC_GetValue(&hadc);
 8004704:	4b22      	ldr	r3, [pc, #136]	; (8004790 <main+0x11b4>)
 8004706:	0018      	movs	r0, r3
 8004708:	f001 f8f0 	bl	80058ec <HAL_ADC_GetValue>
 800470c:	0002      	movs	r2, r0
 800470e:	217e      	movs	r1, #126	; 0x7e
 8004710:	187b      	adds	r3, r7, r1
 8004712:	801a      	strh	r2, [r3, #0]
					if (joystickinput>100&&joystickinput<350)
 8004714:	000a      	movs	r2, r1
 8004716:	18bb      	adds	r3, r7, r2
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	2b64      	cmp	r3, #100	; 0x64
 800471c:	d800      	bhi.n	8004720 <main+0x1144>
 800471e:	e14c      	b.n	80049ba <main+0x13de>
 8004720:	18bb      	adds	r3, r7, r2
 8004722:	881a      	ldrh	r2, [r3, #0]
 8004724:	23af      	movs	r3, #175	; 0xaf
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	429a      	cmp	r2, r3
 800472a:	d300      	bcc.n	800472e <main+0x1152>
 800472c:	e145      	b.n	80049ba <main+0x13de>
						indexmeniu=0;
 800472e:	23ce      	movs	r3, #206	; 0xce
 8004730:	18fb      	adds	r3, r7, r3
 8004732:	2200      	movs	r2, #0
 8004734:	701a      	strb	r2, [r3, #0]
						butonapasat = 0;
 8004736:	23cc      	movs	r3, #204	; 0xcc
 8004738:	18fb      	adds	r3, r7, r3
 800473a:	2200      	movs	r2, #0
 800473c:	701a      	strb	r2, [r3, #0]
						HAL_Delay(500);
 800473e:	23fa      	movs	r3, #250	; 0xfa
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	0018      	movs	r0, r3
 8004744:	f000 fe42 	bl	80053cc <HAL_Delay>
						break;
 8004748:	e13a      	b.n	80049c0 <main+0x13e4>
			}
			case 6://istoric
			{
				if((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 )&&(butonapasat == 1))
 800474a:	2380      	movs	r3, #128	; 0x80
 800474c:	019b      	lsls	r3, r3, #6
 800474e:	4a11      	ldr	r2, [pc, #68]	; (8004794 <main+0x11b8>)
 8004750:	0019      	movs	r1, r3
 8004752:	0010      	movs	r0, r2
 8004754:	f001 fd52 	bl	80061fc <HAL_GPIO_ReadPin>
 8004758:	1e03      	subs	r3, r0, #0
 800475a:	d121      	bne.n	80047a0 <main+0x11c4>
 800475c:	23cc      	movs	r3, #204	; 0xcc
 800475e:	18fb      	adds	r3, r7, r3
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d11c      	bne.n	80047a0 <main+0x11c4>
					{
					while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 )
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	2380      	movs	r3, #128	; 0x80
 800476a:	019b      	lsls	r3, r3, #6
 800476c:	4a09      	ldr	r2, [pc, #36]	; (8004794 <main+0x11b8>)
 800476e:	0019      	movs	r1, r3
 8004770:	0010      	movs	r0, r2
 8004772:	f001 fd43 	bl	80061fc <HAL_GPIO_ReadPin>
 8004776:	1e03      	subs	r3, r0, #0
 8004778:	d0f6      	beq.n	8004768 <main+0x118c>
					{
					}
					butonapasat = 0;
 800477a:	23cc      	movs	r3, #204	; 0xcc
 800477c:	18fb      	adds	r3, r7, r3
 800477e:	2200      	movs	r2, #0
 8004780:	701a      	strb	r2, [r3, #0]
 8004782:	e029      	b.n	80047d8 <main+0x11fc>
 8004784:	20002a20 	.word	0x20002a20
 8004788:	40418000 	.word	0x40418000
 800478c:	20000000 	.word	0x20000000
 8004790:	20002a28 	.word	0x20002a28
 8004794:	48000800 	.word	0x48000800
 8004798:	20002408 	.word	0x20002408
 800479c:	0800a6a8 	.word	0x0800a6a8
					}

				else if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 )&&(butonapasat == 0))
 80047a0:	2380      	movs	r3, #128	; 0x80
 80047a2:	019b      	lsls	r3, r3, #6
 80047a4:	4a8e      	ldr	r2, [pc, #568]	; (80049e0 <main+0x1404>)
 80047a6:	0019      	movs	r1, r3
 80047a8:	0010      	movs	r0, r2
 80047aa:	f001 fd27 	bl	80061fc <HAL_GPIO_ReadPin>
 80047ae:	1e03      	subs	r3, r0, #0
 80047b0:	d112      	bne.n	80047d8 <main+0x11fc>
 80047b2:	23cc      	movs	r3, #204	; 0xcc
 80047b4:	18fb      	adds	r3, r7, r3
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10d      	bne.n	80047d8 <main+0x11fc>
				{
					while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 )
 80047bc:	46c0      	nop			; (mov r8, r8)
 80047be:	2380      	movs	r3, #128	; 0x80
 80047c0:	019b      	lsls	r3, r3, #6
 80047c2:	4a87      	ldr	r2, [pc, #540]	; (80049e0 <main+0x1404>)
 80047c4:	0019      	movs	r1, r3
 80047c6:	0010      	movs	r0, r2
 80047c8:	f001 fd18 	bl	80061fc <HAL_GPIO_ReadPin>
 80047cc:	1e03      	subs	r3, r0, #0
 80047ce:	d0f6      	beq.n	80047be <main+0x11e2>
					{
					}
					butonapasat = 1;
 80047d0:	23cc      	movs	r3, #204	; 0xcc
 80047d2:	18fb      	adds	r3, r7, r3
 80047d4:	2201      	movs	r2, #1
 80047d6:	701a      	strb	r2, [r3, #0]
				}
				if(butonapasat == 0)
 80047d8:	23cc      	movs	r3, #204	; 0xcc
 80047da:	18fb      	adds	r3, r7, r3
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d000      	beq.n	80047e4 <main+0x1208>
 80047e2:	e0b3      	b.n	800494c <main+0x1370>
				{
				int32_t text = (unsigned char *)(" Volti      MiliV ");
 80047e4:	4b7f      	ldr	r3, [pc, #508]	; (80049e4 <main+0x1408>)
 80047e6:	2288      	movs	r2, #136	; 0x88
 80047e8:	18b9      	adds	r1, r7, r2
 80047ea:	600b      	str	r3, [r1, #0]
				st7565_drawstring(buffer, 10, 0, text);
 80047ec:	18bb      	adds	r3, r7, r2
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	487d      	ldr	r0, [pc, #500]	; (80049e8 <main+0x140c>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	210a      	movs	r1, #10
 80047f6:	f7fe fce2 	bl	80031be <st7565_drawstring>

				for (int nr=0;nr<7;nr++)
 80047fa:	2300      	movs	r3, #0
 80047fc:	22c0      	movs	r2, #192	; 0xc0
 80047fe:	18ba      	adds	r2, r7, r2
 8004800:	6013      	str	r3, [r2, #0]
 8004802:	e06d      	b.n	80048e0 <main+0x1304>
				{
					char c[11]="";
 8004804:	2418      	movs	r4, #24
 8004806:	193b      	adds	r3, r7, r4
 8004808:	2200      	movs	r2, #0
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	3304      	adds	r3, #4
 800480e:	2207      	movs	r2, #7
 8004810:	2100      	movs	r1, #0
 8004812:	0018      	movs	r0, r3
 8004814:	f002 fed6 	bl	80075c4 <memset>
					double voltage = istoric[nr]*3.3/1024;
 8004818:	233c      	movs	r3, #60	; 0x3c
 800481a:	18fb      	adds	r3, r7, r3
 800481c:	25c0      	movs	r5, #192	; 0xc0
 800481e:	197a      	adds	r2, r7, r5
 8004820:	6812      	ldr	r2, [r2, #0]
 8004822:	0092      	lsls	r2, r2, #2
 8004824:	58d3      	ldr	r3, [r2, r3]
 8004826:	0018      	movs	r0, r3
 8004828:	f7fe f828 	bl	800287c <__aeabi_i2d>
 800482c:	4a6f      	ldr	r2, [pc, #444]	; (80049ec <main+0x1410>)
 800482e:	4b70      	ldr	r3, [pc, #448]	; (80049f0 <main+0x1414>)
 8004830:	f7fd f9d2 	bl	8001bd8 <__aeabi_dmul>
 8004834:	0002      	movs	r2, r0
 8004836:	000b      	movs	r3, r1
 8004838:	0010      	movs	r0, r2
 800483a:	0019      	movs	r1, r3
 800483c:	2200      	movs	r2, #0
 800483e:	4b6d      	ldr	r3, [pc, #436]	; (80049f4 <main+0x1418>)
 8004840:	f7fc fdc8 	bl	80013d4 <__aeabi_ddiv>
 8004844:	0002      	movs	r2, r0
 8004846:	000b      	movs	r3, r1
 8004848:	2680      	movs	r6, #128	; 0x80
 800484a:	19b9      	adds	r1, r7, r6
 800484c:	600a      	str	r2, [r1, #0]
 800484e:	604b      	str	r3, [r1, #4]
					sprintf(c,"%.1f",voltage);
 8004850:	19bb      	adds	r3, r7, r6
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	4968      	ldr	r1, [pc, #416]	; (80049f8 <main+0x141c>)
 8004858:	1938      	adds	r0, r7, r4
 800485a:	f003 fb97 	bl	8007f8c <siprintf>
					char sirgol[11]="     ";
 800485e:	230c      	movs	r3, #12
 8004860:	18f9      	adds	r1, r7, r3
 8004862:	4a66      	ldr	r2, [pc, #408]	; (80049fc <main+0x1420>)
 8004864:	000b      	movs	r3, r1
 8004866:	6810      	ldr	r0, [r2, #0]
 8004868:	6018      	str	r0, [r3, #0]
 800486a:	8892      	ldrh	r2, [r2, #4]
 800486c:	809a      	strh	r2, [r3, #4]
 800486e:	2306      	movs	r3, #6
 8004870:	18cb      	adds	r3, r1, r3
 8004872:	2205      	movs	r2, #5
 8004874:	2100      	movs	r1, #0
 8004876:	0018      	movs	r0, r3
 8004878:	f002 fea4 	bl	80075c4 <memset>
					strcat(c,sirgol);
 800487c:	230c      	movs	r3, #12
 800487e:	18fa      	adds	r2, r7, r3
 8004880:	193b      	adds	r3, r7, r4
 8004882:	0011      	movs	r1, r2
 8004884:	0018      	movs	r0, r3
 8004886:	f003 fba1 	bl	8007fcc <strcat>
					char c2[11]="";
 800488a:	003b      	movs	r3, r7
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	3304      	adds	r3, #4
 8004892:	2207      	movs	r2, #7
 8004894:	2100      	movs	r1, #0
 8004896:	0018      	movs	r0, r3
 8004898:	f002 fe94 	bl	80075c4 <memset>
					sprintf(c2,"%.3f",voltage*1000);
 800489c:	2200      	movs	r2, #0
 800489e:	4b58      	ldr	r3, [pc, #352]	; (8004a00 <main+0x1424>)
 80048a0:	19b9      	adds	r1, r7, r6
 80048a2:	6808      	ldr	r0, [r1, #0]
 80048a4:	6849      	ldr	r1, [r1, #4]
 80048a6:	f7fd f997 	bl	8001bd8 <__aeabi_dmul>
 80048aa:	0002      	movs	r2, r0
 80048ac:	000b      	movs	r3, r1
 80048ae:	4955      	ldr	r1, [pc, #340]	; (8004a04 <main+0x1428>)
 80048b0:	0038      	movs	r0, r7
 80048b2:	f003 fb6b 	bl	8007f8c <siprintf>
					strcat(c,c2);
 80048b6:	003a      	movs	r2, r7
 80048b8:	193b      	adds	r3, r7, r4
 80048ba:	0011      	movs	r1, r2
 80048bc:	0018      	movs	r0, r3
 80048be:	f003 fb85 	bl	8007fcc <strcat>
					 st7565_drawstring(buffer, 20, nr+1, c);
 80048c2:	197b      	adds	r3, r7, r5
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	3301      	adds	r3, #1
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	193b      	adds	r3, r7, r4
 80048ce:	4846      	ldr	r0, [pc, #280]	; (80049e8 <main+0x140c>)
 80048d0:	2114      	movs	r1, #20
 80048d2:	f7fe fc74 	bl	80031be <st7565_drawstring>
				for (int nr=0;nr<7;nr++)
 80048d6:	197b      	adds	r3, r7, r5
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	3301      	adds	r3, #1
 80048dc:	197a      	adds	r2, r7, r5
 80048de:	6013      	str	r3, [r2, #0]
 80048e0:	23c0      	movs	r3, #192	; 0xc0
 80048e2:	18fb      	adds	r3, r7, r3
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b06      	cmp	r3, #6
 80048e8:	dd8c      	ble.n	8004804 <main+0x1228>
				}

				 	for (int nr=0;nr<8;nr++)
 80048ea:	2300      	movs	r3, #0
 80048ec:	22bc      	movs	r2, #188	; 0xbc
 80048ee:	18ba      	adds	r2, r7, r2
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	e021      	b.n	8004938 <main+0x135c>
				 	{
				 		st7565_drawrect(buffer, 0, nr*8, 64, 8, 1);
 80048f4:	24bc      	movs	r4, #188	; 0xbc
 80048f6:	193b      	adds	r3, r7, r4
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	00db      	lsls	r3, r3, #3
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	4839      	ldr	r0, [pc, #228]	; (80049e8 <main+0x140c>)
 8004902:	2301      	movs	r3, #1
 8004904:	9301      	str	r3, [sp, #4]
 8004906:	2308      	movs	r3, #8
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	2340      	movs	r3, #64	; 0x40
 800490c:	2100      	movs	r1, #0
 800490e:	f7fe fde2 	bl	80034d6 <st7565_drawrect>
				 		st7565_drawrect(buffer, 64,nr*8, 64, 8, 1);
 8004912:	193b      	adds	r3, r7, r4
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	b2db      	uxtb	r3, r3
 8004918:	00db      	lsls	r3, r3, #3
 800491a:	b2da      	uxtb	r2, r3
 800491c:	4832      	ldr	r0, [pc, #200]	; (80049e8 <main+0x140c>)
 800491e:	2301      	movs	r3, #1
 8004920:	9301      	str	r3, [sp, #4]
 8004922:	2308      	movs	r3, #8
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	2340      	movs	r3, #64	; 0x40
 8004928:	2140      	movs	r1, #64	; 0x40
 800492a:	f7fe fdd4 	bl	80034d6 <st7565_drawrect>
				 	for (int nr=0;nr<8;nr++)
 800492e:	193b      	adds	r3, r7, r4
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	3301      	adds	r3, #1
 8004934:	193a      	adds	r2, r7, r4
 8004936:	6013      	str	r3, [r2, #0]
 8004938:	23bc      	movs	r3, #188	; 0xbc
 800493a:	18fb      	adds	r3, r7, r3
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2b07      	cmp	r3, #7
 8004940:	ddd8      	ble.n	80048f4 <main+0x1318>
				 	}

				st7565_write_buffer(buffer);
 8004942:	4b29      	ldr	r3, [pc, #164]	; (80049e8 <main+0x140c>)
 8004944:	0018      	movs	r0, r3
 8004946:	f7fe f855 	bl	80029f4 <st7565_write_buffer>
						HAL_Delay(500);
						break;
					}
				}

				break;
 800494a:	e038      	b.n	80049be <main+0x13e2>
					ADC_Select_CH0(1);
 800494c:	2001      	movs	r0, #1
 800494e:	f000 f911 	bl	8004b74 <ADC_Select_CH0>
					HAL_ADC_Start(&hadc);
 8004952:	4b2d      	ldr	r3, [pc, #180]	; (8004a08 <main+0x142c>)
 8004954:	0018      	movs	r0, r3
 8004956:	f000 fe9d 	bl	8005694 <HAL_ADC_Start>
					HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800495a:	2301      	movs	r3, #1
 800495c:	425a      	negs	r2, r3
 800495e:	4b2a      	ldr	r3, [pc, #168]	; (8004a08 <main+0x142c>)
 8004960:	0011      	movs	r1, r2
 8004962:	0018      	movs	r0, r3
 8004964:	f000 ff2a 	bl	80057bc <HAL_ADC_PollForConversion>
					uint16_t joystickinput = HAL_ADC_GetValue(&hadc);
 8004968:	4b27      	ldr	r3, [pc, #156]	; (8004a08 <main+0x142c>)
 800496a:	0018      	movs	r0, r3
 800496c:	f000 ffbe 	bl	80058ec <HAL_ADC_GetValue>
 8004970:	0002      	movs	r2, r0
 8004972:	218c      	movs	r1, #140	; 0x8c
 8004974:	187b      	adds	r3, r7, r1
 8004976:	801a      	strh	r2, [r3, #0]
					if (joystickinput>100&&joystickinput<350)
 8004978:	000a      	movs	r2, r1
 800497a:	18bb      	adds	r3, r7, r2
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	2b64      	cmp	r3, #100	; 0x64
 8004980:	d91d      	bls.n	80049be <main+0x13e2>
 8004982:	18bb      	adds	r3, r7, r2
 8004984:	881a      	ldrh	r2, [r3, #0]
 8004986:	23af      	movs	r3, #175	; 0xaf
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	429a      	cmp	r2, r3
 800498c:	d217      	bcs.n	80049be <main+0x13e2>
						indexmeniu=0;
 800498e:	23ce      	movs	r3, #206	; 0xce
 8004990:	18fb      	adds	r3, r7, r3
 8004992:	2200      	movs	r2, #0
 8004994:	701a      	strb	r2, [r3, #0]
						butonapasat = 0;
 8004996:	23cc      	movs	r3, #204	; 0xcc
 8004998:	18fb      	adds	r3, r7, r3
 800499a:	2200      	movs	r2, #0
 800499c:	701a      	strb	r2, [r3, #0]
						HAL_Delay(500);
 800499e:	23fa      	movs	r3, #250	; 0xfa
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	0018      	movs	r0, r3
 80049a4:	f000 fd12 	bl	80053cc <HAL_Delay>
						break;
 80049a8:	e00a      	b.n	80049c0 <main+0x13e4>
				break;
 80049aa:	46c0      	nop			; (mov r8, r8)
 80049ac:	e008      	b.n	80049c0 <main+0x13e4>
				break;
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	e006      	b.n	80049c0 <main+0x13e4>
				break;
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	e004      	b.n	80049c0 <main+0x13e4>
				break;
 80049b6:	46c0      	nop			; (mov r8, r8)
 80049b8:	e002      	b.n	80049c0 <main+0x13e4>
				break;
 80049ba:	46c0      	nop			; (mov r8, r8)
 80049bc:	e000      	b.n	80049c0 <main+0x13e4>
				break;
 80049be:	46c0      	nop			; (mov r8, r8)
		}



		/* Check if timer had overflow */
		if(__HAL_TIM_GET_FLAG(&htim16,TIM_FLAG_CC1) != 0)
 80049c0:	4b12      	ldr	r3, [pc, #72]	; (8004a0c <main+0x1430>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	2202      	movs	r2, #2
 80049c8:	4013      	ands	r3, r2
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d001      	beq.n	80049d2 <main+0x13f6>
 80049ce:	f7fe fe62 	bl	8003696 <main+0xba>
		{
			/* Clear overflow flag */
			__HAL_TIM_CLEAR_FLAG(&htim16,TIM_FLAG_CC1);
 80049d2:	4b0e      	ldr	r3, [pc, #56]	; (8004a0c <main+0x1430>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2203      	movs	r2, #3
 80049d8:	4252      	negs	r2, r2
 80049da:	611a      	str	r2, [r3, #16]
	{
 80049dc:	f7fe fe5b 	bl	8003696 <main+0xba>
 80049e0:	48000800 	.word	0x48000800
 80049e4:	0800a6e0 	.word	0x0800a6e0
 80049e8:	20000000 	.word	0x20000000
 80049ec:	66666666 	.word	0x66666666
 80049f0:	400a6666 	.word	0x400a6666
 80049f4:	40900000 	.word	0x40900000
 80049f8:	0800a680 	.word	0x0800a680
 80049fc:	0800a6fc 	.word	0x0800a6fc
 8004a00:	408f4000 	.word	0x408f4000
 8004a04:	0800a6f4 	.word	0x0800a6f4
 8004a08:	20002a28 	.word	0x20002a28
 8004a0c:	20002acc 	.word	0x20002acc

08004a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a10:	b590      	push	{r4, r7, lr}
 8004a12:	b093      	sub	sp, #76	; 0x4c
 8004a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a16:	2414      	movs	r4, #20
 8004a18:	193b      	adds	r3, r7, r4
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	2334      	movs	r3, #52	; 0x34
 8004a1e:	001a      	movs	r2, r3
 8004a20:	2100      	movs	r1, #0
 8004a22:	f002 fdcf 	bl	80075c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a26:	1d3b      	adds	r3, r7, #4
 8004a28:	0018      	movs	r0, r3
 8004a2a:	2310      	movs	r3, #16
 8004a2c:	001a      	movs	r2, r3
 8004a2e:	2100      	movs	r1, #0
 8004a30:	f002 fdc8 	bl	80075c4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 8004a34:	0021      	movs	r1, r4
 8004a36:	187b      	adds	r3, r7, r1
 8004a38:	2230      	movs	r2, #48	; 0x30
 8004a3a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8004a3c:	187b      	adds	r3, r7, r1
 8004a3e:	2201      	movs	r2, #1
 8004a40:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8004a42:	187b      	adds	r3, r7, r1
 8004a44:	2201      	movs	r2, #1
 8004a46:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8004a48:	187b      	adds	r3, r7, r1
 8004a4a:	2210      	movs	r2, #16
 8004a4c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004a4e:	187b      	adds	r3, r7, r1
 8004a50:	2200      	movs	r2, #0
 8004a52:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a54:	187b      	adds	r3, r7, r1
 8004a56:	0018      	movs	r0, r3
 8004a58:	f001 fc0a 	bl	8006270 <HAL_RCC_OscConfig>
 8004a5c:	1e03      	subs	r3, r0, #0
 8004a5e:	d001      	beq.n	8004a64 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8004a60:	f000 fa50 	bl	8004f04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a64:	1d3b      	adds	r3, r7, #4
 8004a66:	2207      	movs	r2, #7
 8004a68:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8004a6a:	1d3b      	adds	r3, r7, #4
 8004a6c:	2203      	movs	r2, #3
 8004a6e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a70:	1d3b      	adds	r3, r7, #4
 8004a72:	2200      	movs	r2, #0
 8004a74:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004a76:	1d3b      	adds	r3, r7, #4
 8004a78:	2200      	movs	r2, #0
 8004a7a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004a7c:	1d3b      	adds	r3, r7, #4
 8004a7e:	2101      	movs	r1, #1
 8004a80:	0018      	movs	r0, r3
 8004a82:	f001 ff7b 	bl	800697c <HAL_RCC_ClockConfig>
 8004a86:	1e03      	subs	r3, r0, #0
 8004a88:	d001      	beq.n	8004a8e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8004a8a:	f000 fa3b 	bl	8004f04 <Error_Handler>
  }
}
 8004a8e:	46c0      	nop			; (mov r8, r8)
 8004a90:	46bd      	mov	sp, r7
 8004a92:	b013      	add	sp, #76	; 0x4c
 8004a94:	bd90      	pop	{r4, r7, pc}
	...

08004a98 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004a9e:	1d3b      	adds	r3, r7, #4
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	230c      	movs	r3, #12
 8004aa4:	001a      	movs	r2, r3
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	f002 fd8c 	bl	80075c4 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8004aac:	4b1b      	ldr	r3, [pc, #108]	; (8004b1c <MX_ADC_Init+0x84>)
 8004aae:	4a1c      	ldr	r2, [pc, #112]	; (8004b20 <MX_ADC_Init+0x88>)
 8004ab0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004ab2:	4b1a      	ldr	r3, [pc, #104]	; (8004b1c <MX_ADC_Init+0x84>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
 8004ab8:	4b18      	ldr	r3, [pc, #96]	; (8004b1c <MX_ADC_Init+0x84>)
 8004aba:	2208      	movs	r2, #8
 8004abc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004abe:	4b17      	ldr	r3, [pc, #92]	; (8004b1c <MX_ADC_Init+0x84>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004ac4:	4b15      	ldr	r3, [pc, #84]	; (8004b1c <MX_ADC_Init+0x84>)
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004aca:	4b14      	ldr	r3, [pc, #80]	; (8004b1c <MX_ADC_Init+0x84>)
 8004acc:	2204      	movs	r2, #4
 8004ace:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004ad0:	4b12      	ldr	r3, [pc, #72]	; (8004b1c <MX_ADC_Init+0x84>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004ad6:	4b11      	ldr	r3, [pc, #68]	; (8004b1c <MX_ADC_Init+0x84>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8004adc:	4b0f      	ldr	r3, [pc, #60]	; (8004b1c <MX_ADC_Init+0x84>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8004ae2:	4b0e      	ldr	r3, [pc, #56]	; (8004b1c <MX_ADC_Init+0x84>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004ae8:	4b0c      	ldr	r3, [pc, #48]	; (8004b1c <MX_ADC_Init+0x84>)
 8004aea:	22c2      	movs	r2, #194	; 0xc2
 8004aec:	32ff      	adds	r2, #255	; 0xff
 8004aee:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004af0:	4b0a      	ldr	r3, [pc, #40]	; (8004b1c <MX_ADC_Init+0x84>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8004af6:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <MX_ADC_Init+0x84>)
 8004af8:	2224      	movs	r2, #36	; 0x24
 8004afa:	2100      	movs	r1, #0
 8004afc:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004afe:	4b07      	ldr	r3, [pc, #28]	; (8004b1c <MX_ADC_Init+0x84>)
 8004b00:	2201      	movs	r2, #1
 8004b02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004b04:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <MX_ADC_Init+0x84>)
 8004b06:	0018      	movs	r0, r3
 8004b08:	f000 fc84 	bl	8005414 <HAL_ADC_Init>
 8004b0c:	1e03      	subs	r3, r0, #0
 8004b0e:	d001      	beq.n	8004b14 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8004b10:	f000 f9f8 	bl	8004f04 <Error_Handler>
//  }
//  /* USER CODE BEGIN ADC_Init 2 */
//
//  /* USER CODE END ADC_Init 2 */

}
 8004b14:	46c0      	nop			; (mov r8, r8)
 8004b16:	46bd      	mov	sp, r7
 8004b18:	b004      	add	sp, #16
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	20002a28 	.word	0x20002a28
 8004b20:	40012400 	.word	0x40012400

08004b24 <ADC_Select_CH13>:

void ADC_Select_CH13 (int rang)
  {
 8004b24:	b590      	push	{r4, r7, lr}
 8004b26:	b087      	sub	sp, #28
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
    	ADC_ChannelConfTypeDef sConfig = {0};
 8004b2c:	240c      	movs	r4, #12
 8004b2e:	193b      	adds	r3, r7, r4
 8004b30:	0018      	movs	r0, r3
 8004b32:	230c      	movs	r3, #12
 8004b34:	001a      	movs	r2, r3
 8004b36:	2100      	movs	r1, #0
 8004b38:	f002 fd44 	bl	80075c4 <memset>
  	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  	  */
  	  sConfig.Channel = ADC_CHANNEL_13;
 8004b3c:	0021      	movs	r1, r4
 8004b3e:	187b      	adds	r3, r7, r1
 8004b40:	220d      	movs	r2, #13
 8004b42:	601a      	str	r2, [r3, #0]
  	  sConfig.Rank = rang;
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	187b      	adds	r3, r7, r1
 8004b48:	605a      	str	r2, [r3, #4]
  	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004b4a:	187b      	adds	r3, r7, r1
 8004b4c:	2280      	movs	r2, #128	; 0x80
 8004b4e:	0552      	lsls	r2, r2, #21
 8004b50:	609a      	str	r2, [r3, #8]
  	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004b52:	187a      	adds	r2, r7, r1
 8004b54:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <ADC_Select_CH13+0x4c>)
 8004b56:	0011      	movs	r1, r2
 8004b58:	0018      	movs	r0, r3
 8004b5a:	f000 fed3 	bl	8005904 <HAL_ADC_ConfigChannel>
 8004b5e:	1e03      	subs	r3, r0, #0
 8004b60:	d001      	beq.n	8004b66 <ADC_Select_CH13+0x42>
  	  {
  	    Error_Handler();
 8004b62:	f000 f9cf 	bl	8004f04 <Error_Handler>
  	  }
  }
 8004b66:	46c0      	nop			; (mov r8, r8)
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	b007      	add	sp, #28
 8004b6c:	bd90      	pop	{r4, r7, pc}
 8004b6e:	46c0      	nop			; (mov r8, r8)
 8004b70:	20002a28 	.word	0x20002a28

08004b74 <ADC_Select_CH0>:
	sConfig.Rank= ADC_RANK_NONE;
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
}

  void ADC_Select_CH0 (int rang)
   {
 8004b74:	b590      	push	{r4, r7, lr}
 8004b76:	b087      	sub	sp, #28
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
   	ADC_ChannelConfTypeDef sConfig = {0};
 8004b7c:	240c      	movs	r4, #12
 8004b7e:	193b      	adds	r3, r7, r4
 8004b80:	0018      	movs	r0, r3
 8004b82:	230c      	movs	r3, #12
 8004b84:	001a      	movs	r2, r3
 8004b86:	2100      	movs	r1, #0
 8004b88:	f002 fd1c 	bl	80075c4 <memset>
   	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   	  */
   	  sConfig.Channel = ADC_CHANNEL_0;
 8004b8c:	0021      	movs	r1, r4
 8004b8e:	187b      	adds	r3, r7, r1
 8004b90:	2200      	movs	r2, #0
 8004b92:	601a      	str	r2, [r3, #0]
   	  sConfig.Rank = rang;
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	187b      	adds	r3, r7, r1
 8004b98:	605a      	str	r2, [r3, #4]
   	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004b9a:	187b      	adds	r3, r7, r1
 8004b9c:	2280      	movs	r2, #128	; 0x80
 8004b9e:	0552      	lsls	r2, r2, #21
 8004ba0:	609a      	str	r2, [r3, #8]
   	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004ba2:	187a      	adds	r2, r7, r1
 8004ba4:	4b06      	ldr	r3, [pc, #24]	; (8004bc0 <ADC_Select_CH0+0x4c>)
 8004ba6:	0011      	movs	r1, r2
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f000 feab 	bl	8005904 <HAL_ADC_ConfigChannel>
 8004bae:	1e03      	subs	r3, r0, #0
 8004bb0:	d001      	beq.n	8004bb6 <ADC_Select_CH0+0x42>
   	  {
   	    Error_Handler();
 8004bb2:	f000 f9a7 	bl	8004f04 <Error_Handler>
   	  }
   }
 8004bb6:	46c0      	nop			; (mov r8, r8)
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	b007      	add	sp, #28
 8004bbc:	bd90      	pop	{r4, r7, pc}
 8004bbe:	46c0      	nop			; (mov r8, r8)
 8004bc0:	20002a28 	.word	0x20002a28

08004bc4 <ADC_Select_CHTemp>:
  	sConfig.Channel = ADC_CHANNEL_0;
  	sConfig.Rank= ADC_RANK_NONE;
  	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  }
  void ADC_Select_CHTemp (int rang)
  {
 8004bc4:	b590      	push	{r4, r7, lr}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  	ADC_ChannelConfTypeDef sConfig = {0};
 8004bcc:	240c      	movs	r4, #12
 8004bce:	193b      	adds	r3, r7, r4
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	230c      	movs	r3, #12
 8004bd4:	001a      	movs	r2, r3
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	f002 fcf4 	bl	80075c4 <memset>
  	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  	  */
  	  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8004bdc:	0021      	movs	r1, r4
 8004bde:	187b      	adds	r3, r7, r1
 8004be0:	2210      	movs	r2, #16
 8004be2:	601a      	str	r2, [r3, #0]
  	  sConfig.Rank = rang;
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	187b      	adds	r3, r7, r1
 8004be8:	605a      	str	r2, [r3, #4]
  	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004bea:	187b      	adds	r3, r7, r1
 8004bec:	2280      	movs	r2, #128	; 0x80
 8004bee:	0552      	lsls	r2, r2, #21
 8004bf0:	609a      	str	r2, [r3, #8]
  	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004bf2:	187a      	adds	r2, r7, r1
 8004bf4:	4b06      	ldr	r3, [pc, #24]	; (8004c10 <ADC_Select_CHTemp+0x4c>)
 8004bf6:	0011      	movs	r1, r2
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	f000 fe83 	bl	8005904 <HAL_ADC_ConfigChannel>
 8004bfe:	1e03      	subs	r3, r0, #0
 8004c00:	d001      	beq.n	8004c06 <ADC_Select_CHTemp+0x42>
  	  {
  	    Error_Handler();
 8004c02:	f000 f97f 	bl	8004f04 <Error_Handler>
  	  }
  }
 8004c06:	46c0      	nop			; (mov r8, r8)
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	b007      	add	sp, #28
 8004c0c:	bd90      	pop	{r4, r7, pc}
 8004c0e:	46c0      	nop			; (mov r8, r8)
 8004c10:	20002a28 	.word	0x20002a28

08004c14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004c18:	4b1b      	ldr	r3, [pc, #108]	; (8004c88 <MX_SPI1_Init+0x74>)
 8004c1a:	4a1c      	ldr	r2, [pc, #112]	; (8004c8c <MX_SPI1_Init+0x78>)
 8004c1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004c1e:	4b1a      	ldr	r3, [pc, #104]	; (8004c88 <MX_SPI1_Init+0x74>)
 8004c20:	2282      	movs	r2, #130	; 0x82
 8004c22:	0052      	lsls	r2, r2, #1
 8004c24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004c26:	4b18      	ldr	r3, [pc, #96]	; (8004c88 <MX_SPI1_Init+0x74>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004c2c:	4b16      	ldr	r3, [pc, #88]	; (8004c88 <MX_SPI1_Init+0x74>)
 8004c2e:	22e0      	movs	r2, #224	; 0xe0
 8004c30:	00d2      	lsls	r2, r2, #3
 8004c32:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c34:	4b14      	ldr	r3, [pc, #80]	; (8004c88 <MX_SPI1_Init+0x74>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004c3a:	4b13      	ldr	r3, [pc, #76]	; (8004c88 <MX_SPI1_Init+0x74>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004c40:	4b11      	ldr	r3, [pc, #68]	; (8004c88 <MX_SPI1_Init+0x74>)
 8004c42:	2280      	movs	r2, #128	; 0x80
 8004c44:	0092      	lsls	r2, r2, #2
 8004c46:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004c48:	4b0f      	ldr	r3, [pc, #60]	; (8004c88 <MX_SPI1_Init+0x74>)
 8004c4a:	2230      	movs	r2, #48	; 0x30
 8004c4c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004c4e:	4b0e      	ldr	r3, [pc, #56]	; (8004c88 <MX_SPI1_Init+0x74>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004c54:	4b0c      	ldr	r3, [pc, #48]	; (8004c88 <MX_SPI1_Init+0x74>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c5a:	4b0b      	ldr	r3, [pc, #44]	; (8004c88 <MX_SPI1_Init+0x74>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004c60:	4b09      	ldr	r3, [pc, #36]	; (8004c88 <MX_SPI1_Init+0x74>)
 8004c62:	2207      	movs	r2, #7
 8004c64:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004c66:	4b08      	ldr	r3, [pc, #32]	; (8004c88 <MX_SPI1_Init+0x74>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004c6c:	4b06      	ldr	r3, [pc, #24]	; (8004c88 <MX_SPI1_Init+0x74>)
 8004c6e:	2208      	movs	r2, #8
 8004c70:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004c72:	4b05      	ldr	r3, [pc, #20]	; (8004c88 <MX_SPI1_Init+0x74>)
 8004c74:	0018      	movs	r0, r3
 8004c76:	f001 ffdb 	bl	8006c30 <HAL_SPI_Init>
 8004c7a:	1e03      	subs	r3, r0, #0
 8004c7c:	d001      	beq.n	8004c82 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004c7e:	f000 f941 	bl	8004f04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	20002a68 	.word	0x20002a68
 8004c8c:	40013000 	.word	0x40013000

08004c90 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004c94:	4b0f      	ldr	r3, [pc, #60]	; (8004cd4 <MX_TIM16_Init+0x44>)
 8004c96:	4a10      	ldr	r2, [pc, #64]	; (8004cd8 <MX_TIM16_Init+0x48>)
 8004c98:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4800-1;
 8004c9a:	4b0e      	ldr	r3, [pc, #56]	; (8004cd4 <MX_TIM16_Init+0x44>)
 8004c9c:	4a0f      	ldr	r2, [pc, #60]	; (8004cdc <MX_TIM16_Init+0x4c>)
 8004c9e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ca0:	4b0c      	ldr	r3, [pc, #48]	; (8004cd4 <MX_TIM16_Init+0x44>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 8004ca6:	4b0b      	ldr	r3, [pc, #44]	; (8004cd4 <MX_TIM16_Init+0x44>)
 8004ca8:	4a0d      	ldr	r2, [pc, #52]	; (8004ce0 <MX_TIM16_Init+0x50>)
 8004caa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cac:	4b09      	ldr	r3, [pc, #36]	; (8004cd4 <MX_TIM16_Init+0x44>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004cb2:	4b08      	ldr	r3, [pc, #32]	; (8004cd4 <MX_TIM16_Init+0x44>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cb8:	4b06      	ldr	r3, [pc, #24]	; (8004cd4 <MX_TIM16_Init+0x44>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004cbe:	4b05      	ldr	r3, [pc, #20]	; (8004cd4 <MX_TIM16_Init+0x44>)
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	f002 fb3b 	bl	800733c <HAL_TIM_Base_Init>
 8004cc6:	1e03      	subs	r3, r0, #0
 8004cc8:	d001      	beq.n	8004cce <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8004cca:	f000 f91b 	bl	8004f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004cce:	46c0      	nop			; (mov r8, r8)
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	20002acc 	.word	0x20002acc
 8004cd8:	40014400 	.word	0x40014400
 8004cdc:	000012bf 	.word	0x000012bf
 8004ce0:	00002710 	.word	0x00002710

08004ce4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ce4:	b590      	push	{r4, r7, lr}
 8004ce6:	b08b      	sub	sp, #44	; 0x2c
 8004ce8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cea:	2414      	movs	r4, #20
 8004cec:	193b      	adds	r3, r7, r4
 8004cee:	0018      	movs	r0, r3
 8004cf0:	2314      	movs	r3, #20
 8004cf2:	001a      	movs	r2, r3
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	f002 fc65 	bl	80075c4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cfa:	4b55      	ldr	r3, [pc, #340]	; (8004e50 <MX_GPIO_Init+0x16c>)
 8004cfc:	695a      	ldr	r2, [r3, #20]
 8004cfe:	4b54      	ldr	r3, [pc, #336]	; (8004e50 <MX_GPIO_Init+0x16c>)
 8004d00:	2180      	movs	r1, #128	; 0x80
 8004d02:	0309      	lsls	r1, r1, #12
 8004d04:	430a      	orrs	r2, r1
 8004d06:	615a      	str	r2, [r3, #20]
 8004d08:	4b51      	ldr	r3, [pc, #324]	; (8004e50 <MX_GPIO_Init+0x16c>)
 8004d0a:	695a      	ldr	r2, [r3, #20]
 8004d0c:	2380      	movs	r3, #128	; 0x80
 8004d0e:	031b      	lsls	r3, r3, #12
 8004d10:	4013      	ands	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
 8004d14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004d16:	4b4e      	ldr	r3, [pc, #312]	; (8004e50 <MX_GPIO_Init+0x16c>)
 8004d18:	695a      	ldr	r2, [r3, #20]
 8004d1a:	4b4d      	ldr	r3, [pc, #308]	; (8004e50 <MX_GPIO_Init+0x16c>)
 8004d1c:	2180      	movs	r1, #128	; 0x80
 8004d1e:	03c9      	lsls	r1, r1, #15
 8004d20:	430a      	orrs	r2, r1
 8004d22:	615a      	str	r2, [r3, #20]
 8004d24:	4b4a      	ldr	r3, [pc, #296]	; (8004e50 <MX_GPIO_Init+0x16c>)
 8004d26:	695a      	ldr	r2, [r3, #20]
 8004d28:	2380      	movs	r3, #128	; 0x80
 8004d2a:	03db      	lsls	r3, r3, #15
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d32:	4b47      	ldr	r3, [pc, #284]	; (8004e50 <MX_GPIO_Init+0x16c>)
 8004d34:	695a      	ldr	r2, [r3, #20]
 8004d36:	4b46      	ldr	r3, [pc, #280]	; (8004e50 <MX_GPIO_Init+0x16c>)
 8004d38:	2180      	movs	r1, #128	; 0x80
 8004d3a:	0289      	lsls	r1, r1, #10
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	615a      	str	r2, [r3, #20]
 8004d40:	4b43      	ldr	r3, [pc, #268]	; (8004e50 <MX_GPIO_Init+0x16c>)
 8004d42:	695a      	ldr	r2, [r3, #20]
 8004d44:	2380      	movs	r3, #128	; 0x80
 8004d46:	029b      	lsls	r3, r3, #10
 8004d48:	4013      	ands	r3, r2
 8004d4a:	60bb      	str	r3, [r7, #8]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d4e:	4b40      	ldr	r3, [pc, #256]	; (8004e50 <MX_GPIO_Init+0x16c>)
 8004d50:	695a      	ldr	r2, [r3, #20]
 8004d52:	4b3f      	ldr	r3, [pc, #252]	; (8004e50 <MX_GPIO_Init+0x16c>)
 8004d54:	2180      	movs	r1, #128	; 0x80
 8004d56:	02c9      	lsls	r1, r1, #11
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	615a      	str	r2, [r3, #20]
 8004d5c:	4b3c      	ldr	r3, [pc, #240]	; (8004e50 <MX_GPIO_Init+0x16c>)
 8004d5e:	695a      	ldr	r2, [r3, #20]
 8004d60:	2380      	movs	r3, #128	; 0x80
 8004d62:	02db      	lsls	r3, r3, #11
 8004d64:	4013      	ands	r3, r2
 8004d66:	607b      	str	r3, [r7, #4]
 8004d68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPICD_GPIO_Port, SPICD_Pin, GPIO_PIN_SET);
 8004d6a:	4b3a      	ldr	r3, [pc, #232]	; (8004e54 <MX_GPIO_Init+0x170>)
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	2180      	movs	r1, #128	; 0x80
 8004d70:	0018      	movs	r0, r3
 8004d72:	f001 fa60 	bl	8006236 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BL_Pin|SPIRST_Pin, GPIO_PIN_RESET);
 8004d76:	23c0      	movs	r3, #192	; 0xc0
 8004d78:	0099      	lsls	r1, r3, #2
 8004d7a:	2390      	movs	r3, #144	; 0x90
 8004d7c:	05db      	lsls	r3, r3, #23
 8004d7e:	2200      	movs	r2, #0
 8004d80:	0018      	movs	r0, r3
 8004d82:	f001 fa58 	bl	8006236 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|SPICS_Pin, GPIO_PIN_RESET);
 8004d86:	4b34      	ldr	r3, [pc, #208]	; (8004e58 <MX_GPIO_Init+0x174>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2148      	movs	r1, #72	; 0x48
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	f001 fa52 	bl	8006236 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004d92:	193b      	adds	r3, r7, r4
 8004d94:	2280      	movs	r2, #128	; 0x80
 8004d96:	0192      	lsls	r2, r2, #6
 8004d98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d9a:	193b      	adds	r3, r7, r4
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da0:	193b      	adds	r3, r7, r4
 8004da2:	2200      	movs	r2, #0
 8004da4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004da6:	193b      	adds	r3, r7, r4
 8004da8:	4a2a      	ldr	r2, [pc, #168]	; (8004e54 <MX_GPIO_Init+0x170>)
 8004daa:	0019      	movs	r1, r3
 8004dac:	0010      	movs	r0, r2
 8004dae:	f001 f8ad 	bl	8005f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPICD_Pin */
  GPIO_InitStruct.Pin = SPICD_Pin;
 8004db2:	193b      	adds	r3, r7, r4
 8004db4:	2280      	movs	r2, #128	; 0x80
 8004db6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004db8:	193b      	adds	r3, r7, r4
 8004dba:	2201      	movs	r2, #1
 8004dbc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dbe:	193b      	adds	r3, r7, r4
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dc4:	193b      	adds	r3, r7, r4
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPICD_GPIO_Port, &GPIO_InitStruct);
 8004dca:	193b      	adds	r3, r7, r4
 8004dcc:	4a21      	ldr	r2, [pc, #132]	; (8004e54 <MX_GPIO_Init+0x170>)
 8004dce:	0019      	movs	r1, r3
 8004dd0:	0010      	movs	r0, r2
 8004dd2:	f001 f89b 	bl	8005f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : BL_Pin SPIRST_Pin */
  GPIO_InitStruct.Pin = BL_Pin|SPIRST_Pin;
 8004dd6:	0021      	movs	r1, r4
 8004dd8:	187b      	adds	r3, r7, r1
 8004dda:	22c0      	movs	r2, #192	; 0xc0
 8004ddc:	0092      	lsls	r2, r2, #2
 8004dde:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004de0:	000c      	movs	r4, r1
 8004de2:	193b      	adds	r3, r7, r4
 8004de4:	2201      	movs	r2, #1
 8004de6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de8:	193b      	adds	r3, r7, r4
 8004dea:	2200      	movs	r2, #0
 8004dec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dee:	193b      	adds	r3, r7, r4
 8004df0:	2200      	movs	r2, #0
 8004df2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004df4:	193a      	adds	r2, r7, r4
 8004df6:	2390      	movs	r3, #144	; 0x90
 8004df8:	05db      	lsls	r3, r3, #23
 8004dfa:	0011      	movs	r1, r2
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f001 f885 	bl	8005f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 SPICS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|SPICS_Pin;
 8004e02:	193b      	adds	r3, r7, r4
 8004e04:	2248      	movs	r2, #72	; 0x48
 8004e06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e08:	193b      	adds	r3, r7, r4
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e0e:	193b      	adds	r3, r7, r4
 8004e10:	2200      	movs	r2, #0
 8004e12:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e14:	193b      	adds	r3, r7, r4
 8004e16:	2200      	movs	r2, #0
 8004e18:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e1a:	193b      	adds	r3, r7, r4
 8004e1c:	4a0e      	ldr	r2, [pc, #56]	; (8004e58 <MX_GPIO_Init+0x174>)
 8004e1e:	0019      	movs	r1, r3
 8004e20:	0010      	movs	r0, r2
 8004e22:	f001 f873 	bl	8005f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004e26:	0021      	movs	r1, r4
 8004e28:	187b      	adds	r3, r7, r1
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e2e:	187b      	adds	r3, r7, r1
 8004e30:	2200      	movs	r2, #0
 8004e32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e34:	187b      	adds	r3, r7, r1
 8004e36:	2200      	movs	r2, #0
 8004e38:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e3a:	187b      	adds	r3, r7, r1
 8004e3c:	4a06      	ldr	r2, [pc, #24]	; (8004e58 <MX_GPIO_Init+0x174>)
 8004e3e:	0019      	movs	r1, r3
 8004e40:	0010      	movs	r0, r2
 8004e42:	f001 f863 	bl	8005f0c <HAL_GPIO_Init>

}
 8004e46:	46c0      	nop			; (mov r8, r8)
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	b00b      	add	sp, #44	; 0x2c
 8004e4c:	bd90      	pop	{r4, r7, pc}
 8004e4e:	46c0      	nop			; (mov r8, r8)
 8004e50:	40021000 	.word	0x40021000
 8004e54:	48000800 	.word	0x48000800
 8004e58:	48000400 	.word	0x48000400

08004e5c <checkLCD>:

/* USER CODE BEGIN 4 */
int checkLCD() {
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0) return 1;
 8004e60:	4b06      	ldr	r3, [pc, #24]	; (8004e7c <checkLCD+0x20>)
 8004e62:	2120      	movs	r1, #32
 8004e64:	0018      	movs	r0, r3
 8004e66:	f001 f9c9 	bl	80061fc <HAL_GPIO_ReadPin>
 8004e6a:	1e03      	subs	r3, r0, #0
 8004e6c:	d101      	bne.n	8004e72 <checkLCD+0x16>
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e000      	b.n	8004e74 <checkLCD+0x18>
	else return 0;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	0018      	movs	r0, r3
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	46c0      	nop			; (mov r8, r8)
 8004e7c:	48000400 	.word	0x48000400

08004e80 <initA5GPIO>:

void initA5GPIO() {
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e86:	1d3b      	adds	r3, r7, #4
 8004e88:	0018      	movs	r0, r3
 8004e8a:	2314      	movs	r3, #20
 8004e8c:	001a      	movs	r2, r3
 8004e8e:	2100      	movs	r1, #0
 8004e90:	f002 fb98 	bl	80075c4 <memset>

	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004e94:	1d3b      	adds	r3, r7, #4
 8004e96:	2220      	movs	r2, #32
 8004e98:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e9a:	1d3b      	adds	r3, r7, #4
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ea0:	1d3b      	adds	r3, r7, #4
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ea6:	1d3b      	adds	r3, r7, #4
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eac:	1d3a      	adds	r2, r7, #4
 8004eae:	2390      	movs	r3, #144	; 0x90
 8004eb0:	05db      	lsls	r3, r3, #23
 8004eb2:	0011      	movs	r1, r2
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	f001 f829 	bl	8005f0c <HAL_GPIO_Init>
}
 8004eba:	46c0      	nop			; (mov r8, r8)
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	b006      	add	sp, #24
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <initA5SPI>:

void initA5SPI() {
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b086      	sub	sp, #24
 8004ec6:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ec8:	1d3b      	adds	r3, r7, #4
 8004eca:	0018      	movs	r0, r3
 8004ecc:	2314      	movs	r3, #20
 8004ece:	001a      	movs	r2, r3
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	f002 fb77 	bl	80075c4 <memset>

	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004ed6:	1d3b      	adds	r3, r7, #4
 8004ed8:	2220      	movs	r2, #32
 8004eda:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004edc:	1d3b      	adds	r3, r7, #4
 8004ede:	2202      	movs	r2, #2
 8004ee0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ee2:	1d3b      	adds	r3, r7, #4
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ee8:	1d3b      	adds	r3, r7, #4
 8004eea:	2200      	movs	r2, #0
 8004eec:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eee:	1d3a      	adds	r2, r7, #4
 8004ef0:	2390      	movs	r3, #144	; 0x90
 8004ef2:	05db      	lsls	r3, r3, #23
 8004ef4:	0011      	movs	r1, r2
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	f001 f808 	bl	8005f0c <HAL_GPIO_Init>
}
 8004efc:	46c0      	nop			; (mov r8, r8)
 8004efe:	46bd      	mov	sp, r7
 8004f00:	b006      	add	sp, #24
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004f08:	b672      	cpsid	i
}
 8004f0a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004f0c:	e7fe      	b.n	8004f0c <Error_Handler+0x8>
	...

08004f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f16:	4b0f      	ldr	r3, [pc, #60]	; (8004f54 <HAL_MspInit+0x44>)
 8004f18:	699a      	ldr	r2, [r3, #24]
 8004f1a:	4b0e      	ldr	r3, [pc, #56]	; (8004f54 <HAL_MspInit+0x44>)
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	619a      	str	r2, [r3, #24]
 8004f22:	4b0c      	ldr	r3, [pc, #48]	; (8004f54 <HAL_MspInit+0x44>)
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	2201      	movs	r2, #1
 8004f28:	4013      	ands	r3, r2
 8004f2a:	607b      	str	r3, [r7, #4]
 8004f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f2e:	4b09      	ldr	r3, [pc, #36]	; (8004f54 <HAL_MspInit+0x44>)
 8004f30:	69da      	ldr	r2, [r3, #28]
 8004f32:	4b08      	ldr	r3, [pc, #32]	; (8004f54 <HAL_MspInit+0x44>)
 8004f34:	2180      	movs	r1, #128	; 0x80
 8004f36:	0549      	lsls	r1, r1, #21
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	61da      	str	r2, [r3, #28]
 8004f3c:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <HAL_MspInit+0x44>)
 8004f3e:	69da      	ldr	r2, [r3, #28]
 8004f40:	2380      	movs	r3, #128	; 0x80
 8004f42:	055b      	lsls	r3, r3, #21
 8004f44:	4013      	ands	r3, r2
 8004f46:	603b      	str	r3, [r7, #0]
 8004f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	b002      	add	sp, #8
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	46c0      	nop			; (mov r8, r8)
 8004f54:	40021000 	.word	0x40021000

08004f58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004f58:	b590      	push	{r4, r7, lr}
 8004f5a:	b08b      	sub	sp, #44	; 0x2c
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f60:	2414      	movs	r4, #20
 8004f62:	193b      	adds	r3, r7, r4
 8004f64:	0018      	movs	r0, r3
 8004f66:	2314      	movs	r3, #20
 8004f68:	001a      	movs	r2, r3
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	f002 fb2a 	bl	80075c4 <memset>
  if(hadc->Instance==ADC1)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a28      	ldr	r2, [pc, #160]	; (8005018 <HAL_ADC_MspInit+0xc0>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d149      	bne.n	800500e <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004f7a:	4b28      	ldr	r3, [pc, #160]	; (800501c <HAL_ADC_MspInit+0xc4>)
 8004f7c:	699a      	ldr	r2, [r3, #24]
 8004f7e:	4b27      	ldr	r3, [pc, #156]	; (800501c <HAL_ADC_MspInit+0xc4>)
 8004f80:	2180      	movs	r1, #128	; 0x80
 8004f82:	0089      	lsls	r1, r1, #2
 8004f84:	430a      	orrs	r2, r1
 8004f86:	619a      	str	r2, [r3, #24]
 8004f88:	4b24      	ldr	r3, [pc, #144]	; (800501c <HAL_ADC_MspInit+0xc4>)
 8004f8a:	699a      	ldr	r2, [r3, #24]
 8004f8c:	2380      	movs	r3, #128	; 0x80
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4013      	ands	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]
 8004f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f96:	4b21      	ldr	r3, [pc, #132]	; (800501c <HAL_ADC_MspInit+0xc4>)
 8004f98:	695a      	ldr	r2, [r3, #20]
 8004f9a:	4b20      	ldr	r3, [pc, #128]	; (800501c <HAL_ADC_MspInit+0xc4>)
 8004f9c:	2180      	movs	r1, #128	; 0x80
 8004f9e:	0309      	lsls	r1, r1, #12
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	615a      	str	r2, [r3, #20]
 8004fa4:	4b1d      	ldr	r3, [pc, #116]	; (800501c <HAL_ADC_MspInit+0xc4>)
 8004fa6:	695a      	ldr	r2, [r3, #20]
 8004fa8:	2380      	movs	r3, #128	; 0x80
 8004faa:	031b      	lsls	r3, r3, #12
 8004fac:	4013      	ands	r3, r2
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fb2:	4b1a      	ldr	r3, [pc, #104]	; (800501c <HAL_ADC_MspInit+0xc4>)
 8004fb4:	695a      	ldr	r2, [r3, #20]
 8004fb6:	4b19      	ldr	r3, [pc, #100]	; (800501c <HAL_ADC_MspInit+0xc4>)
 8004fb8:	2180      	movs	r1, #128	; 0x80
 8004fba:	0289      	lsls	r1, r1, #10
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	615a      	str	r2, [r3, #20]
 8004fc0:	4b16      	ldr	r3, [pc, #88]	; (800501c <HAL_ADC_MspInit+0xc4>)
 8004fc2:	695a      	ldr	r2, [r3, #20]
 8004fc4:	2380      	movs	r3, #128	; 0x80
 8004fc6:	029b      	lsls	r3, r3, #10
 8004fc8:	4013      	ands	r3, r2
 8004fca:	60bb      	str	r3, [r7, #8]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC3     ------> ADC_IN13
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004fce:	193b      	adds	r3, r7, r4
 8004fd0:	2208      	movs	r2, #8
 8004fd2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004fd4:	193b      	adds	r3, r7, r4
 8004fd6:	2203      	movs	r2, #3
 8004fd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fda:	193b      	adds	r3, r7, r4
 8004fdc:	2200      	movs	r2, #0
 8004fde:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fe0:	193b      	adds	r3, r7, r4
 8004fe2:	4a0f      	ldr	r2, [pc, #60]	; (8005020 <HAL_ADC_MspInit+0xc8>)
 8004fe4:	0019      	movs	r1, r3
 8004fe6:	0010      	movs	r0, r2
 8004fe8:	f000 ff90 	bl	8005f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004fec:	0021      	movs	r1, r4
 8004fee:	187b      	adds	r3, r7, r1
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ff4:	187b      	adds	r3, r7, r1
 8004ff6:	2203      	movs	r2, #3
 8004ff8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ffa:	187b      	adds	r3, r7, r1
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005000:	187a      	adds	r2, r7, r1
 8005002:	2390      	movs	r3, #144	; 0x90
 8005004:	05db      	lsls	r3, r3, #23
 8005006:	0011      	movs	r1, r2
 8005008:	0018      	movs	r0, r3
 800500a:	f000 ff7f 	bl	8005f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800500e:	46c0      	nop			; (mov r8, r8)
 8005010:	46bd      	mov	sp, r7
 8005012:	b00b      	add	sp, #44	; 0x2c
 8005014:	bd90      	pop	{r4, r7, pc}
 8005016:	46c0      	nop			; (mov r8, r8)
 8005018:	40012400 	.word	0x40012400
 800501c:	40021000 	.word	0x40021000
 8005020:	48000800 	.word	0x48000800

08005024 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005024:	b590      	push	{r4, r7, lr}
 8005026:	b08b      	sub	sp, #44	; 0x2c
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800502c:	2414      	movs	r4, #20
 800502e:	193b      	adds	r3, r7, r4
 8005030:	0018      	movs	r0, r3
 8005032:	2314      	movs	r3, #20
 8005034:	001a      	movs	r2, r3
 8005036:	2100      	movs	r1, #0
 8005038:	f002 fac4 	bl	80075c4 <memset>
  if(hspi->Instance==SPI1)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a1c      	ldr	r2, [pc, #112]	; (80050b4 <HAL_SPI_MspInit+0x90>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d132      	bne.n	80050ac <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005046:	4b1c      	ldr	r3, [pc, #112]	; (80050b8 <HAL_SPI_MspInit+0x94>)
 8005048:	699a      	ldr	r2, [r3, #24]
 800504a:	4b1b      	ldr	r3, [pc, #108]	; (80050b8 <HAL_SPI_MspInit+0x94>)
 800504c:	2180      	movs	r1, #128	; 0x80
 800504e:	0149      	lsls	r1, r1, #5
 8005050:	430a      	orrs	r2, r1
 8005052:	619a      	str	r2, [r3, #24]
 8005054:	4b18      	ldr	r3, [pc, #96]	; (80050b8 <HAL_SPI_MspInit+0x94>)
 8005056:	699a      	ldr	r2, [r3, #24]
 8005058:	2380      	movs	r3, #128	; 0x80
 800505a:	015b      	lsls	r3, r3, #5
 800505c:	4013      	ands	r3, r2
 800505e:	613b      	str	r3, [r7, #16]
 8005060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005062:	4b15      	ldr	r3, [pc, #84]	; (80050b8 <HAL_SPI_MspInit+0x94>)
 8005064:	695a      	ldr	r2, [r3, #20]
 8005066:	4b14      	ldr	r3, [pc, #80]	; (80050b8 <HAL_SPI_MspInit+0x94>)
 8005068:	2180      	movs	r1, #128	; 0x80
 800506a:	0289      	lsls	r1, r1, #10
 800506c:	430a      	orrs	r2, r1
 800506e:	615a      	str	r2, [r3, #20]
 8005070:	4b11      	ldr	r3, [pc, #68]	; (80050b8 <HAL_SPI_MspInit+0x94>)
 8005072:	695a      	ldr	r2, [r3, #20]
 8005074:	2380      	movs	r3, #128	; 0x80
 8005076:	029b      	lsls	r3, r3, #10
 8005078:	4013      	ands	r3, r2
 800507a:	60fb      	str	r3, [r7, #12]
 800507c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800507e:	0021      	movs	r1, r4
 8005080:	187b      	adds	r3, r7, r1
 8005082:	22a0      	movs	r2, #160	; 0xa0
 8005084:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005086:	187b      	adds	r3, r7, r1
 8005088:	2202      	movs	r2, #2
 800508a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508c:	187b      	adds	r3, r7, r1
 800508e:	2200      	movs	r2, #0
 8005090:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005092:	187b      	adds	r3, r7, r1
 8005094:	2203      	movs	r2, #3
 8005096:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8005098:	187b      	adds	r3, r7, r1
 800509a:	2200      	movs	r2, #0
 800509c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800509e:	187a      	adds	r2, r7, r1
 80050a0:	2390      	movs	r3, #144	; 0x90
 80050a2:	05db      	lsls	r3, r3, #23
 80050a4:	0011      	movs	r1, r2
 80050a6:	0018      	movs	r0, r3
 80050a8:	f000 ff30 	bl	8005f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80050ac:	46c0      	nop			; (mov r8, r8)
 80050ae:	46bd      	mov	sp, r7
 80050b0:	b00b      	add	sp, #44	; 0x2c
 80050b2:	bd90      	pop	{r4, r7, pc}
 80050b4:	40013000 	.word	0x40013000
 80050b8:	40021000 	.word	0x40021000

080050bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a0a      	ldr	r2, [pc, #40]	; (80050f4 <HAL_TIM_Base_MspInit+0x38>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d10d      	bne.n	80050ea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80050ce:	4b0a      	ldr	r3, [pc, #40]	; (80050f8 <HAL_TIM_Base_MspInit+0x3c>)
 80050d0:	699a      	ldr	r2, [r3, #24]
 80050d2:	4b09      	ldr	r3, [pc, #36]	; (80050f8 <HAL_TIM_Base_MspInit+0x3c>)
 80050d4:	2180      	movs	r1, #128	; 0x80
 80050d6:	0289      	lsls	r1, r1, #10
 80050d8:	430a      	orrs	r2, r1
 80050da:	619a      	str	r2, [r3, #24]
 80050dc:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <HAL_TIM_Base_MspInit+0x3c>)
 80050de:	699a      	ldr	r2, [r3, #24]
 80050e0:	2380      	movs	r3, #128	; 0x80
 80050e2:	029b      	lsls	r3, r3, #10
 80050e4:	4013      	ands	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]
 80050e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80050ea:	46c0      	nop			; (mov r8, r8)
 80050ec:	46bd      	mov	sp, r7
 80050ee:	b004      	add	sp, #16
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	46c0      	nop			; (mov r8, r8)
 80050f4:	40014400 	.word	0x40014400
 80050f8:	40021000 	.word	0x40021000

080050fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005100:	e7fe      	b.n	8005100 <NMI_Handler+0x4>

08005102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005106:	e7fe      	b.n	8005106 <HardFault_Handler+0x4>

08005108 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800510c:	46c0      	nop			; (mov r8, r8)
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005116:	46c0      	nop			; (mov r8, r8)
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005120:	f000 f938 	bl	8005394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005124:	46c0      	nop			; (mov r8, r8)
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	af00      	add	r7, sp, #0
	return 1;
 800512e:	2301      	movs	r3, #1
}
 8005130:	0018      	movs	r0, r3
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <_kill>:

int _kill(int pid, int sig)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b082      	sub	sp, #8
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
 800513e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005140:	f002 fa16 	bl	8007570 <__errno>
 8005144:	0003      	movs	r3, r0
 8005146:	2216      	movs	r2, #22
 8005148:	601a      	str	r2, [r3, #0]
	return -1;
 800514a:	2301      	movs	r3, #1
 800514c:	425b      	negs	r3, r3
}
 800514e:	0018      	movs	r0, r3
 8005150:	46bd      	mov	sp, r7
 8005152:	b002      	add	sp, #8
 8005154:	bd80      	pop	{r7, pc}

08005156 <_exit>:

void _exit (int status)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b082      	sub	sp, #8
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800515e:	2301      	movs	r3, #1
 8005160:	425a      	negs	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	0011      	movs	r1, r2
 8005166:	0018      	movs	r0, r3
 8005168:	f7ff ffe5 	bl	8005136 <_kill>
	while (1) {}		/* Make sure we hang here */
 800516c:	e7fe      	b.n	800516c <_exit+0x16>

0800516e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b086      	sub	sp, #24
 8005172:	af00      	add	r7, sp, #0
 8005174:	60f8      	str	r0, [r7, #12]
 8005176:	60b9      	str	r1, [r7, #8]
 8005178:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800517a:	2300      	movs	r3, #0
 800517c:	617b      	str	r3, [r7, #20]
 800517e:	e00a      	b.n	8005196 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005180:	e000      	b.n	8005184 <_read+0x16>
 8005182:	bf00      	nop
 8005184:	0001      	movs	r1, r0
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	1c5a      	adds	r2, r3, #1
 800518a:	60ba      	str	r2, [r7, #8]
 800518c:	b2ca      	uxtb	r2, r1
 800518e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	3301      	adds	r3, #1
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	429a      	cmp	r2, r3
 800519c:	dbf0      	blt.n	8005180 <_read+0x12>
	}

return len;
 800519e:	687b      	ldr	r3, [r7, #4]
}
 80051a0:	0018      	movs	r0, r3
 80051a2:	46bd      	mov	sp, r7
 80051a4:	b006      	add	sp, #24
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051b4:	2300      	movs	r3, #0
 80051b6:	617b      	str	r3, [r7, #20]
 80051b8:	e009      	b.n	80051ce <_write+0x26>
	{
		__io_putchar(*ptr++);
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	60ba      	str	r2, [r7, #8]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	0018      	movs	r0, r3
 80051c4:	e000      	b.n	80051c8 <_write+0x20>
 80051c6:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	3301      	adds	r3, #1
 80051cc:	617b      	str	r3, [r7, #20]
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	dbf1      	blt.n	80051ba <_write+0x12>
	}
	return len;
 80051d6:	687b      	ldr	r3, [r7, #4]
}
 80051d8:	0018      	movs	r0, r3
 80051da:	46bd      	mov	sp, r7
 80051dc:	b006      	add	sp, #24
 80051de:	bd80      	pop	{r7, pc}

080051e0 <_close>:

int _close(int file)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
	return -1;
 80051e8:	2301      	movs	r3, #1
 80051ea:	425b      	negs	r3, r3
}
 80051ec:	0018      	movs	r0, r3
 80051ee:	46bd      	mov	sp, r7
 80051f0:	b002      	add	sp, #8
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2280      	movs	r2, #128	; 0x80
 8005202:	0192      	lsls	r2, r2, #6
 8005204:	605a      	str	r2, [r3, #4]
	return 0;
 8005206:	2300      	movs	r3, #0
}
 8005208:	0018      	movs	r0, r3
 800520a:	46bd      	mov	sp, r7
 800520c:	b002      	add	sp, #8
 800520e:	bd80      	pop	{r7, pc}

08005210 <_isatty>:

int _isatty(int file)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
	return 1;
 8005218:	2301      	movs	r3, #1
}
 800521a:	0018      	movs	r0, r3
 800521c:	46bd      	mov	sp, r7
 800521e:	b002      	add	sp, #8
 8005220:	bd80      	pop	{r7, pc}

08005222 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b084      	sub	sp, #16
 8005226:	af00      	add	r7, sp, #0
 8005228:	60f8      	str	r0, [r7, #12]
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	607a      	str	r2, [r7, #4]
	return 0;
 800522e:	2300      	movs	r3, #0
}
 8005230:	0018      	movs	r0, r3
 8005232:	46bd      	mov	sp, r7
 8005234:	b004      	add	sp, #16
 8005236:	bd80      	pop	{r7, pc}

08005238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005240:	4a14      	ldr	r2, [pc, #80]	; (8005294 <_sbrk+0x5c>)
 8005242:	4b15      	ldr	r3, [pc, #84]	; (8005298 <_sbrk+0x60>)
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800524c:	4b13      	ldr	r3, [pc, #76]	; (800529c <_sbrk+0x64>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d102      	bne.n	800525a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005254:	4b11      	ldr	r3, [pc, #68]	; (800529c <_sbrk+0x64>)
 8005256:	4a12      	ldr	r2, [pc, #72]	; (80052a0 <_sbrk+0x68>)
 8005258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800525a:	4b10      	ldr	r3, [pc, #64]	; (800529c <_sbrk+0x64>)
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	18d3      	adds	r3, r2, r3
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	429a      	cmp	r2, r3
 8005266:	d207      	bcs.n	8005278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005268:	f002 f982 	bl	8007570 <__errno>
 800526c:	0003      	movs	r3, r0
 800526e:	220c      	movs	r2, #12
 8005270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005272:	2301      	movs	r3, #1
 8005274:	425b      	negs	r3, r3
 8005276:	e009      	b.n	800528c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005278:	4b08      	ldr	r3, [pc, #32]	; (800529c <_sbrk+0x64>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800527e:	4b07      	ldr	r3, [pc, #28]	; (800529c <_sbrk+0x64>)
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	18d2      	adds	r2, r2, r3
 8005286:	4b05      	ldr	r3, [pc, #20]	; (800529c <_sbrk+0x64>)
 8005288:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800528a:	68fb      	ldr	r3, [r7, #12]
}
 800528c:	0018      	movs	r0, r3
 800528e:	46bd      	mov	sp, r7
 8005290:	b006      	add	sp, #24
 8005292:	bd80      	pop	{r7, pc}
 8005294:	20008000 	.word	0x20008000
 8005298:	00000400 	.word	0x00000400
 800529c:	20002b14 	.word	0x20002b14
 80052a0:	20002b30 	.word	0x20002b30

080052a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80052a8:	46c0      	nop			; (mov r8, r8)
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
	...

080052b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80052b0:	480d      	ldr	r0, [pc, #52]	; (80052e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80052b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80052b4:	480d      	ldr	r0, [pc, #52]	; (80052ec <LoopForever+0x6>)
  ldr r1, =_edata
 80052b6:	490e      	ldr	r1, [pc, #56]	; (80052f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80052b8:	4a0e      	ldr	r2, [pc, #56]	; (80052f4 <LoopForever+0xe>)
  movs r3, #0
 80052ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80052bc:	e002      	b.n	80052c4 <LoopCopyDataInit>

080052be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80052be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052c2:	3304      	adds	r3, #4

080052c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80052c8:	d3f9      	bcc.n	80052be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80052ca:	4a0b      	ldr	r2, [pc, #44]	; (80052f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80052cc:	4c0b      	ldr	r4, [pc, #44]	; (80052fc <LoopForever+0x16>)
  movs r3, #0
 80052ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80052d0:	e001      	b.n	80052d6 <LoopFillZerobss>

080052d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80052d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80052d4:	3204      	adds	r2, #4

080052d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80052d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80052d8:	d3fb      	bcc.n	80052d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80052da:	f7ff ffe3 	bl	80052a4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80052de:	f002 f94d 	bl	800757c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80052e2:	f7fe f97b 	bl	80035dc <main>

080052e6 <LoopForever>:

LoopForever:
    b LoopForever
 80052e6:	e7fe      	b.n	80052e6 <LoopForever>
  ldr   r0, =_estack
 80052e8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80052ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80052f0:	200029fc 	.word	0x200029fc
  ldr r2, =_sidata
 80052f4:	0800b1f4 	.word	0x0800b1f4
  ldr r2, =_sbss
 80052f8:	20002a00 	.word	0x20002a00
  ldr r4, =_ebss
 80052fc:	20002b2c 	.word	0x20002b2c

08005300 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005300:	e7fe      	b.n	8005300 <ADC1_COMP_IRQHandler>
	...

08005304 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005308:	4b07      	ldr	r3, [pc, #28]	; (8005328 <HAL_Init+0x24>)
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	4b06      	ldr	r3, [pc, #24]	; (8005328 <HAL_Init+0x24>)
 800530e:	2110      	movs	r1, #16
 8005310:	430a      	orrs	r2, r1
 8005312:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8005314:	2000      	movs	r0, #0
 8005316:	f000 f809 	bl	800532c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800531a:	f7ff fdf9 	bl	8004f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	0018      	movs	r0, r3
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	46c0      	nop			; (mov r8, r8)
 8005328:	40022000 	.word	0x40022000

0800532c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800532c:	b590      	push	{r4, r7, lr}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005334:	4b14      	ldr	r3, [pc, #80]	; (8005388 <HAL_InitTick+0x5c>)
 8005336:	681c      	ldr	r4, [r3, #0]
 8005338:	4b14      	ldr	r3, [pc, #80]	; (800538c <HAL_InitTick+0x60>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	0019      	movs	r1, r3
 800533e:	23fa      	movs	r3, #250	; 0xfa
 8005340:	0098      	lsls	r0, r3, #2
 8005342:	f7fa fefb 	bl	800013c <__udivsi3>
 8005346:	0003      	movs	r3, r0
 8005348:	0019      	movs	r1, r3
 800534a:	0020      	movs	r0, r4
 800534c:	f7fa fef6 	bl	800013c <__udivsi3>
 8005350:	0003      	movs	r3, r0
 8005352:	0018      	movs	r0, r3
 8005354:	f000 fdcd 	bl	8005ef2 <HAL_SYSTICK_Config>
 8005358:	1e03      	subs	r3, r0, #0
 800535a:	d001      	beq.n	8005360 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e00f      	b.n	8005380 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b03      	cmp	r3, #3
 8005364:	d80b      	bhi.n	800537e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005366:	6879      	ldr	r1, [r7, #4]
 8005368:	2301      	movs	r3, #1
 800536a:	425b      	negs	r3, r3
 800536c:	2200      	movs	r2, #0
 800536e:	0018      	movs	r0, r3
 8005370:	f000 fdaa 	bl	8005ec8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005374:	4b06      	ldr	r3, [pc, #24]	; (8005390 <HAL_InitTick+0x64>)
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800537a:	2300      	movs	r3, #0
 800537c:	e000      	b.n	8005380 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
}
 8005380:	0018      	movs	r0, r3
 8005382:	46bd      	mov	sp, r7
 8005384:	b003      	add	sp, #12
 8005386:	bd90      	pop	{r4, r7, pc}
 8005388:	20002820 	.word	0x20002820
 800538c:	20002828 	.word	0x20002828
 8005390:	20002824 	.word	0x20002824

08005394 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005398:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <HAL_IncTick+0x1c>)
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	001a      	movs	r2, r3
 800539e:	4b05      	ldr	r3, [pc, #20]	; (80053b4 <HAL_IncTick+0x20>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	18d2      	adds	r2, r2, r3
 80053a4:	4b03      	ldr	r3, [pc, #12]	; (80053b4 <HAL_IncTick+0x20>)
 80053a6:	601a      	str	r2, [r3, #0]
}
 80053a8:	46c0      	nop			; (mov r8, r8)
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	46c0      	nop			; (mov r8, r8)
 80053b0:	20002828 	.word	0x20002828
 80053b4:	20002b18 	.word	0x20002b18

080053b8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
  return uwTick;
 80053bc:	4b02      	ldr	r3, [pc, #8]	; (80053c8 <HAL_GetTick+0x10>)
 80053be:	681b      	ldr	r3, [r3, #0]
}
 80053c0:	0018      	movs	r0, r3
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	46c0      	nop			; (mov r8, r8)
 80053c8:	20002b18 	.word	0x20002b18

080053cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80053d4:	f7ff fff0 	bl	80053b8 <HAL_GetTick>
 80053d8:	0003      	movs	r3, r0
 80053da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	3301      	adds	r3, #1
 80053e4:	d005      	beq.n	80053f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80053e6:	4b0a      	ldr	r3, [pc, #40]	; (8005410 <HAL_Delay+0x44>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	001a      	movs	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	189b      	adds	r3, r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80053f2:	46c0      	nop			; (mov r8, r8)
 80053f4:	f7ff ffe0 	bl	80053b8 <HAL_GetTick>
 80053f8:	0002      	movs	r2, r0
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	429a      	cmp	r2, r3
 8005402:	d8f7      	bhi.n	80053f4 <HAL_Delay+0x28>
  {
  }
}
 8005404:	46c0      	nop			; (mov r8, r8)
 8005406:	46c0      	nop			; (mov r8, r8)
 8005408:	46bd      	mov	sp, r7
 800540a:	b004      	add	sp, #16
 800540c:	bd80      	pop	{r7, pc}
 800540e:	46c0      	nop			; (mov r8, r8)
 8005410:	20002828 	.word	0x20002828

08005414 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800541c:	230f      	movs	r3, #15
 800541e:	18fb      	adds	r3, r7, r3
 8005420:	2200      	movs	r2, #0
 8005422:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8005424:	2300      	movs	r3, #0
 8005426:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e125      	b.n	800567e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10a      	bne.n	8005450 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2234      	movs	r2, #52	; 0x34
 8005444:	2100      	movs	r1, #0
 8005446:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	0018      	movs	r0, r3
 800544c:	f7ff fd84 	bl	8004f58 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005454:	2210      	movs	r2, #16
 8005456:	4013      	ands	r3, r2
 8005458:	d000      	beq.n	800545c <HAL_ADC_Init+0x48>
 800545a:	e103      	b.n	8005664 <HAL_ADC_Init+0x250>
 800545c:	230f      	movs	r3, #15
 800545e:	18fb      	adds	r3, r7, r3
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d000      	beq.n	8005468 <HAL_ADC_Init+0x54>
 8005466:	e0fd      	b.n	8005664 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	2204      	movs	r2, #4
 8005470:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8005472:	d000      	beq.n	8005476 <HAL_ADC_Init+0x62>
 8005474:	e0f6      	b.n	8005664 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547a:	4a83      	ldr	r2, [pc, #524]	; (8005688 <HAL_ADC_Init+0x274>)
 800547c:	4013      	ands	r3, r2
 800547e:	2202      	movs	r2, #2
 8005480:	431a      	orrs	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	2203      	movs	r2, #3
 800548e:	4013      	ands	r3, r2
 8005490:	2b01      	cmp	r3, #1
 8005492:	d112      	bne.n	80054ba <HAL_ADC_Init+0xa6>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2201      	movs	r2, #1
 800549c:	4013      	ands	r3, r2
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d009      	beq.n	80054b6 <HAL_ADC_Init+0xa2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68da      	ldr	r2, [r3, #12]
 80054a8:	2380      	movs	r3, #128	; 0x80
 80054aa:	021b      	lsls	r3, r3, #8
 80054ac:	401a      	ands	r2, r3
 80054ae:	2380      	movs	r3, #128	; 0x80
 80054b0:	021b      	lsls	r3, r3, #8
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d101      	bne.n	80054ba <HAL_ADC_Init+0xa6>
 80054b6:	2301      	movs	r3, #1
 80054b8:	e000      	b.n	80054bc <HAL_ADC_Init+0xa8>
 80054ba:	2300      	movs	r3, #0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d116      	bne.n	80054ee <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	2218      	movs	r2, #24
 80054c8:	4393      	bics	r3, r2
 80054ca:	0019      	movs	r1, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689a      	ldr	r2, [r3, #8]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	0899      	lsrs	r1, r3, #2
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68da      	ldr	r2, [r3, #12]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4964      	ldr	r1, [pc, #400]	; (800568c <HAL_ADC_Init+0x278>)
 80054fa:	400a      	ands	r2, r1
 80054fc:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	7e1b      	ldrb	r3, [r3, #24]
 8005502:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	7e5b      	ldrb	r3, [r3, #25]
 8005508:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800550a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	7e9b      	ldrb	r3, [r3, #26]
 8005510:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8005512:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005518:	2b01      	cmp	r3, #1
 800551a:	d002      	beq.n	8005522 <HAL_ADC_Init+0x10e>
 800551c:	2380      	movs	r3, #128	; 0x80
 800551e:	015b      	lsls	r3, r3, #5
 8005520:	e000      	b.n	8005524 <HAL_ADC_Init+0x110>
 8005522:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005524:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800552a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	2b02      	cmp	r3, #2
 8005532:	d101      	bne.n	8005538 <HAL_ADC_Init+0x124>
 8005534:	2304      	movs	r3, #4
 8005536:	e000      	b.n	800553a <HAL_ADC_Init+0x126>
 8005538:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800553a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2124      	movs	r1, #36	; 0x24
 8005540:	5c5b      	ldrb	r3, [r3, r1]
 8005542:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8005544:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	4313      	orrs	r3, r2
 800554a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	7edb      	ldrb	r3, [r3, #27]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d115      	bne.n	8005580 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	7e9b      	ldrb	r3, [r3, #26]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d105      	bne.n	8005568 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	2280      	movs	r2, #128	; 0x80
 8005560:	0252      	lsls	r2, r2, #9
 8005562:	4313      	orrs	r3, r2
 8005564:	60bb      	str	r3, [r7, #8]
 8005566:	e00b      	b.n	8005580 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556c:	2220      	movs	r2, #32
 800556e:	431a      	orrs	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005578:	2201      	movs	r2, #1
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	69da      	ldr	r2, [r3, #28]
 8005584:	23c2      	movs	r3, #194	; 0xc2
 8005586:	33ff      	adds	r3, #255	; 0xff
 8005588:	429a      	cmp	r2, r3
 800558a:	d007      	beq.n	800559c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8005594:	4313      	orrs	r3, r2
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	4313      	orrs	r3, r2
 800559a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68d9      	ldr	r1, [r3, #12]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b0:	2380      	movs	r3, #128	; 0x80
 80055b2:	055b      	lsls	r3, r3, #21
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d01b      	beq.n	80055f0 <HAL_ADC_Init+0x1dc>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d017      	beq.n	80055f0 <HAL_ADC_Init+0x1dc>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d013      	beq.n	80055f0 <HAL_ADC_Init+0x1dc>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d00f      	beq.n	80055f0 <HAL_ADC_Init+0x1dc>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d00b      	beq.n	80055f0 <HAL_ADC_Init+0x1dc>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055dc:	2b05      	cmp	r3, #5
 80055de:	d007      	beq.n	80055f0 <HAL_ADC_Init+0x1dc>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e4:	2b06      	cmp	r3, #6
 80055e6:	d003      	beq.n	80055f0 <HAL_ADC_Init+0x1dc>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ec:	2b07      	cmp	r3, #7
 80055ee:	d112      	bne.n	8005616 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	695a      	ldr	r2, [r3, #20]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2107      	movs	r1, #7
 80055fc:	438a      	bics	r2, r1
 80055fe:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6959      	ldr	r1, [r3, #20]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560a:	2207      	movs	r2, #7
 800560c:	401a      	ands	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	4a1c      	ldr	r2, [pc, #112]	; (8005690 <HAL_ADC_Init+0x27c>)
 800561e:	4013      	ands	r3, r2
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	429a      	cmp	r2, r3
 8005624:	d10b      	bne.n	800563e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005630:	2203      	movs	r2, #3
 8005632:	4393      	bics	r3, r2
 8005634:	2201      	movs	r2, #1
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800563c:	e01c      	b.n	8005678 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005642:	2212      	movs	r2, #18
 8005644:	4393      	bics	r3, r2
 8005646:	2210      	movs	r2, #16
 8005648:	431a      	orrs	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005652:	2201      	movs	r2, #1
 8005654:	431a      	orrs	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800565a:	230f      	movs	r3, #15
 800565c:	18fb      	adds	r3, r7, r3
 800565e:	2201      	movs	r2, #1
 8005660:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8005662:	e009      	b.n	8005678 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005668:	2210      	movs	r2, #16
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8005670:	230f      	movs	r3, #15
 8005672:	18fb      	adds	r3, r7, r3
 8005674:	2201      	movs	r2, #1
 8005676:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005678:	230f      	movs	r3, #15
 800567a:	18fb      	adds	r3, r7, r3
 800567c:	781b      	ldrb	r3, [r3, #0]
}
 800567e:	0018      	movs	r0, r3
 8005680:	46bd      	mov	sp, r7
 8005682:	b004      	add	sp, #16
 8005684:	bd80      	pop	{r7, pc}
 8005686:	46c0      	nop			; (mov r8, r8)
 8005688:	fffffefd 	.word	0xfffffefd
 800568c:	fffe0219 	.word	0xfffe0219
 8005690:	833fffe7 	.word	0x833fffe7

08005694 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005694:	b590      	push	{r4, r7, lr}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800569c:	230f      	movs	r3, #15
 800569e:	18fb      	adds	r3, r7, r3
 80056a0:	2200      	movs	r2, #0
 80056a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	2204      	movs	r2, #4
 80056ac:	4013      	ands	r3, r2
 80056ae:	d138      	bne.n	8005722 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2234      	movs	r2, #52	; 0x34
 80056b4:	5c9b      	ldrb	r3, [r3, r2]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d101      	bne.n	80056be <HAL_ADC_Start+0x2a>
 80056ba:	2302      	movs	r3, #2
 80056bc:	e038      	b.n	8005730 <HAL_ADC_Start+0x9c>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2234      	movs	r2, #52	; 0x34
 80056c2:	2101      	movs	r1, #1
 80056c4:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	7e5b      	ldrb	r3, [r3, #25]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d007      	beq.n	80056de <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80056ce:	230f      	movs	r3, #15
 80056d0:	18fc      	adds	r4, r7, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	0018      	movs	r0, r3
 80056d6:	f000 fa23 	bl	8005b20 <ADC_Enable>
 80056da:	0003      	movs	r3, r0
 80056dc:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80056de:	230f      	movs	r3, #15
 80056e0:	18fb      	adds	r3, r7, r3
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d120      	bne.n	800572a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ec:	4a12      	ldr	r2, [pc, #72]	; (8005738 <HAL_ADC_Start+0xa4>)
 80056ee:	4013      	ands	r3, r2
 80056f0:	2280      	movs	r2, #128	; 0x80
 80056f2:	0052      	lsls	r2, r2, #1
 80056f4:	431a      	orrs	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2234      	movs	r2, #52	; 0x34
 8005704:	2100      	movs	r1, #0
 8005706:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	221c      	movs	r2, #28
 800570e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689a      	ldr	r2, [r3, #8]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2104      	movs	r1, #4
 800571c:	430a      	orrs	r2, r1
 800571e:	609a      	str	r2, [r3, #8]
 8005720:	e003      	b.n	800572a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005722:	230f      	movs	r3, #15
 8005724:	18fb      	adds	r3, r7, r3
 8005726:	2202      	movs	r2, #2
 8005728:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800572a:	230f      	movs	r3, #15
 800572c:	18fb      	adds	r3, r7, r3
 800572e:	781b      	ldrb	r3, [r3, #0]
}
 8005730:	0018      	movs	r0, r3
 8005732:	46bd      	mov	sp, r7
 8005734:	b005      	add	sp, #20
 8005736:	bd90      	pop	{r4, r7, pc}
 8005738:	fffff0fe 	.word	0xfffff0fe

0800573c <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 800573c:	b5b0      	push	{r4, r5, r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005744:	230f      	movs	r3, #15
 8005746:	18fb      	adds	r3, r7, r3
 8005748:	2200      	movs	r2, #0
 800574a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2234      	movs	r2, #52	; 0x34
 8005750:	5c9b      	ldrb	r3, [r3, r2]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d101      	bne.n	800575a <HAL_ADC_Stop+0x1e>
 8005756:	2302      	movs	r3, #2
 8005758:	e029      	b.n	80057ae <HAL_ADC_Stop+0x72>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2234      	movs	r2, #52	; 0x34
 800575e:	2101      	movs	r1, #1
 8005760:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8005762:	250f      	movs	r5, #15
 8005764:	197c      	adds	r4, r7, r5
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	0018      	movs	r0, r3
 800576a:	f000 face 	bl	8005d0a <ADC_ConversionStop>
 800576e:	0003      	movs	r3, r0
 8005770:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005772:	197b      	adds	r3, r7, r5
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d112      	bne.n	80057a0 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800577a:	197c      	adds	r4, r7, r5
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	0018      	movs	r0, r3
 8005780:	f000 fa52 	bl	8005c28 <ADC_Disable>
 8005784:	0003      	movs	r3, r0
 8005786:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005788:	197b      	adds	r3, r7, r5
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d107      	bne.n	80057a0 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	4a08      	ldr	r2, [pc, #32]	; (80057b8 <HAL_ADC_Stop+0x7c>)
 8005796:	4013      	ands	r3, r2
 8005798:	2201      	movs	r2, #1
 800579a:	431a      	orrs	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2234      	movs	r2, #52	; 0x34
 80057a4:	2100      	movs	r1, #0
 80057a6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80057a8:	230f      	movs	r3, #15
 80057aa:	18fb      	adds	r3, r7, r3
 80057ac:	781b      	ldrb	r3, [r3, #0]
}
 80057ae:	0018      	movs	r0, r3
 80057b0:	46bd      	mov	sp, r7
 80057b2:	b004      	add	sp, #16
 80057b4:	bdb0      	pop	{r4, r5, r7, pc}
 80057b6:	46c0      	nop			; (mov r8, r8)
 80057b8:	fffffefe 	.word	0xfffffefe

080057bc <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	2b08      	cmp	r3, #8
 80057cc:	d102      	bne.n	80057d4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80057ce:	2308      	movs	r3, #8
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	e014      	b.n	80057fe <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	2201      	movs	r2, #1
 80057dc:	4013      	ands	r3, r2
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d10b      	bne.n	80057fa <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e6:	2220      	movs	r2, #32
 80057e8:	431a      	orrs	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2234      	movs	r2, #52	; 0x34
 80057f2:	2100      	movs	r1, #0
 80057f4:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e071      	b.n	80058de <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80057fa:	230c      	movs	r3, #12
 80057fc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80057fe:	f7ff fddb 	bl	80053b8 <HAL_GetTick>
 8005802:	0003      	movs	r3, r0
 8005804:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8005806:	e01f      	b.n	8005848 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	3301      	adds	r3, #1
 800580c:	d01c      	beq.n	8005848 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d007      	beq.n	8005824 <HAL_ADC_PollForConversion+0x68>
 8005814:	f7ff fdd0 	bl	80053b8 <HAL_GetTick>
 8005818:	0002      	movs	r2, r0
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	429a      	cmp	r2, r3
 8005822:	d211      	bcs.n	8005848 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	4013      	ands	r3, r2
 800582e:	d10b      	bne.n	8005848 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005834:	2204      	movs	r2, #4
 8005836:	431a      	orrs	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2234      	movs	r2, #52	; 0x34
 8005840:	2100      	movs	r1, #0
 8005842:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e04a      	b.n	80058de <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4013      	ands	r3, r2
 8005852:	d0d9      	beq.n	8005808 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005858:	2280      	movs	r2, #128	; 0x80
 800585a:	0092      	lsls	r2, r2, #2
 800585c:	431a      	orrs	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68da      	ldr	r2, [r3, #12]
 8005868:	23c0      	movs	r3, #192	; 0xc0
 800586a:	011b      	lsls	r3, r3, #4
 800586c:	4013      	ands	r3, r2
 800586e:	d12d      	bne.n	80058cc <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005874:	2b00      	cmp	r3, #0
 8005876:	d129      	bne.n	80058cc <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2208      	movs	r2, #8
 8005880:	4013      	ands	r3, r2
 8005882:	2b08      	cmp	r3, #8
 8005884:	d122      	bne.n	80058cc <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	2204      	movs	r2, #4
 800588e:	4013      	ands	r3, r2
 8005890:	d110      	bne.n	80058b4 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	210c      	movs	r1, #12
 800589e:	438a      	bics	r2, r1
 80058a0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a6:	4a10      	ldr	r2, [pc, #64]	; (80058e8 <HAL_ADC_PollForConversion+0x12c>)
 80058a8:	4013      	ands	r3, r2
 80058aa:	2201      	movs	r2, #1
 80058ac:	431a      	orrs	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	639a      	str	r2, [r3, #56]	; 0x38
 80058b2:	e00b      	b.n	80058cc <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b8:	2220      	movs	r2, #32
 80058ba:	431a      	orrs	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c4:	2201      	movs	r2, #1
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	7e1b      	ldrb	r3, [r3, #24]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d103      	bne.n	80058dc <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	220c      	movs	r2, #12
 80058da:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	0018      	movs	r0, r3
 80058e0:	46bd      	mov	sp, r7
 80058e2:	b004      	add	sp, #16
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	46c0      	nop			; (mov r8, r8)
 80058e8:	fffffefe 	.word	0xfffffefe

080058ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80058fa:	0018      	movs	r0, r3
 80058fc:	46bd      	mov	sp, r7
 80058fe:	b002      	add	sp, #8
 8005900:	bd80      	pop	{r7, pc}
	...

08005904 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800590e:	230f      	movs	r3, #15
 8005910:	18fb      	adds	r3, r7, r3
 8005912:	2200      	movs	r2, #0
 8005914:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8005916:	2300      	movs	r3, #0
 8005918:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800591e:	2380      	movs	r3, #128	; 0x80
 8005920:	055b      	lsls	r3, r3, #21
 8005922:	429a      	cmp	r2, r3
 8005924:	d011      	beq.n	800594a <HAL_ADC_ConfigChannel+0x46>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592a:	2b01      	cmp	r3, #1
 800592c:	d00d      	beq.n	800594a <HAL_ADC_ConfigChannel+0x46>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005932:	2b02      	cmp	r3, #2
 8005934:	d009      	beq.n	800594a <HAL_ADC_ConfigChannel+0x46>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593a:	2b03      	cmp	r3, #3
 800593c:	d005      	beq.n	800594a <HAL_ADC_ConfigChannel+0x46>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005942:	2b04      	cmp	r3, #4
 8005944:	d001      	beq.n	800594a <HAL_ADC_ConfigChannel+0x46>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2234      	movs	r2, #52	; 0x34
 800594e:	5c9b      	ldrb	r3, [r3, r2]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d101      	bne.n	8005958 <HAL_ADC_ConfigChannel+0x54>
 8005954:	2302      	movs	r3, #2
 8005956:	e0d0      	b.n	8005afa <HAL_ADC_ConfigChannel+0x1f6>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2234      	movs	r2, #52	; 0x34
 800595c:	2101      	movs	r1, #1
 800595e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	2204      	movs	r2, #4
 8005968:	4013      	ands	r3, r2
 800596a:	d000      	beq.n	800596e <HAL_ADC_ConfigChannel+0x6a>
 800596c:	e0b4      	b.n	8005ad8 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	4a64      	ldr	r2, [pc, #400]	; (8005b04 <HAL_ADC_ConfigChannel+0x200>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d100      	bne.n	800597a <HAL_ADC_ConfigChannel+0x76>
 8005978:	e082      	b.n	8005a80 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2201      	movs	r2, #1
 8005986:	409a      	lsls	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005994:	2380      	movs	r3, #128	; 0x80
 8005996:	055b      	lsls	r3, r3, #21
 8005998:	429a      	cmp	r2, r3
 800599a:	d037      	beq.n	8005a0c <HAL_ADC_ConfigChannel+0x108>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d033      	beq.n	8005a0c <HAL_ADC_ConfigChannel+0x108>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d02f      	beq.n	8005a0c <HAL_ADC_ConfigChannel+0x108>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b0:	2b03      	cmp	r3, #3
 80059b2:	d02b      	beq.n	8005a0c <HAL_ADC_ConfigChannel+0x108>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b8:	2b04      	cmp	r3, #4
 80059ba:	d027      	beq.n	8005a0c <HAL_ADC_ConfigChannel+0x108>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	2b05      	cmp	r3, #5
 80059c2:	d023      	beq.n	8005a0c <HAL_ADC_ConfigChannel+0x108>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c8:	2b06      	cmp	r3, #6
 80059ca:	d01f      	beq.n	8005a0c <HAL_ADC_ConfigChannel+0x108>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d0:	2b07      	cmp	r3, #7
 80059d2:	d01b      	beq.n	8005a0c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	2107      	movs	r1, #7
 80059e0:	400b      	ands	r3, r1
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d012      	beq.n	8005a0c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	695a      	ldr	r2, [r3, #20]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2107      	movs	r1, #7
 80059f2:	438a      	bics	r2, r1
 80059f4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6959      	ldr	r1, [r3, #20]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	2207      	movs	r2, #7
 8005a02:	401a      	ands	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b10      	cmp	r3, #16
 8005a12:	d007      	beq.n	8005a24 <HAL_ADC_ConfigChannel+0x120>
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b11      	cmp	r3, #17
 8005a1a:	d003      	beq.n	8005a24 <HAL_ADC_ConfigChannel+0x120>
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2b12      	cmp	r3, #18
 8005a22:	d163      	bne.n	8005aec <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8005a24:	4b38      	ldr	r3, [pc, #224]	; (8005b08 <HAL_ADC_ConfigChannel+0x204>)
 8005a26:	6819      	ldr	r1, [r3, #0]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b10      	cmp	r3, #16
 8005a2e:	d009      	beq.n	8005a44 <HAL_ADC_ConfigChannel+0x140>
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2b11      	cmp	r3, #17
 8005a36:	d102      	bne.n	8005a3e <HAL_ADC_ConfigChannel+0x13a>
 8005a38:	2380      	movs	r3, #128	; 0x80
 8005a3a:	03db      	lsls	r3, r3, #15
 8005a3c:	e004      	b.n	8005a48 <HAL_ADC_ConfigChannel+0x144>
 8005a3e:	2380      	movs	r3, #128	; 0x80
 8005a40:	045b      	lsls	r3, r3, #17
 8005a42:	e001      	b.n	8005a48 <HAL_ADC_ConfigChannel+0x144>
 8005a44:	2380      	movs	r3, #128	; 0x80
 8005a46:	041b      	lsls	r3, r3, #16
 8005a48:	4a2f      	ldr	r2, [pc, #188]	; (8005b08 <HAL_ADC_ConfigChannel+0x204>)
 8005a4a:	430b      	orrs	r3, r1
 8005a4c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2b10      	cmp	r3, #16
 8005a54:	d14a      	bne.n	8005aec <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005a56:	4b2d      	ldr	r3, [pc, #180]	; (8005b0c <HAL_ADC_ConfigChannel+0x208>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	492d      	ldr	r1, [pc, #180]	; (8005b10 <HAL_ADC_ConfigChannel+0x20c>)
 8005a5c:	0018      	movs	r0, r3
 8005a5e:	f7fa fb6d 	bl	800013c <__udivsi3>
 8005a62:	0003      	movs	r3, r0
 8005a64:	001a      	movs	r2, r3
 8005a66:	0013      	movs	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	189b      	adds	r3, r3, r2
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005a70:	e002      	b.n	8005a78 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	3b01      	subs	r3, #1
 8005a76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1f9      	bne.n	8005a72 <HAL_ADC_ConfigChannel+0x16e>
 8005a7e:	e035      	b.n	8005aec <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2101      	movs	r1, #1
 8005a8c:	4099      	lsls	r1, r3
 8005a8e:	000b      	movs	r3, r1
 8005a90:	43d9      	mvns	r1, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	400a      	ands	r2, r1
 8005a98:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b10      	cmp	r3, #16
 8005aa0:	d007      	beq.n	8005ab2 <HAL_ADC_ConfigChannel+0x1ae>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b11      	cmp	r3, #17
 8005aa8:	d003      	beq.n	8005ab2 <HAL_ADC_ConfigChannel+0x1ae>
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2b12      	cmp	r3, #18
 8005ab0:	d11c      	bne.n	8005aec <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8005ab2:	4b15      	ldr	r3, [pc, #84]	; (8005b08 <HAL_ADC_ConfigChannel+0x204>)
 8005ab4:	6819      	ldr	r1, [r3, #0]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2b10      	cmp	r3, #16
 8005abc:	d007      	beq.n	8005ace <HAL_ADC_ConfigChannel+0x1ca>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b11      	cmp	r3, #17
 8005ac4:	d101      	bne.n	8005aca <HAL_ADC_ConfigChannel+0x1c6>
 8005ac6:	4b13      	ldr	r3, [pc, #76]	; (8005b14 <HAL_ADC_ConfigChannel+0x210>)
 8005ac8:	e002      	b.n	8005ad0 <HAL_ADC_ConfigChannel+0x1cc>
 8005aca:	4b13      	ldr	r3, [pc, #76]	; (8005b18 <HAL_ADC_ConfigChannel+0x214>)
 8005acc:	e000      	b.n	8005ad0 <HAL_ADC_ConfigChannel+0x1cc>
 8005ace:	4b13      	ldr	r3, [pc, #76]	; (8005b1c <HAL_ADC_ConfigChannel+0x218>)
 8005ad0:	4a0d      	ldr	r2, [pc, #52]	; (8005b08 <HAL_ADC_ConfigChannel+0x204>)
 8005ad2:	400b      	ands	r3, r1
 8005ad4:	6013      	str	r3, [r2, #0]
 8005ad6:	e009      	b.n	8005aec <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005adc:	2220      	movs	r2, #32
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8005ae4:	230f      	movs	r3, #15
 8005ae6:	18fb      	adds	r3, r7, r3
 8005ae8:	2201      	movs	r2, #1
 8005aea:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2234      	movs	r2, #52	; 0x34
 8005af0:	2100      	movs	r1, #0
 8005af2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8005af4:	230f      	movs	r3, #15
 8005af6:	18fb      	adds	r3, r7, r3
 8005af8:	781b      	ldrb	r3, [r3, #0]
}
 8005afa:	0018      	movs	r0, r3
 8005afc:	46bd      	mov	sp, r7
 8005afe:	b004      	add	sp, #16
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	46c0      	nop			; (mov r8, r8)
 8005b04:	00001001 	.word	0x00001001
 8005b08:	40012708 	.word	0x40012708
 8005b0c:	20002820 	.word	0x20002820
 8005b10:	000f4240 	.word	0x000f4240
 8005b14:	ffbfffff 	.word	0xffbfffff
 8005b18:	feffffff 	.word	0xfeffffff
 8005b1c:	ff7fffff 	.word	0xff7fffff

08005b20 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	2203      	movs	r2, #3
 8005b38:	4013      	ands	r3, r2
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d112      	bne.n	8005b64 <ADC_Enable+0x44>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2201      	movs	r2, #1
 8005b46:	4013      	ands	r3, r2
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d009      	beq.n	8005b60 <ADC_Enable+0x40>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	2380      	movs	r3, #128	; 0x80
 8005b54:	021b      	lsls	r3, r3, #8
 8005b56:	401a      	ands	r2, r3
 8005b58:	2380      	movs	r3, #128	; 0x80
 8005b5a:	021b      	lsls	r3, r3, #8
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d101      	bne.n	8005b64 <ADC_Enable+0x44>
 8005b60:	2301      	movs	r3, #1
 8005b62:	e000      	b.n	8005b66 <ADC_Enable+0x46>
 8005b64:	2300      	movs	r3, #0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d152      	bne.n	8005c10 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	4a2a      	ldr	r2, [pc, #168]	; (8005c1c <ADC_Enable+0xfc>)
 8005b72:	4013      	ands	r3, r2
 8005b74:	d00d      	beq.n	8005b92 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7a:	2210      	movs	r2, #16
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b86:	2201      	movs	r2, #1
 8005b88:	431a      	orrs	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e03f      	b.n	8005c12 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005ba2:	4b1f      	ldr	r3, [pc, #124]	; (8005c20 <ADC_Enable+0x100>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	491f      	ldr	r1, [pc, #124]	; (8005c24 <ADC_Enable+0x104>)
 8005ba8:	0018      	movs	r0, r3
 8005baa:	f7fa fac7 	bl	800013c <__udivsi3>
 8005bae:	0003      	movs	r3, r0
 8005bb0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005bb2:	e002      	b.n	8005bba <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1f9      	bne.n	8005bb4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8005bc0:	f7ff fbfa 	bl	80053b8 <HAL_GetTick>
 8005bc4:	0003      	movs	r3, r0
 8005bc6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005bc8:	e01b      	b.n	8005c02 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005bca:	f7ff fbf5 	bl	80053b8 <HAL_GetTick>
 8005bce:	0002      	movs	r2, r0
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d914      	bls.n	8005c02 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2201      	movs	r2, #1
 8005be0:	4013      	ands	r3, r2
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d00d      	beq.n	8005c02 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bea:	2210      	movs	r2, #16
 8005bec:	431a      	orrs	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e007      	b.n	8005c12 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d1dc      	bne.n	8005bca <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	0018      	movs	r0, r3
 8005c14:	46bd      	mov	sp, r7
 8005c16:	b004      	add	sp, #16
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	46c0      	nop			; (mov r8, r8)
 8005c1c:	80000017 	.word	0x80000017
 8005c20:	20002820 	.word	0x20002820
 8005c24:	000f4240 	.word	0x000f4240

08005c28 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c30:	2300      	movs	r3, #0
 8005c32:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	2203      	movs	r2, #3
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d112      	bne.n	8005c68 <ADC_Disable+0x40>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d009      	beq.n	8005c64 <ADC_Disable+0x3c>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	2380      	movs	r3, #128	; 0x80
 8005c58:	021b      	lsls	r3, r3, #8
 8005c5a:	401a      	ands	r2, r3
 8005c5c:	2380      	movs	r3, #128	; 0x80
 8005c5e:	021b      	lsls	r3, r3, #8
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d101      	bne.n	8005c68 <ADC_Disable+0x40>
 8005c64:	2301      	movs	r3, #1
 8005c66:	e000      	b.n	8005c6a <ADC_Disable+0x42>
 8005c68:	2300      	movs	r3, #0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d048      	beq.n	8005d00 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	2205      	movs	r2, #5
 8005c76:	4013      	ands	r3, r2
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d110      	bne.n	8005c9e <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689a      	ldr	r2, [r3, #8]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2102      	movs	r1, #2
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	609a      	str	r2, [r3, #8]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2203      	movs	r2, #3
 8005c92:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005c94:	f7ff fb90 	bl	80053b8 <HAL_GetTick>
 8005c98:	0003      	movs	r3, r0
 8005c9a:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005c9c:	e029      	b.n	8005cf2 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca2:	2210      	movs	r2, #16
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cae:	2201      	movs	r2, #1
 8005cb0:	431a      	orrs	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e023      	b.n	8005d02 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005cba:	f7ff fb7d 	bl	80053b8 <HAL_GetTick>
 8005cbe:	0002      	movs	r2, r0
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d914      	bls.n	8005cf2 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d10d      	bne.n	8005cf2 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cda:	2210      	movs	r2, #16
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e007      	b.n	8005d02 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d0dc      	beq.n	8005cba <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	0018      	movs	r0, r3
 8005d04:	46bd      	mov	sp, r7
 8005d06:	b004      	add	sp, #16
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b084      	sub	sp, #16
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	2204      	movs	r2, #4
 8005d1e:	4013      	ands	r3, r2
 8005d20:	d03a      	beq.n	8005d98 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	2204      	movs	r2, #4
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	2b04      	cmp	r3, #4
 8005d2e:	d10d      	bne.n	8005d4c <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	2202      	movs	r2, #2
 8005d38:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005d3a:	d107      	bne.n	8005d4c <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689a      	ldr	r2, [r3, #8]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2110      	movs	r1, #16
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005d4c:	f7ff fb34 	bl	80053b8 <HAL_GetTick>
 8005d50:	0003      	movs	r3, r0
 8005d52:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8005d54:	e01a      	b.n	8005d8c <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005d56:	f7ff fb2f 	bl	80053b8 <HAL_GetTick>
 8005d5a:	0002      	movs	r2, r0
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d913      	bls.n	8005d8c <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	2204      	movs	r2, #4
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	d00d      	beq.n	8005d8c <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d74:	2210      	movs	r2, #16
 8005d76:	431a      	orrs	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d80:	2201      	movs	r2, #1
 8005d82:	431a      	orrs	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e006      	b.n	8005d9a <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	2204      	movs	r2, #4
 8005d94:	4013      	ands	r3, r2
 8005d96:	d1de      	bne.n	8005d56 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	0018      	movs	r0, r3
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	b004      	add	sp, #16
 8005da0:	bd80      	pop	{r7, pc}
	...

08005da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005da4:	b590      	push	{r4, r7, lr}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	0002      	movs	r2, r0
 8005dac:	6039      	str	r1, [r7, #0]
 8005dae:	1dfb      	adds	r3, r7, #7
 8005db0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005db2:	1dfb      	adds	r3, r7, #7
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	2b7f      	cmp	r3, #127	; 0x7f
 8005db8:	d828      	bhi.n	8005e0c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005dba:	4a2f      	ldr	r2, [pc, #188]	; (8005e78 <__NVIC_SetPriority+0xd4>)
 8005dbc:	1dfb      	adds	r3, r7, #7
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	b25b      	sxtb	r3, r3
 8005dc2:	089b      	lsrs	r3, r3, #2
 8005dc4:	33c0      	adds	r3, #192	; 0xc0
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	589b      	ldr	r3, [r3, r2]
 8005dca:	1dfa      	adds	r2, r7, #7
 8005dcc:	7812      	ldrb	r2, [r2, #0]
 8005dce:	0011      	movs	r1, r2
 8005dd0:	2203      	movs	r2, #3
 8005dd2:	400a      	ands	r2, r1
 8005dd4:	00d2      	lsls	r2, r2, #3
 8005dd6:	21ff      	movs	r1, #255	; 0xff
 8005dd8:	4091      	lsls	r1, r2
 8005dda:	000a      	movs	r2, r1
 8005ddc:	43d2      	mvns	r2, r2
 8005dde:	401a      	ands	r2, r3
 8005de0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	019b      	lsls	r3, r3, #6
 8005de6:	22ff      	movs	r2, #255	; 0xff
 8005de8:	401a      	ands	r2, r3
 8005dea:	1dfb      	adds	r3, r7, #7
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	0018      	movs	r0, r3
 8005df0:	2303      	movs	r3, #3
 8005df2:	4003      	ands	r3, r0
 8005df4:	00db      	lsls	r3, r3, #3
 8005df6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005df8:	481f      	ldr	r0, [pc, #124]	; (8005e78 <__NVIC_SetPriority+0xd4>)
 8005dfa:	1dfb      	adds	r3, r7, #7
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	b25b      	sxtb	r3, r3
 8005e00:	089b      	lsrs	r3, r3, #2
 8005e02:	430a      	orrs	r2, r1
 8005e04:	33c0      	adds	r3, #192	; 0xc0
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005e0a:	e031      	b.n	8005e70 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005e0c:	4a1b      	ldr	r2, [pc, #108]	; (8005e7c <__NVIC_SetPriority+0xd8>)
 8005e0e:	1dfb      	adds	r3, r7, #7
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	0019      	movs	r1, r3
 8005e14:	230f      	movs	r3, #15
 8005e16:	400b      	ands	r3, r1
 8005e18:	3b08      	subs	r3, #8
 8005e1a:	089b      	lsrs	r3, r3, #2
 8005e1c:	3306      	adds	r3, #6
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	18d3      	adds	r3, r2, r3
 8005e22:	3304      	adds	r3, #4
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	1dfa      	adds	r2, r7, #7
 8005e28:	7812      	ldrb	r2, [r2, #0]
 8005e2a:	0011      	movs	r1, r2
 8005e2c:	2203      	movs	r2, #3
 8005e2e:	400a      	ands	r2, r1
 8005e30:	00d2      	lsls	r2, r2, #3
 8005e32:	21ff      	movs	r1, #255	; 0xff
 8005e34:	4091      	lsls	r1, r2
 8005e36:	000a      	movs	r2, r1
 8005e38:	43d2      	mvns	r2, r2
 8005e3a:	401a      	ands	r2, r3
 8005e3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	019b      	lsls	r3, r3, #6
 8005e42:	22ff      	movs	r2, #255	; 0xff
 8005e44:	401a      	ands	r2, r3
 8005e46:	1dfb      	adds	r3, r7, #7
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	0018      	movs	r0, r3
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	4003      	ands	r3, r0
 8005e50:	00db      	lsls	r3, r3, #3
 8005e52:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005e54:	4809      	ldr	r0, [pc, #36]	; (8005e7c <__NVIC_SetPriority+0xd8>)
 8005e56:	1dfb      	adds	r3, r7, #7
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	001c      	movs	r4, r3
 8005e5c:	230f      	movs	r3, #15
 8005e5e:	4023      	ands	r3, r4
 8005e60:	3b08      	subs	r3, #8
 8005e62:	089b      	lsrs	r3, r3, #2
 8005e64:	430a      	orrs	r2, r1
 8005e66:	3306      	adds	r3, #6
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	18c3      	adds	r3, r0, r3
 8005e6c:	3304      	adds	r3, #4
 8005e6e:	601a      	str	r2, [r3, #0]
}
 8005e70:	46c0      	nop			; (mov r8, r8)
 8005e72:	46bd      	mov	sp, r7
 8005e74:	b003      	add	sp, #12
 8005e76:	bd90      	pop	{r4, r7, pc}
 8005e78:	e000e100 	.word	0xe000e100
 8005e7c:	e000ed00 	.word	0xe000ed00

08005e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	1e5a      	subs	r2, r3, #1
 8005e8c:	2380      	movs	r3, #128	; 0x80
 8005e8e:	045b      	lsls	r3, r3, #17
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d301      	bcc.n	8005e98 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e94:	2301      	movs	r3, #1
 8005e96:	e010      	b.n	8005eba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e98:	4b0a      	ldr	r3, [pc, #40]	; (8005ec4 <SysTick_Config+0x44>)
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	3a01      	subs	r2, #1
 8005e9e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	425b      	negs	r3, r3
 8005ea4:	2103      	movs	r1, #3
 8005ea6:	0018      	movs	r0, r3
 8005ea8:	f7ff ff7c 	bl	8005da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005eac:	4b05      	ldr	r3, [pc, #20]	; (8005ec4 <SysTick_Config+0x44>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005eb2:	4b04      	ldr	r3, [pc, #16]	; (8005ec4 <SysTick_Config+0x44>)
 8005eb4:	2207      	movs	r2, #7
 8005eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	0018      	movs	r0, r3
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	b002      	add	sp, #8
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	46c0      	nop			; (mov r8, r8)
 8005ec4:	e000e010 	.word	0xe000e010

08005ec8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60b9      	str	r1, [r7, #8]
 8005ed0:	607a      	str	r2, [r7, #4]
 8005ed2:	210f      	movs	r1, #15
 8005ed4:	187b      	adds	r3, r7, r1
 8005ed6:	1c02      	adds	r2, r0, #0
 8005ed8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	187b      	adds	r3, r7, r1
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	b25b      	sxtb	r3, r3
 8005ee2:	0011      	movs	r1, r2
 8005ee4:	0018      	movs	r0, r3
 8005ee6:	f7ff ff5d 	bl	8005da4 <__NVIC_SetPriority>
}
 8005eea:	46c0      	nop			; (mov r8, r8)
 8005eec:	46bd      	mov	sp, r7
 8005eee:	b004      	add	sp, #16
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b082      	sub	sp, #8
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	0018      	movs	r0, r3
 8005efe:	f7ff ffbf 	bl	8005e80 <SysTick_Config>
 8005f02:	0003      	movs	r3, r0
}
 8005f04:	0018      	movs	r0, r3
 8005f06:	46bd      	mov	sp, r7
 8005f08:	b002      	add	sp, #8
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f16:	2300      	movs	r3, #0
 8005f18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f1a:	e155      	b.n	80061c8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2101      	movs	r1, #1
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	4091      	lsls	r1, r2
 8005f26:	000a      	movs	r2, r1
 8005f28:	4013      	ands	r3, r2
 8005f2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d100      	bne.n	8005f34 <HAL_GPIO_Init+0x28>
 8005f32:	e146      	b.n	80061c2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	2203      	movs	r2, #3
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d005      	beq.n	8005f4c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	2203      	movs	r2, #3
 8005f46:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d130      	bne.n	8005fae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	005b      	lsls	r3, r3, #1
 8005f56:	2203      	movs	r2, #3
 8005f58:	409a      	lsls	r2, r3
 8005f5a:	0013      	movs	r3, r2
 8005f5c:	43da      	mvns	r2, r3
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	4013      	ands	r3, r2
 8005f62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	68da      	ldr	r2, [r3, #12]
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	005b      	lsls	r3, r3, #1
 8005f6c:	409a      	lsls	r2, r3
 8005f6e:	0013      	movs	r3, r2
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f82:	2201      	movs	r2, #1
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	409a      	lsls	r2, r3
 8005f88:	0013      	movs	r3, r2
 8005f8a:	43da      	mvns	r2, r3
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	4013      	ands	r3, r2
 8005f90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	091b      	lsrs	r3, r3, #4
 8005f98:	2201      	movs	r2, #1
 8005f9a:	401a      	ands	r2, r3
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	409a      	lsls	r2, r3
 8005fa0:	0013      	movs	r3, r2
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	2203      	movs	r2, #3
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	2b03      	cmp	r3, #3
 8005fb8:	d017      	beq.n	8005fea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	2203      	movs	r2, #3
 8005fc6:	409a      	lsls	r2, r3
 8005fc8:	0013      	movs	r3, r2
 8005fca:	43da      	mvns	r2, r3
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	689a      	ldr	r2, [r3, #8]
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	409a      	lsls	r2, r3
 8005fdc:	0013      	movs	r3, r2
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	2203      	movs	r2, #3
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d123      	bne.n	800603e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	08da      	lsrs	r2, r3, #3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	3208      	adds	r2, #8
 8005ffe:	0092      	lsls	r2, r2, #2
 8006000:	58d3      	ldr	r3, [r2, r3]
 8006002:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	2207      	movs	r2, #7
 8006008:	4013      	ands	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	220f      	movs	r2, #15
 800600e:	409a      	lsls	r2, r3
 8006010:	0013      	movs	r3, r2
 8006012:	43da      	mvns	r2, r3
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	4013      	ands	r3, r2
 8006018:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	691a      	ldr	r2, [r3, #16]
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	2107      	movs	r1, #7
 8006022:	400b      	ands	r3, r1
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	409a      	lsls	r2, r3
 8006028:	0013      	movs	r3, r2
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	4313      	orrs	r3, r2
 800602e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	08da      	lsrs	r2, r3, #3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	3208      	adds	r2, #8
 8006038:	0092      	lsls	r2, r2, #2
 800603a:	6939      	ldr	r1, [r7, #16]
 800603c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	005b      	lsls	r3, r3, #1
 8006048:	2203      	movs	r2, #3
 800604a:	409a      	lsls	r2, r3
 800604c:	0013      	movs	r3, r2
 800604e:	43da      	mvns	r2, r3
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	4013      	ands	r3, r2
 8006054:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	2203      	movs	r2, #3
 800605c:	401a      	ands	r2, r3
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	005b      	lsls	r3, r3, #1
 8006062:	409a      	lsls	r2, r3
 8006064:	0013      	movs	r3, r2
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	4313      	orrs	r3, r2
 800606a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	23c0      	movs	r3, #192	; 0xc0
 8006078:	029b      	lsls	r3, r3, #10
 800607a:	4013      	ands	r3, r2
 800607c:	d100      	bne.n	8006080 <HAL_GPIO_Init+0x174>
 800607e:	e0a0      	b.n	80061c2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006080:	4b57      	ldr	r3, [pc, #348]	; (80061e0 <HAL_GPIO_Init+0x2d4>)
 8006082:	699a      	ldr	r2, [r3, #24]
 8006084:	4b56      	ldr	r3, [pc, #344]	; (80061e0 <HAL_GPIO_Init+0x2d4>)
 8006086:	2101      	movs	r1, #1
 8006088:	430a      	orrs	r2, r1
 800608a:	619a      	str	r2, [r3, #24]
 800608c:	4b54      	ldr	r3, [pc, #336]	; (80061e0 <HAL_GPIO_Init+0x2d4>)
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	2201      	movs	r2, #1
 8006092:	4013      	ands	r3, r2
 8006094:	60bb      	str	r3, [r7, #8]
 8006096:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006098:	4a52      	ldr	r2, [pc, #328]	; (80061e4 <HAL_GPIO_Init+0x2d8>)
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	089b      	lsrs	r3, r3, #2
 800609e:	3302      	adds	r3, #2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	589b      	ldr	r3, [r3, r2]
 80060a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	2203      	movs	r2, #3
 80060aa:	4013      	ands	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	220f      	movs	r2, #15
 80060b0:	409a      	lsls	r2, r3
 80060b2:	0013      	movs	r3, r2
 80060b4:	43da      	mvns	r2, r3
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	4013      	ands	r3, r2
 80060ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	2390      	movs	r3, #144	; 0x90
 80060c0:	05db      	lsls	r3, r3, #23
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d019      	beq.n	80060fa <HAL_GPIO_Init+0x1ee>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a47      	ldr	r2, [pc, #284]	; (80061e8 <HAL_GPIO_Init+0x2dc>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d013      	beq.n	80060f6 <HAL_GPIO_Init+0x1ea>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a46      	ldr	r2, [pc, #280]	; (80061ec <HAL_GPIO_Init+0x2e0>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d00d      	beq.n	80060f2 <HAL_GPIO_Init+0x1e6>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a45      	ldr	r2, [pc, #276]	; (80061f0 <HAL_GPIO_Init+0x2e4>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d007      	beq.n	80060ee <HAL_GPIO_Init+0x1e2>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a44      	ldr	r2, [pc, #272]	; (80061f4 <HAL_GPIO_Init+0x2e8>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d101      	bne.n	80060ea <HAL_GPIO_Init+0x1de>
 80060e6:	2304      	movs	r3, #4
 80060e8:	e008      	b.n	80060fc <HAL_GPIO_Init+0x1f0>
 80060ea:	2305      	movs	r3, #5
 80060ec:	e006      	b.n	80060fc <HAL_GPIO_Init+0x1f0>
 80060ee:	2303      	movs	r3, #3
 80060f0:	e004      	b.n	80060fc <HAL_GPIO_Init+0x1f0>
 80060f2:	2302      	movs	r3, #2
 80060f4:	e002      	b.n	80060fc <HAL_GPIO_Init+0x1f0>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e000      	b.n	80060fc <HAL_GPIO_Init+0x1f0>
 80060fa:	2300      	movs	r3, #0
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	2103      	movs	r1, #3
 8006100:	400a      	ands	r2, r1
 8006102:	0092      	lsls	r2, r2, #2
 8006104:	4093      	lsls	r3, r2
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	4313      	orrs	r3, r2
 800610a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800610c:	4935      	ldr	r1, [pc, #212]	; (80061e4 <HAL_GPIO_Init+0x2d8>)
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	089b      	lsrs	r3, r3, #2
 8006112:	3302      	adds	r3, #2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800611a:	4b37      	ldr	r3, [pc, #220]	; (80061f8 <HAL_GPIO_Init+0x2ec>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	43da      	mvns	r2, r3
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	4013      	ands	r3, r2
 8006128:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	2380      	movs	r3, #128	; 0x80
 8006130:	025b      	lsls	r3, r3, #9
 8006132:	4013      	ands	r3, r2
 8006134:	d003      	beq.n	800613e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4313      	orrs	r3, r2
 800613c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800613e:	4b2e      	ldr	r3, [pc, #184]	; (80061f8 <HAL_GPIO_Init+0x2ec>)
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8006144:	4b2c      	ldr	r3, [pc, #176]	; (80061f8 <HAL_GPIO_Init+0x2ec>)
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	43da      	mvns	r2, r3
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	4013      	ands	r3, r2
 8006152:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	2380      	movs	r3, #128	; 0x80
 800615a:	029b      	lsls	r3, r3, #10
 800615c:	4013      	ands	r3, r2
 800615e:	d003      	beq.n	8006168 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	4313      	orrs	r3, r2
 8006166:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006168:	4b23      	ldr	r3, [pc, #140]	; (80061f8 <HAL_GPIO_Init+0x2ec>)
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800616e:	4b22      	ldr	r3, [pc, #136]	; (80061f8 <HAL_GPIO_Init+0x2ec>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	43da      	mvns	r2, r3
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	4013      	ands	r3, r2
 800617c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	2380      	movs	r3, #128	; 0x80
 8006184:	035b      	lsls	r3, r3, #13
 8006186:	4013      	ands	r3, r2
 8006188:	d003      	beq.n	8006192 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	4313      	orrs	r3, r2
 8006190:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006192:	4b19      	ldr	r3, [pc, #100]	; (80061f8 <HAL_GPIO_Init+0x2ec>)
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8006198:	4b17      	ldr	r3, [pc, #92]	; (80061f8 <HAL_GPIO_Init+0x2ec>)
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	43da      	mvns	r2, r3
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	4013      	ands	r3, r2
 80061a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685a      	ldr	r2, [r3, #4]
 80061ac:	2380      	movs	r3, #128	; 0x80
 80061ae:	039b      	lsls	r3, r3, #14
 80061b0:	4013      	ands	r3, r2
 80061b2:	d003      	beq.n	80061bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80061bc:	4b0e      	ldr	r3, [pc, #56]	; (80061f8 <HAL_GPIO_Init+0x2ec>)
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	3301      	adds	r3, #1
 80061c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	40da      	lsrs	r2, r3
 80061d0:	1e13      	subs	r3, r2, #0
 80061d2:	d000      	beq.n	80061d6 <HAL_GPIO_Init+0x2ca>
 80061d4:	e6a2      	b.n	8005f1c <HAL_GPIO_Init+0x10>
  } 
}
 80061d6:	46c0      	nop			; (mov r8, r8)
 80061d8:	46c0      	nop			; (mov r8, r8)
 80061da:	46bd      	mov	sp, r7
 80061dc:	b006      	add	sp, #24
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	40021000 	.word	0x40021000
 80061e4:	40010000 	.word	0x40010000
 80061e8:	48000400 	.word	0x48000400
 80061ec:	48000800 	.word	0x48000800
 80061f0:	48000c00 	.word	0x48000c00
 80061f4:	48001000 	.word	0x48001000
 80061f8:	40010400 	.word	0x40010400

080061fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	000a      	movs	r2, r1
 8006206:	1cbb      	adds	r3, r7, #2
 8006208:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	1cba      	adds	r2, r7, #2
 8006210:	8812      	ldrh	r2, [r2, #0]
 8006212:	4013      	ands	r3, r2
 8006214:	d004      	beq.n	8006220 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8006216:	230f      	movs	r3, #15
 8006218:	18fb      	adds	r3, r7, r3
 800621a:	2201      	movs	r2, #1
 800621c:	701a      	strb	r2, [r3, #0]
 800621e:	e003      	b.n	8006228 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006220:	230f      	movs	r3, #15
 8006222:	18fb      	adds	r3, r7, r3
 8006224:	2200      	movs	r2, #0
 8006226:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8006228:	230f      	movs	r3, #15
 800622a:	18fb      	adds	r3, r7, r3
 800622c:	781b      	ldrb	r3, [r3, #0]
  }
 800622e:	0018      	movs	r0, r3
 8006230:	46bd      	mov	sp, r7
 8006232:	b004      	add	sp, #16
 8006234:	bd80      	pop	{r7, pc}

08006236 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b082      	sub	sp, #8
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
 800623e:	0008      	movs	r0, r1
 8006240:	0011      	movs	r1, r2
 8006242:	1cbb      	adds	r3, r7, #2
 8006244:	1c02      	adds	r2, r0, #0
 8006246:	801a      	strh	r2, [r3, #0]
 8006248:	1c7b      	adds	r3, r7, #1
 800624a:	1c0a      	adds	r2, r1, #0
 800624c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800624e:	1c7b      	adds	r3, r7, #1
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d004      	beq.n	8006260 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006256:	1cbb      	adds	r3, r7, #2
 8006258:	881a      	ldrh	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800625e:	e003      	b.n	8006268 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006260:	1cbb      	adds	r3, r7, #2
 8006262:	881a      	ldrh	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006268:	46c0      	nop			; (mov r8, r8)
 800626a:	46bd      	mov	sp, r7
 800626c:	b002      	add	sp, #8
 800626e:	bd80      	pop	{r7, pc}

08006270 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b088      	sub	sp, #32
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d102      	bne.n	8006284 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	f000 fb76 	bl	8006970 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2201      	movs	r2, #1
 800628a:	4013      	ands	r3, r2
 800628c:	d100      	bne.n	8006290 <HAL_RCC_OscConfig+0x20>
 800628e:	e08e      	b.n	80063ae <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006290:	4bc5      	ldr	r3, [pc, #788]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	220c      	movs	r2, #12
 8006296:	4013      	ands	r3, r2
 8006298:	2b04      	cmp	r3, #4
 800629a:	d00e      	beq.n	80062ba <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800629c:	4bc2      	ldr	r3, [pc, #776]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	220c      	movs	r2, #12
 80062a2:	4013      	ands	r3, r2
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	d117      	bne.n	80062d8 <HAL_RCC_OscConfig+0x68>
 80062a8:	4bbf      	ldr	r3, [pc, #764]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	23c0      	movs	r3, #192	; 0xc0
 80062ae:	025b      	lsls	r3, r3, #9
 80062b0:	401a      	ands	r2, r3
 80062b2:	2380      	movs	r3, #128	; 0x80
 80062b4:	025b      	lsls	r3, r3, #9
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d10e      	bne.n	80062d8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062ba:	4bbb      	ldr	r3, [pc, #748]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	2380      	movs	r3, #128	; 0x80
 80062c0:	029b      	lsls	r3, r3, #10
 80062c2:	4013      	ands	r3, r2
 80062c4:	d100      	bne.n	80062c8 <HAL_RCC_OscConfig+0x58>
 80062c6:	e071      	b.n	80063ac <HAL_RCC_OscConfig+0x13c>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d000      	beq.n	80062d2 <HAL_RCC_OscConfig+0x62>
 80062d0:	e06c      	b.n	80063ac <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	f000 fb4c 	bl	8006970 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d107      	bne.n	80062f0 <HAL_RCC_OscConfig+0x80>
 80062e0:	4bb1      	ldr	r3, [pc, #708]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	4bb0      	ldr	r3, [pc, #704]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 80062e6:	2180      	movs	r1, #128	; 0x80
 80062e8:	0249      	lsls	r1, r1, #9
 80062ea:	430a      	orrs	r2, r1
 80062ec:	601a      	str	r2, [r3, #0]
 80062ee:	e02f      	b.n	8006350 <HAL_RCC_OscConfig+0xe0>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10c      	bne.n	8006312 <HAL_RCC_OscConfig+0xa2>
 80062f8:	4bab      	ldr	r3, [pc, #684]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	4baa      	ldr	r3, [pc, #680]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 80062fe:	49ab      	ldr	r1, [pc, #684]	; (80065ac <HAL_RCC_OscConfig+0x33c>)
 8006300:	400a      	ands	r2, r1
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	4ba8      	ldr	r3, [pc, #672]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	4ba7      	ldr	r3, [pc, #668]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 800630a:	49a9      	ldr	r1, [pc, #676]	; (80065b0 <HAL_RCC_OscConfig+0x340>)
 800630c:	400a      	ands	r2, r1
 800630e:	601a      	str	r2, [r3, #0]
 8006310:	e01e      	b.n	8006350 <HAL_RCC_OscConfig+0xe0>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	2b05      	cmp	r3, #5
 8006318:	d10e      	bne.n	8006338 <HAL_RCC_OscConfig+0xc8>
 800631a:	4ba3      	ldr	r3, [pc, #652]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	4ba2      	ldr	r3, [pc, #648]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 8006320:	2180      	movs	r1, #128	; 0x80
 8006322:	02c9      	lsls	r1, r1, #11
 8006324:	430a      	orrs	r2, r1
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	4b9f      	ldr	r3, [pc, #636]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	4b9e      	ldr	r3, [pc, #632]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 800632e:	2180      	movs	r1, #128	; 0x80
 8006330:	0249      	lsls	r1, r1, #9
 8006332:	430a      	orrs	r2, r1
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	e00b      	b.n	8006350 <HAL_RCC_OscConfig+0xe0>
 8006338:	4b9b      	ldr	r3, [pc, #620]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	4b9a      	ldr	r3, [pc, #616]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 800633e:	499b      	ldr	r1, [pc, #620]	; (80065ac <HAL_RCC_OscConfig+0x33c>)
 8006340:	400a      	ands	r2, r1
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	4b98      	ldr	r3, [pc, #608]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	4b97      	ldr	r3, [pc, #604]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 800634a:	4999      	ldr	r1, [pc, #612]	; (80065b0 <HAL_RCC_OscConfig+0x340>)
 800634c:	400a      	ands	r2, r1
 800634e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d014      	beq.n	8006382 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006358:	f7ff f82e 	bl	80053b8 <HAL_GetTick>
 800635c:	0003      	movs	r3, r0
 800635e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006360:	e008      	b.n	8006374 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006362:	f7ff f829 	bl	80053b8 <HAL_GetTick>
 8006366:	0002      	movs	r2, r0
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	2b64      	cmp	r3, #100	; 0x64
 800636e:	d901      	bls.n	8006374 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e2fd      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006374:	4b8c      	ldr	r3, [pc, #560]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	2380      	movs	r3, #128	; 0x80
 800637a:	029b      	lsls	r3, r3, #10
 800637c:	4013      	ands	r3, r2
 800637e:	d0f0      	beq.n	8006362 <HAL_RCC_OscConfig+0xf2>
 8006380:	e015      	b.n	80063ae <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006382:	f7ff f819 	bl	80053b8 <HAL_GetTick>
 8006386:	0003      	movs	r3, r0
 8006388:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800638a:	e008      	b.n	800639e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800638c:	f7ff f814 	bl	80053b8 <HAL_GetTick>
 8006390:	0002      	movs	r2, r0
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	2b64      	cmp	r3, #100	; 0x64
 8006398:	d901      	bls.n	800639e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e2e8      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800639e:	4b82      	ldr	r3, [pc, #520]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	2380      	movs	r3, #128	; 0x80
 80063a4:	029b      	lsls	r3, r3, #10
 80063a6:	4013      	ands	r3, r2
 80063a8:	d1f0      	bne.n	800638c <HAL_RCC_OscConfig+0x11c>
 80063aa:	e000      	b.n	80063ae <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063ac:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2202      	movs	r2, #2
 80063b4:	4013      	ands	r3, r2
 80063b6:	d100      	bne.n	80063ba <HAL_RCC_OscConfig+0x14a>
 80063b8:	e06c      	b.n	8006494 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80063ba:	4b7b      	ldr	r3, [pc, #492]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	220c      	movs	r2, #12
 80063c0:	4013      	ands	r3, r2
 80063c2:	d00e      	beq.n	80063e2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80063c4:	4b78      	ldr	r3, [pc, #480]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	220c      	movs	r2, #12
 80063ca:	4013      	ands	r3, r2
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d11f      	bne.n	8006410 <HAL_RCC_OscConfig+0x1a0>
 80063d0:	4b75      	ldr	r3, [pc, #468]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	23c0      	movs	r3, #192	; 0xc0
 80063d6:	025b      	lsls	r3, r3, #9
 80063d8:	401a      	ands	r2, r3
 80063da:	2380      	movs	r3, #128	; 0x80
 80063dc:	021b      	lsls	r3, r3, #8
 80063de:	429a      	cmp	r2, r3
 80063e0:	d116      	bne.n	8006410 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063e2:	4b71      	ldr	r3, [pc, #452]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2202      	movs	r2, #2
 80063e8:	4013      	ands	r3, r2
 80063ea:	d005      	beq.n	80063f8 <HAL_RCC_OscConfig+0x188>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d001      	beq.n	80063f8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e2bb      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063f8:	4b6b      	ldr	r3, [pc, #428]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	22f8      	movs	r2, #248	; 0xf8
 80063fe:	4393      	bics	r3, r2
 8006400:	0019      	movs	r1, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	00da      	lsls	r2, r3, #3
 8006408:	4b67      	ldr	r3, [pc, #412]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 800640a:	430a      	orrs	r2, r1
 800640c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800640e:	e041      	b.n	8006494 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d024      	beq.n	8006462 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006418:	4b63      	ldr	r3, [pc, #396]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	4b62      	ldr	r3, [pc, #392]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 800641e:	2101      	movs	r1, #1
 8006420:	430a      	orrs	r2, r1
 8006422:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006424:	f7fe ffc8 	bl	80053b8 <HAL_GetTick>
 8006428:	0003      	movs	r3, r0
 800642a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800642c:	e008      	b.n	8006440 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800642e:	f7fe ffc3 	bl	80053b8 <HAL_GetTick>
 8006432:	0002      	movs	r2, r0
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	2b02      	cmp	r3, #2
 800643a:	d901      	bls.n	8006440 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e297      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006440:	4b59      	ldr	r3, [pc, #356]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2202      	movs	r2, #2
 8006446:	4013      	ands	r3, r2
 8006448:	d0f1      	beq.n	800642e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800644a:	4b57      	ldr	r3, [pc, #348]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	22f8      	movs	r2, #248	; 0xf8
 8006450:	4393      	bics	r3, r2
 8006452:	0019      	movs	r1, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	00da      	lsls	r2, r3, #3
 800645a:	4b53      	ldr	r3, [pc, #332]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 800645c:	430a      	orrs	r2, r1
 800645e:	601a      	str	r2, [r3, #0]
 8006460:	e018      	b.n	8006494 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006462:	4b51      	ldr	r3, [pc, #324]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	4b50      	ldr	r3, [pc, #320]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 8006468:	2101      	movs	r1, #1
 800646a:	438a      	bics	r2, r1
 800646c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800646e:	f7fe ffa3 	bl	80053b8 <HAL_GetTick>
 8006472:	0003      	movs	r3, r0
 8006474:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006476:	e008      	b.n	800648a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006478:	f7fe ff9e 	bl	80053b8 <HAL_GetTick>
 800647c:	0002      	movs	r2, r0
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b02      	cmp	r3, #2
 8006484:	d901      	bls.n	800648a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e272      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800648a:	4b47      	ldr	r3, [pc, #284]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2202      	movs	r2, #2
 8006490:	4013      	ands	r3, r2
 8006492:	d1f1      	bne.n	8006478 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2208      	movs	r2, #8
 800649a:	4013      	ands	r3, r2
 800649c:	d036      	beq.n	800650c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d019      	beq.n	80064da <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064a6:	4b40      	ldr	r3, [pc, #256]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 80064a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064aa:	4b3f      	ldr	r3, [pc, #252]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 80064ac:	2101      	movs	r1, #1
 80064ae:	430a      	orrs	r2, r1
 80064b0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064b2:	f7fe ff81 	bl	80053b8 <HAL_GetTick>
 80064b6:	0003      	movs	r3, r0
 80064b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064ba:	e008      	b.n	80064ce <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064bc:	f7fe ff7c 	bl	80053b8 <HAL_GetTick>
 80064c0:	0002      	movs	r2, r0
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d901      	bls.n	80064ce <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e250      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064ce:	4b36      	ldr	r3, [pc, #216]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 80064d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d2:	2202      	movs	r2, #2
 80064d4:	4013      	ands	r3, r2
 80064d6:	d0f1      	beq.n	80064bc <HAL_RCC_OscConfig+0x24c>
 80064d8:	e018      	b.n	800650c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064da:	4b33      	ldr	r3, [pc, #204]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 80064dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064de:	4b32      	ldr	r3, [pc, #200]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 80064e0:	2101      	movs	r1, #1
 80064e2:	438a      	bics	r2, r1
 80064e4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064e6:	f7fe ff67 	bl	80053b8 <HAL_GetTick>
 80064ea:	0003      	movs	r3, r0
 80064ec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064ee:	e008      	b.n	8006502 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064f0:	f7fe ff62 	bl	80053b8 <HAL_GetTick>
 80064f4:	0002      	movs	r2, r0
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d901      	bls.n	8006502 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e236      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006502:	4b29      	ldr	r3, [pc, #164]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 8006504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006506:	2202      	movs	r2, #2
 8006508:	4013      	ands	r3, r2
 800650a:	d1f1      	bne.n	80064f0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2204      	movs	r2, #4
 8006512:	4013      	ands	r3, r2
 8006514:	d100      	bne.n	8006518 <HAL_RCC_OscConfig+0x2a8>
 8006516:	e0b5      	b.n	8006684 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006518:	201f      	movs	r0, #31
 800651a:	183b      	adds	r3, r7, r0
 800651c:	2200      	movs	r2, #0
 800651e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006520:	4b21      	ldr	r3, [pc, #132]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 8006522:	69da      	ldr	r2, [r3, #28]
 8006524:	2380      	movs	r3, #128	; 0x80
 8006526:	055b      	lsls	r3, r3, #21
 8006528:	4013      	ands	r3, r2
 800652a:	d110      	bne.n	800654e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800652c:	4b1e      	ldr	r3, [pc, #120]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 800652e:	69da      	ldr	r2, [r3, #28]
 8006530:	4b1d      	ldr	r3, [pc, #116]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 8006532:	2180      	movs	r1, #128	; 0x80
 8006534:	0549      	lsls	r1, r1, #21
 8006536:	430a      	orrs	r2, r1
 8006538:	61da      	str	r2, [r3, #28]
 800653a:	4b1b      	ldr	r3, [pc, #108]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 800653c:	69da      	ldr	r2, [r3, #28]
 800653e:	2380      	movs	r3, #128	; 0x80
 8006540:	055b      	lsls	r3, r3, #21
 8006542:	4013      	ands	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]
 8006546:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006548:	183b      	adds	r3, r7, r0
 800654a:	2201      	movs	r2, #1
 800654c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800654e:	4b19      	ldr	r3, [pc, #100]	; (80065b4 <HAL_RCC_OscConfig+0x344>)
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	2380      	movs	r3, #128	; 0x80
 8006554:	005b      	lsls	r3, r3, #1
 8006556:	4013      	ands	r3, r2
 8006558:	d11a      	bne.n	8006590 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800655a:	4b16      	ldr	r3, [pc, #88]	; (80065b4 <HAL_RCC_OscConfig+0x344>)
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	4b15      	ldr	r3, [pc, #84]	; (80065b4 <HAL_RCC_OscConfig+0x344>)
 8006560:	2180      	movs	r1, #128	; 0x80
 8006562:	0049      	lsls	r1, r1, #1
 8006564:	430a      	orrs	r2, r1
 8006566:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006568:	f7fe ff26 	bl	80053b8 <HAL_GetTick>
 800656c:	0003      	movs	r3, r0
 800656e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006570:	e008      	b.n	8006584 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006572:	f7fe ff21 	bl	80053b8 <HAL_GetTick>
 8006576:	0002      	movs	r2, r0
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	2b64      	cmp	r3, #100	; 0x64
 800657e:	d901      	bls.n	8006584 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e1f5      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006584:	4b0b      	ldr	r3, [pc, #44]	; (80065b4 <HAL_RCC_OscConfig+0x344>)
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	2380      	movs	r3, #128	; 0x80
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	4013      	ands	r3, r2
 800658e:	d0f0      	beq.n	8006572 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d10f      	bne.n	80065b8 <HAL_RCC_OscConfig+0x348>
 8006598:	4b03      	ldr	r3, [pc, #12]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 800659a:	6a1a      	ldr	r2, [r3, #32]
 800659c:	4b02      	ldr	r3, [pc, #8]	; (80065a8 <HAL_RCC_OscConfig+0x338>)
 800659e:	2101      	movs	r1, #1
 80065a0:	430a      	orrs	r2, r1
 80065a2:	621a      	str	r2, [r3, #32]
 80065a4:	e036      	b.n	8006614 <HAL_RCC_OscConfig+0x3a4>
 80065a6:	46c0      	nop			; (mov r8, r8)
 80065a8:	40021000 	.word	0x40021000
 80065ac:	fffeffff 	.word	0xfffeffff
 80065b0:	fffbffff 	.word	0xfffbffff
 80065b4:	40007000 	.word	0x40007000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10c      	bne.n	80065da <HAL_RCC_OscConfig+0x36a>
 80065c0:	4bca      	ldr	r3, [pc, #808]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 80065c2:	6a1a      	ldr	r2, [r3, #32]
 80065c4:	4bc9      	ldr	r3, [pc, #804]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 80065c6:	2101      	movs	r1, #1
 80065c8:	438a      	bics	r2, r1
 80065ca:	621a      	str	r2, [r3, #32]
 80065cc:	4bc7      	ldr	r3, [pc, #796]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 80065ce:	6a1a      	ldr	r2, [r3, #32]
 80065d0:	4bc6      	ldr	r3, [pc, #792]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 80065d2:	2104      	movs	r1, #4
 80065d4:	438a      	bics	r2, r1
 80065d6:	621a      	str	r2, [r3, #32]
 80065d8:	e01c      	b.n	8006614 <HAL_RCC_OscConfig+0x3a4>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	2b05      	cmp	r3, #5
 80065e0:	d10c      	bne.n	80065fc <HAL_RCC_OscConfig+0x38c>
 80065e2:	4bc2      	ldr	r3, [pc, #776]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 80065e4:	6a1a      	ldr	r2, [r3, #32]
 80065e6:	4bc1      	ldr	r3, [pc, #772]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 80065e8:	2104      	movs	r1, #4
 80065ea:	430a      	orrs	r2, r1
 80065ec:	621a      	str	r2, [r3, #32]
 80065ee:	4bbf      	ldr	r3, [pc, #764]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 80065f0:	6a1a      	ldr	r2, [r3, #32]
 80065f2:	4bbe      	ldr	r3, [pc, #760]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 80065f4:	2101      	movs	r1, #1
 80065f6:	430a      	orrs	r2, r1
 80065f8:	621a      	str	r2, [r3, #32]
 80065fa:	e00b      	b.n	8006614 <HAL_RCC_OscConfig+0x3a4>
 80065fc:	4bbb      	ldr	r3, [pc, #748]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 80065fe:	6a1a      	ldr	r2, [r3, #32]
 8006600:	4bba      	ldr	r3, [pc, #744]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 8006602:	2101      	movs	r1, #1
 8006604:	438a      	bics	r2, r1
 8006606:	621a      	str	r2, [r3, #32]
 8006608:	4bb8      	ldr	r3, [pc, #736]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 800660a:	6a1a      	ldr	r2, [r3, #32]
 800660c:	4bb7      	ldr	r3, [pc, #732]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 800660e:	2104      	movs	r1, #4
 8006610:	438a      	bics	r2, r1
 8006612:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d014      	beq.n	8006646 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800661c:	f7fe fecc 	bl	80053b8 <HAL_GetTick>
 8006620:	0003      	movs	r3, r0
 8006622:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006624:	e009      	b.n	800663a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006626:	f7fe fec7 	bl	80053b8 <HAL_GetTick>
 800662a:	0002      	movs	r2, r0
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	4aaf      	ldr	r2, [pc, #700]	; (80068f0 <HAL_RCC_OscConfig+0x680>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d901      	bls.n	800663a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e19a      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800663a:	4bac      	ldr	r3, [pc, #688]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	2202      	movs	r2, #2
 8006640:	4013      	ands	r3, r2
 8006642:	d0f0      	beq.n	8006626 <HAL_RCC_OscConfig+0x3b6>
 8006644:	e013      	b.n	800666e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006646:	f7fe feb7 	bl	80053b8 <HAL_GetTick>
 800664a:	0003      	movs	r3, r0
 800664c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800664e:	e009      	b.n	8006664 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006650:	f7fe feb2 	bl	80053b8 <HAL_GetTick>
 8006654:	0002      	movs	r2, r0
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	4aa5      	ldr	r2, [pc, #660]	; (80068f0 <HAL_RCC_OscConfig+0x680>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d901      	bls.n	8006664 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e185      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006664:	4ba1      	ldr	r3, [pc, #644]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	2202      	movs	r2, #2
 800666a:	4013      	ands	r3, r2
 800666c:	d1f0      	bne.n	8006650 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800666e:	231f      	movs	r3, #31
 8006670:	18fb      	adds	r3, r7, r3
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d105      	bne.n	8006684 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006678:	4b9c      	ldr	r3, [pc, #624]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 800667a:	69da      	ldr	r2, [r3, #28]
 800667c:	4b9b      	ldr	r3, [pc, #620]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 800667e:	499d      	ldr	r1, [pc, #628]	; (80068f4 <HAL_RCC_OscConfig+0x684>)
 8006680:	400a      	ands	r2, r1
 8006682:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2210      	movs	r2, #16
 800668a:	4013      	ands	r3, r2
 800668c:	d063      	beq.n	8006756 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d12a      	bne.n	80066ec <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006696:	4b95      	ldr	r3, [pc, #596]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 8006698:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800669a:	4b94      	ldr	r3, [pc, #592]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 800669c:	2104      	movs	r1, #4
 800669e:	430a      	orrs	r2, r1
 80066a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80066a2:	4b92      	ldr	r3, [pc, #584]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 80066a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066a6:	4b91      	ldr	r3, [pc, #580]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 80066a8:	2101      	movs	r1, #1
 80066aa:	430a      	orrs	r2, r1
 80066ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066ae:	f7fe fe83 	bl	80053b8 <HAL_GetTick>
 80066b2:	0003      	movs	r3, r0
 80066b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80066b6:	e008      	b.n	80066ca <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80066b8:	f7fe fe7e 	bl	80053b8 <HAL_GetTick>
 80066bc:	0002      	movs	r2, r0
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d901      	bls.n	80066ca <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e152      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80066ca:	4b88      	ldr	r3, [pc, #544]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 80066cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ce:	2202      	movs	r2, #2
 80066d0:	4013      	ands	r3, r2
 80066d2:	d0f1      	beq.n	80066b8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80066d4:	4b85      	ldr	r3, [pc, #532]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 80066d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d8:	22f8      	movs	r2, #248	; 0xf8
 80066da:	4393      	bics	r3, r2
 80066dc:	0019      	movs	r1, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	00da      	lsls	r2, r3, #3
 80066e4:	4b81      	ldr	r3, [pc, #516]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 80066e6:	430a      	orrs	r2, r1
 80066e8:	635a      	str	r2, [r3, #52]	; 0x34
 80066ea:	e034      	b.n	8006756 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	3305      	adds	r3, #5
 80066f2:	d111      	bne.n	8006718 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80066f4:	4b7d      	ldr	r3, [pc, #500]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 80066f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066f8:	4b7c      	ldr	r3, [pc, #496]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 80066fa:	2104      	movs	r1, #4
 80066fc:	438a      	bics	r2, r1
 80066fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006700:	4b7a      	ldr	r3, [pc, #488]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 8006702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006704:	22f8      	movs	r2, #248	; 0xf8
 8006706:	4393      	bics	r3, r2
 8006708:	0019      	movs	r1, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	00da      	lsls	r2, r3, #3
 8006710:	4b76      	ldr	r3, [pc, #472]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 8006712:	430a      	orrs	r2, r1
 8006714:	635a      	str	r2, [r3, #52]	; 0x34
 8006716:	e01e      	b.n	8006756 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006718:	4b74      	ldr	r3, [pc, #464]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 800671a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800671c:	4b73      	ldr	r3, [pc, #460]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 800671e:	2104      	movs	r1, #4
 8006720:	430a      	orrs	r2, r1
 8006722:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8006724:	4b71      	ldr	r3, [pc, #452]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 8006726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006728:	4b70      	ldr	r3, [pc, #448]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 800672a:	2101      	movs	r1, #1
 800672c:	438a      	bics	r2, r1
 800672e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006730:	f7fe fe42 	bl	80053b8 <HAL_GetTick>
 8006734:	0003      	movs	r3, r0
 8006736:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006738:	e008      	b.n	800674c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800673a:	f7fe fe3d 	bl	80053b8 <HAL_GetTick>
 800673e:	0002      	movs	r2, r0
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	2b02      	cmp	r3, #2
 8006746:	d901      	bls.n	800674c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e111      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800674c:	4b67      	ldr	r3, [pc, #412]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 800674e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006750:	2202      	movs	r2, #2
 8006752:	4013      	ands	r3, r2
 8006754:	d1f1      	bne.n	800673a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2220      	movs	r2, #32
 800675c:	4013      	ands	r3, r2
 800675e:	d05c      	beq.n	800681a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006760:	4b62      	ldr	r3, [pc, #392]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	220c      	movs	r2, #12
 8006766:	4013      	ands	r3, r2
 8006768:	2b0c      	cmp	r3, #12
 800676a:	d00e      	beq.n	800678a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800676c:	4b5f      	ldr	r3, [pc, #380]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	220c      	movs	r2, #12
 8006772:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006774:	2b08      	cmp	r3, #8
 8006776:	d114      	bne.n	80067a2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8006778:	4b5c      	ldr	r3, [pc, #368]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	23c0      	movs	r3, #192	; 0xc0
 800677e:	025b      	lsls	r3, r3, #9
 8006780:	401a      	ands	r2, r3
 8006782:	23c0      	movs	r3, #192	; 0xc0
 8006784:	025b      	lsls	r3, r3, #9
 8006786:	429a      	cmp	r2, r3
 8006788:	d10b      	bne.n	80067a2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800678a:	4b58      	ldr	r3, [pc, #352]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 800678c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800678e:	2380      	movs	r3, #128	; 0x80
 8006790:	025b      	lsls	r3, r3, #9
 8006792:	4013      	ands	r3, r2
 8006794:	d040      	beq.n	8006818 <HAL_RCC_OscConfig+0x5a8>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d03c      	beq.n	8006818 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e0e6      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d01b      	beq.n	80067e2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80067aa:	4b50      	ldr	r3, [pc, #320]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 80067ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067ae:	4b4f      	ldr	r3, [pc, #316]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 80067b0:	2180      	movs	r1, #128	; 0x80
 80067b2:	0249      	lsls	r1, r1, #9
 80067b4:	430a      	orrs	r2, r1
 80067b6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067b8:	f7fe fdfe 	bl	80053b8 <HAL_GetTick>
 80067bc:	0003      	movs	r3, r0
 80067be:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80067c0:	e008      	b.n	80067d4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067c2:	f7fe fdf9 	bl	80053b8 <HAL_GetTick>
 80067c6:	0002      	movs	r2, r0
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d901      	bls.n	80067d4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e0cd      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80067d4:	4b45      	ldr	r3, [pc, #276]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 80067d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067d8:	2380      	movs	r3, #128	; 0x80
 80067da:	025b      	lsls	r3, r3, #9
 80067dc:	4013      	ands	r3, r2
 80067de:	d0f0      	beq.n	80067c2 <HAL_RCC_OscConfig+0x552>
 80067e0:	e01b      	b.n	800681a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80067e2:	4b42      	ldr	r3, [pc, #264]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 80067e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067e6:	4b41      	ldr	r3, [pc, #260]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 80067e8:	4943      	ldr	r1, [pc, #268]	; (80068f8 <HAL_RCC_OscConfig+0x688>)
 80067ea:	400a      	ands	r2, r1
 80067ec:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ee:	f7fe fde3 	bl	80053b8 <HAL_GetTick>
 80067f2:	0003      	movs	r3, r0
 80067f4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80067f6:	e008      	b.n	800680a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067f8:	f7fe fdde 	bl	80053b8 <HAL_GetTick>
 80067fc:	0002      	movs	r2, r0
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	2b02      	cmp	r3, #2
 8006804:	d901      	bls.n	800680a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e0b2      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800680a:	4b38      	ldr	r3, [pc, #224]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 800680c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800680e:	2380      	movs	r3, #128	; 0x80
 8006810:	025b      	lsls	r3, r3, #9
 8006812:	4013      	ands	r3, r2
 8006814:	d1f0      	bne.n	80067f8 <HAL_RCC_OscConfig+0x588>
 8006816:	e000      	b.n	800681a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8006818:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681e:	2b00      	cmp	r3, #0
 8006820:	d100      	bne.n	8006824 <HAL_RCC_OscConfig+0x5b4>
 8006822:	e0a4      	b.n	800696e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006824:	4b31      	ldr	r3, [pc, #196]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	220c      	movs	r2, #12
 800682a:	4013      	ands	r3, r2
 800682c:	2b08      	cmp	r3, #8
 800682e:	d100      	bne.n	8006832 <HAL_RCC_OscConfig+0x5c2>
 8006830:	e078      	b.n	8006924 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006836:	2b02      	cmp	r3, #2
 8006838:	d14c      	bne.n	80068d4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800683a:	4b2c      	ldr	r3, [pc, #176]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	4b2b      	ldr	r3, [pc, #172]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 8006840:	492e      	ldr	r1, [pc, #184]	; (80068fc <HAL_RCC_OscConfig+0x68c>)
 8006842:	400a      	ands	r2, r1
 8006844:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006846:	f7fe fdb7 	bl	80053b8 <HAL_GetTick>
 800684a:	0003      	movs	r3, r0
 800684c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800684e:	e008      	b.n	8006862 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006850:	f7fe fdb2 	bl	80053b8 <HAL_GetTick>
 8006854:	0002      	movs	r2, r0
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	2b02      	cmp	r3, #2
 800685c:	d901      	bls.n	8006862 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e086      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006862:	4b22      	ldr	r3, [pc, #136]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	2380      	movs	r3, #128	; 0x80
 8006868:	049b      	lsls	r3, r3, #18
 800686a:	4013      	ands	r3, r2
 800686c:	d1f0      	bne.n	8006850 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800686e:	4b1f      	ldr	r3, [pc, #124]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 8006870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006872:	220f      	movs	r2, #15
 8006874:	4393      	bics	r3, r2
 8006876:	0019      	movs	r1, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800687c:	4b1b      	ldr	r3, [pc, #108]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 800687e:	430a      	orrs	r2, r1
 8006880:	62da      	str	r2, [r3, #44]	; 0x2c
 8006882:	4b1a      	ldr	r3, [pc, #104]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	4a1e      	ldr	r2, [pc, #120]	; (8006900 <HAL_RCC_OscConfig+0x690>)
 8006888:	4013      	ands	r3, r2
 800688a:	0019      	movs	r1, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006894:	431a      	orrs	r2, r3
 8006896:	4b15      	ldr	r3, [pc, #84]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 8006898:	430a      	orrs	r2, r1
 800689a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800689c:	4b13      	ldr	r3, [pc, #76]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	4b12      	ldr	r3, [pc, #72]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 80068a2:	2180      	movs	r1, #128	; 0x80
 80068a4:	0449      	lsls	r1, r1, #17
 80068a6:	430a      	orrs	r2, r1
 80068a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068aa:	f7fe fd85 	bl	80053b8 <HAL_GetTick>
 80068ae:	0003      	movs	r3, r0
 80068b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80068b2:	e008      	b.n	80068c6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068b4:	f7fe fd80 	bl	80053b8 <HAL_GetTick>
 80068b8:	0002      	movs	r2, r0
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d901      	bls.n	80068c6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e054      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80068c6:	4b09      	ldr	r3, [pc, #36]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	2380      	movs	r3, #128	; 0x80
 80068cc:	049b      	lsls	r3, r3, #18
 80068ce:	4013      	ands	r3, r2
 80068d0:	d0f0      	beq.n	80068b4 <HAL_RCC_OscConfig+0x644>
 80068d2:	e04c      	b.n	800696e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068d4:	4b05      	ldr	r3, [pc, #20]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	4b04      	ldr	r3, [pc, #16]	; (80068ec <HAL_RCC_OscConfig+0x67c>)
 80068da:	4908      	ldr	r1, [pc, #32]	; (80068fc <HAL_RCC_OscConfig+0x68c>)
 80068dc:	400a      	ands	r2, r1
 80068de:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068e0:	f7fe fd6a 	bl	80053b8 <HAL_GetTick>
 80068e4:	0003      	movs	r3, r0
 80068e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068e8:	e015      	b.n	8006916 <HAL_RCC_OscConfig+0x6a6>
 80068ea:	46c0      	nop			; (mov r8, r8)
 80068ec:	40021000 	.word	0x40021000
 80068f0:	00001388 	.word	0x00001388
 80068f4:	efffffff 	.word	0xefffffff
 80068f8:	fffeffff 	.word	0xfffeffff
 80068fc:	feffffff 	.word	0xfeffffff
 8006900:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006904:	f7fe fd58 	bl	80053b8 <HAL_GetTick>
 8006908:	0002      	movs	r2, r0
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	2b02      	cmp	r3, #2
 8006910:	d901      	bls.n	8006916 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e02c      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006916:	4b18      	ldr	r3, [pc, #96]	; (8006978 <HAL_RCC_OscConfig+0x708>)
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	2380      	movs	r3, #128	; 0x80
 800691c:	049b      	lsls	r3, r3, #18
 800691e:	4013      	ands	r3, r2
 8006920:	d1f0      	bne.n	8006904 <HAL_RCC_OscConfig+0x694>
 8006922:	e024      	b.n	800696e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006928:	2b01      	cmp	r3, #1
 800692a:	d101      	bne.n	8006930 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e01f      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006930:	4b11      	ldr	r3, [pc, #68]	; (8006978 <HAL_RCC_OscConfig+0x708>)
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006936:	4b10      	ldr	r3, [pc, #64]	; (8006978 <HAL_RCC_OscConfig+0x708>)
 8006938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	23c0      	movs	r3, #192	; 0xc0
 8006940:	025b      	lsls	r3, r3, #9
 8006942:	401a      	ands	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006948:	429a      	cmp	r2, r3
 800694a:	d10e      	bne.n	800696a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	220f      	movs	r2, #15
 8006950:	401a      	ands	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006956:	429a      	cmp	r2, r3
 8006958:	d107      	bne.n	800696a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	23f0      	movs	r3, #240	; 0xf0
 800695e:	039b      	lsls	r3, r3, #14
 8006960:	401a      	ands	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006966:	429a      	cmp	r2, r3
 8006968:	d001      	beq.n	800696e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e000      	b.n	8006970 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	0018      	movs	r0, r3
 8006972:	46bd      	mov	sp, r7
 8006974:	b008      	add	sp, #32
 8006976:	bd80      	pop	{r7, pc}
 8006978:	40021000 	.word	0x40021000

0800697c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d101      	bne.n	8006990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e0bf      	b.n	8006b10 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006990:	4b61      	ldr	r3, [pc, #388]	; (8006b18 <HAL_RCC_ClockConfig+0x19c>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2201      	movs	r2, #1
 8006996:	4013      	ands	r3, r2
 8006998:	683a      	ldr	r2, [r7, #0]
 800699a:	429a      	cmp	r2, r3
 800699c:	d911      	bls.n	80069c2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800699e:	4b5e      	ldr	r3, [pc, #376]	; (8006b18 <HAL_RCC_ClockConfig+0x19c>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2201      	movs	r2, #1
 80069a4:	4393      	bics	r3, r2
 80069a6:	0019      	movs	r1, r3
 80069a8:	4b5b      	ldr	r3, [pc, #364]	; (8006b18 <HAL_RCC_ClockConfig+0x19c>)
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	430a      	orrs	r2, r1
 80069ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069b0:	4b59      	ldr	r3, [pc, #356]	; (8006b18 <HAL_RCC_ClockConfig+0x19c>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2201      	movs	r2, #1
 80069b6:	4013      	ands	r3, r2
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d001      	beq.n	80069c2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e0a6      	b.n	8006b10 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2202      	movs	r2, #2
 80069c8:	4013      	ands	r3, r2
 80069ca:	d015      	beq.n	80069f8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2204      	movs	r2, #4
 80069d2:	4013      	ands	r3, r2
 80069d4:	d006      	beq.n	80069e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80069d6:	4b51      	ldr	r3, [pc, #324]	; (8006b1c <HAL_RCC_ClockConfig+0x1a0>)
 80069d8:	685a      	ldr	r2, [r3, #4]
 80069da:	4b50      	ldr	r3, [pc, #320]	; (8006b1c <HAL_RCC_ClockConfig+0x1a0>)
 80069dc:	21e0      	movs	r1, #224	; 0xe0
 80069de:	00c9      	lsls	r1, r1, #3
 80069e0:	430a      	orrs	r2, r1
 80069e2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069e4:	4b4d      	ldr	r3, [pc, #308]	; (8006b1c <HAL_RCC_ClockConfig+0x1a0>)
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	22f0      	movs	r2, #240	; 0xf0
 80069ea:	4393      	bics	r3, r2
 80069ec:	0019      	movs	r1, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	689a      	ldr	r2, [r3, #8]
 80069f2:	4b4a      	ldr	r3, [pc, #296]	; (8006b1c <HAL_RCC_ClockConfig+0x1a0>)
 80069f4:	430a      	orrs	r2, r1
 80069f6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2201      	movs	r2, #1
 80069fe:	4013      	ands	r3, r2
 8006a00:	d04c      	beq.n	8006a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d107      	bne.n	8006a1a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a0a:	4b44      	ldr	r3, [pc, #272]	; (8006b1c <HAL_RCC_ClockConfig+0x1a0>)
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	2380      	movs	r3, #128	; 0x80
 8006a10:	029b      	lsls	r3, r3, #10
 8006a12:	4013      	ands	r3, r2
 8006a14:	d120      	bne.n	8006a58 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e07a      	b.n	8006b10 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d107      	bne.n	8006a32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a22:	4b3e      	ldr	r3, [pc, #248]	; (8006b1c <HAL_RCC_ClockConfig+0x1a0>)
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	2380      	movs	r3, #128	; 0x80
 8006a28:	049b      	lsls	r3, r3, #18
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	d114      	bne.n	8006a58 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e06e      	b.n	8006b10 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	2b03      	cmp	r3, #3
 8006a38:	d107      	bne.n	8006a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006a3a:	4b38      	ldr	r3, [pc, #224]	; (8006b1c <HAL_RCC_ClockConfig+0x1a0>)
 8006a3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a3e:	2380      	movs	r3, #128	; 0x80
 8006a40:	025b      	lsls	r3, r3, #9
 8006a42:	4013      	ands	r3, r2
 8006a44:	d108      	bne.n	8006a58 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e062      	b.n	8006b10 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a4a:	4b34      	ldr	r3, [pc, #208]	; (8006b1c <HAL_RCC_ClockConfig+0x1a0>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2202      	movs	r2, #2
 8006a50:	4013      	ands	r3, r2
 8006a52:	d101      	bne.n	8006a58 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e05b      	b.n	8006b10 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a58:	4b30      	ldr	r3, [pc, #192]	; (8006b1c <HAL_RCC_ClockConfig+0x1a0>)
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	2203      	movs	r2, #3
 8006a5e:	4393      	bics	r3, r2
 8006a60:	0019      	movs	r1, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685a      	ldr	r2, [r3, #4]
 8006a66:	4b2d      	ldr	r3, [pc, #180]	; (8006b1c <HAL_RCC_ClockConfig+0x1a0>)
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a6c:	f7fe fca4 	bl	80053b8 <HAL_GetTick>
 8006a70:	0003      	movs	r3, r0
 8006a72:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a74:	e009      	b.n	8006a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a76:	f7fe fc9f 	bl	80053b8 <HAL_GetTick>
 8006a7a:	0002      	movs	r2, r0
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	4a27      	ldr	r2, [pc, #156]	; (8006b20 <HAL_RCC_ClockConfig+0x1a4>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d901      	bls.n	8006a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e042      	b.n	8006b10 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a8a:	4b24      	ldr	r3, [pc, #144]	; (8006b1c <HAL_RCC_ClockConfig+0x1a0>)
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	220c      	movs	r2, #12
 8006a90:	401a      	ands	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d1ec      	bne.n	8006a76 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a9c:	4b1e      	ldr	r3, [pc, #120]	; (8006b18 <HAL_RCC_ClockConfig+0x19c>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d211      	bcs.n	8006ace <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aaa:	4b1b      	ldr	r3, [pc, #108]	; (8006b18 <HAL_RCC_ClockConfig+0x19c>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	4393      	bics	r3, r2
 8006ab2:	0019      	movs	r1, r3
 8006ab4:	4b18      	ldr	r3, [pc, #96]	; (8006b18 <HAL_RCC_ClockConfig+0x19c>)
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006abc:	4b16      	ldr	r3, [pc, #88]	; (8006b18 <HAL_RCC_ClockConfig+0x19c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	683a      	ldr	r2, [r7, #0]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d001      	beq.n	8006ace <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e020      	b.n	8006b10 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2204      	movs	r2, #4
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	d009      	beq.n	8006aec <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006ad8:	4b10      	ldr	r3, [pc, #64]	; (8006b1c <HAL_RCC_ClockConfig+0x1a0>)
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	4a11      	ldr	r2, [pc, #68]	; (8006b24 <HAL_RCC_ClockConfig+0x1a8>)
 8006ade:	4013      	ands	r3, r2
 8006ae0:	0019      	movs	r1, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68da      	ldr	r2, [r3, #12]
 8006ae6:	4b0d      	ldr	r3, [pc, #52]	; (8006b1c <HAL_RCC_ClockConfig+0x1a0>)
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006aec:	f000 f820 	bl	8006b30 <HAL_RCC_GetSysClockFreq>
 8006af0:	0001      	movs	r1, r0
 8006af2:	4b0a      	ldr	r3, [pc, #40]	; (8006b1c <HAL_RCC_ClockConfig+0x1a0>)
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	091b      	lsrs	r3, r3, #4
 8006af8:	220f      	movs	r2, #15
 8006afa:	4013      	ands	r3, r2
 8006afc:	4a0a      	ldr	r2, [pc, #40]	; (8006b28 <HAL_RCC_ClockConfig+0x1ac>)
 8006afe:	5cd3      	ldrb	r3, [r2, r3]
 8006b00:	000a      	movs	r2, r1
 8006b02:	40da      	lsrs	r2, r3
 8006b04:	4b09      	ldr	r3, [pc, #36]	; (8006b2c <HAL_RCC_ClockConfig+0x1b0>)
 8006b06:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006b08:	2000      	movs	r0, #0
 8006b0a:	f7fe fc0f 	bl	800532c <HAL_InitTick>
  
  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	0018      	movs	r0, r3
 8006b12:	46bd      	mov	sp, r7
 8006b14:	b004      	add	sp, #16
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	40022000 	.word	0x40022000
 8006b1c:	40021000 	.word	0x40021000
 8006b20:	00001388 	.word	0x00001388
 8006b24:	fffff8ff 	.word	0xfffff8ff
 8006b28:	0800ada0 	.word	0x0800ada0
 8006b2c:	20002820 	.word	0x20002820

08006b30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b30:	b590      	push	{r4, r7, lr}
 8006b32:	b08f      	sub	sp, #60	; 0x3c
 8006b34:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8006b36:	2314      	movs	r3, #20
 8006b38:	18fb      	adds	r3, r7, r3
 8006b3a:	4a38      	ldr	r2, [pc, #224]	; (8006c1c <HAL_RCC_GetSysClockFreq+0xec>)
 8006b3c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006b3e:	c313      	stmia	r3!, {r0, r1, r4}
 8006b40:	6812      	ldr	r2, [r2, #0]
 8006b42:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8006b44:	1d3b      	adds	r3, r7, #4
 8006b46:	4a36      	ldr	r2, [pc, #216]	; (8006c20 <HAL_RCC_GetSysClockFreq+0xf0>)
 8006b48:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006b4a:	c313      	stmia	r3!, {r0, r1, r4}
 8006b4c:	6812      	ldr	r2, [r2, #0]
 8006b4e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006b50:	2300      	movs	r3, #0
 8006b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b54:	2300      	movs	r3, #0
 8006b56:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b58:	2300      	movs	r3, #0
 8006b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8006b60:	2300      	movs	r3, #0
 8006b62:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8006b64:	4b2f      	ldr	r3, [pc, #188]	; (8006c24 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6c:	220c      	movs	r2, #12
 8006b6e:	4013      	ands	r3, r2
 8006b70:	2b0c      	cmp	r3, #12
 8006b72:	d047      	beq.n	8006c04 <HAL_RCC_GetSysClockFreq+0xd4>
 8006b74:	d849      	bhi.n	8006c0a <HAL_RCC_GetSysClockFreq+0xda>
 8006b76:	2b04      	cmp	r3, #4
 8006b78:	d002      	beq.n	8006b80 <HAL_RCC_GetSysClockFreq+0x50>
 8006b7a:	2b08      	cmp	r3, #8
 8006b7c:	d003      	beq.n	8006b86 <HAL_RCC_GetSysClockFreq+0x56>
 8006b7e:	e044      	b.n	8006c0a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006b80:	4b29      	ldr	r3, [pc, #164]	; (8006c28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b82:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006b84:	e044      	b.n	8006c10 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b88:	0c9b      	lsrs	r3, r3, #18
 8006b8a:	220f      	movs	r2, #15
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	2214      	movs	r2, #20
 8006b90:	18ba      	adds	r2, r7, r2
 8006b92:	5cd3      	ldrb	r3, [r2, r3]
 8006b94:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006b96:	4b23      	ldr	r3, [pc, #140]	; (8006c24 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9a:	220f      	movs	r2, #15
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	1d3a      	adds	r2, r7, #4
 8006ba0:	5cd3      	ldrb	r3, [r2, r3]
 8006ba2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ba6:	23c0      	movs	r3, #192	; 0xc0
 8006ba8:	025b      	lsls	r3, r3, #9
 8006baa:	401a      	ands	r2, r3
 8006bac:	2380      	movs	r3, #128	; 0x80
 8006bae:	025b      	lsls	r3, r3, #9
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d109      	bne.n	8006bc8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006bb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bb6:	481c      	ldr	r0, [pc, #112]	; (8006c28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006bb8:	f7f9 fac0 	bl	800013c <__udivsi3>
 8006bbc:	0003      	movs	r3, r0
 8006bbe:	001a      	movs	r2, r3
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc2:	4353      	muls	r3, r2
 8006bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8006bc6:	e01a      	b.n	8006bfe <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8006bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bca:	23c0      	movs	r3, #192	; 0xc0
 8006bcc:	025b      	lsls	r3, r3, #9
 8006bce:	401a      	ands	r2, r3
 8006bd0:	23c0      	movs	r3, #192	; 0xc0
 8006bd2:	025b      	lsls	r3, r3, #9
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d109      	bne.n	8006bec <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006bd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bda:	4814      	ldr	r0, [pc, #80]	; (8006c2c <HAL_RCC_GetSysClockFreq+0xfc>)
 8006bdc:	f7f9 faae 	bl	800013c <__udivsi3>
 8006be0:	0003      	movs	r3, r0
 8006be2:	001a      	movs	r2, r3
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	4353      	muls	r3, r2
 8006be8:	637b      	str	r3, [r7, #52]	; 0x34
 8006bea:	e008      	b.n	8006bfe <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006bec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bee:	480e      	ldr	r0, [pc, #56]	; (8006c28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006bf0:	f7f9 faa4 	bl	800013c <__udivsi3>
 8006bf4:	0003      	movs	r3, r0
 8006bf6:	001a      	movs	r2, r3
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	4353      	muls	r3, r2
 8006bfc:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8006bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c00:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006c02:	e005      	b.n	8006c10 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8006c04:	4b09      	ldr	r3, [pc, #36]	; (8006c2c <HAL_RCC_GetSysClockFreq+0xfc>)
 8006c06:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006c08:	e002      	b.n	8006c10 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006c0a:	4b07      	ldr	r3, [pc, #28]	; (8006c28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006c0c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006c0e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006c12:	0018      	movs	r0, r3
 8006c14:	46bd      	mov	sp, r7
 8006c16:	b00f      	add	sp, #60	; 0x3c
 8006c18:	bd90      	pop	{r4, r7, pc}
 8006c1a:	46c0      	nop			; (mov r8, r8)
 8006c1c:	0800a708 	.word	0x0800a708
 8006c20:	0800a718 	.word	0x0800a718
 8006c24:	40021000 	.word	0x40021000
 8006c28:	007a1200 	.word	0x007a1200
 8006c2c:	02dc6c00 	.word	0x02dc6c00

08006c30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e0a8      	b.n	8006d94 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d109      	bne.n	8006c5e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	2382      	movs	r3, #130	; 0x82
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d009      	beq.n	8006c6a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	61da      	str	r2, [r3, #28]
 8006c5c:	e005      	b.n	8006c6a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	225d      	movs	r2, #93	; 0x5d
 8006c74:	5c9b      	ldrb	r3, [r3, r2]
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d107      	bne.n	8006c8c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	225c      	movs	r2, #92	; 0x5c
 8006c80:	2100      	movs	r1, #0
 8006c82:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	0018      	movs	r0, r3
 8006c88:	f7fe f9cc 	bl	8005024 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	225d      	movs	r2, #93	; 0x5d
 8006c90:	2102      	movs	r1, #2
 8006c92:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2140      	movs	r1, #64	; 0x40
 8006ca0:	438a      	bics	r2, r1
 8006ca2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	68da      	ldr	r2, [r3, #12]
 8006ca8:	23e0      	movs	r3, #224	; 0xe0
 8006caa:	00db      	lsls	r3, r3, #3
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d902      	bls.n	8006cb6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	60fb      	str	r3, [r7, #12]
 8006cb4:	e002      	b.n	8006cbc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006cb6:	2380      	movs	r3, #128	; 0x80
 8006cb8:	015b      	lsls	r3, r3, #5
 8006cba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	68da      	ldr	r2, [r3, #12]
 8006cc0:	23f0      	movs	r3, #240	; 0xf0
 8006cc2:	011b      	lsls	r3, r3, #4
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d008      	beq.n	8006cda <HAL_SPI_Init+0xaa>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68da      	ldr	r2, [r3, #12]
 8006ccc:	23e0      	movs	r3, #224	; 0xe0
 8006cce:	00db      	lsls	r3, r3, #3
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d002      	beq.n	8006cda <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685a      	ldr	r2, [r3, #4]
 8006cde:	2382      	movs	r3, #130	; 0x82
 8006ce0:	005b      	lsls	r3, r3, #1
 8006ce2:	401a      	ands	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6899      	ldr	r1, [r3, #8]
 8006ce8:	2384      	movs	r3, #132	; 0x84
 8006cea:	021b      	lsls	r3, r3, #8
 8006cec:	400b      	ands	r3, r1
 8006cee:	431a      	orrs	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	2102      	movs	r1, #2
 8006cf6:	400b      	ands	r3, r1
 8006cf8:	431a      	orrs	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	2101      	movs	r1, #1
 8006d00:	400b      	ands	r3, r1
 8006d02:	431a      	orrs	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6999      	ldr	r1, [r3, #24]
 8006d08:	2380      	movs	r3, #128	; 0x80
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	400b      	ands	r3, r1
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	69db      	ldr	r3, [r3, #28]
 8006d14:	2138      	movs	r1, #56	; 0x38
 8006d16:	400b      	ands	r3, r1
 8006d18:	431a      	orrs	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	2180      	movs	r1, #128	; 0x80
 8006d20:	400b      	ands	r3, r1
 8006d22:	431a      	orrs	r2, r3
 8006d24:	0011      	movs	r1, r2
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d2a:	2380      	movs	r3, #128	; 0x80
 8006d2c:	019b      	lsls	r3, r3, #6
 8006d2e:	401a      	ands	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	430a      	orrs	r2, r1
 8006d36:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	0c1b      	lsrs	r3, r3, #16
 8006d3e:	2204      	movs	r2, #4
 8006d40:	401a      	ands	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d46:	2110      	movs	r1, #16
 8006d48:	400b      	ands	r3, r1
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d50:	2108      	movs	r1, #8
 8006d52:	400b      	ands	r3, r1
 8006d54:	431a      	orrs	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68d9      	ldr	r1, [r3, #12]
 8006d5a:	23f0      	movs	r3, #240	; 0xf0
 8006d5c:	011b      	lsls	r3, r3, #4
 8006d5e:	400b      	ands	r3, r1
 8006d60:	431a      	orrs	r2, r3
 8006d62:	0011      	movs	r1, r2
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	2380      	movs	r3, #128	; 0x80
 8006d68:	015b      	lsls	r3, r3, #5
 8006d6a:	401a      	ands	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	430a      	orrs	r2, r1
 8006d72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	69da      	ldr	r2, [r3, #28]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4907      	ldr	r1, [pc, #28]	; (8006d9c <HAL_SPI_Init+0x16c>)
 8006d80:	400a      	ands	r2, r1
 8006d82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	225d      	movs	r2, #93	; 0x5d
 8006d8e:	2101      	movs	r1, #1
 8006d90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	0018      	movs	r0, r3
 8006d96:	46bd      	mov	sp, r7
 8006d98:	b004      	add	sp, #16
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	fffff7ff 	.word	0xfffff7ff

08006da0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b088      	sub	sp, #32
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	603b      	str	r3, [r7, #0]
 8006dac:	1dbb      	adds	r3, r7, #6
 8006dae:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006db0:	231f      	movs	r3, #31
 8006db2:	18fb      	adds	r3, r7, r3
 8006db4:	2200      	movs	r2, #0
 8006db6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	225c      	movs	r2, #92	; 0x5c
 8006dbc:	5c9b      	ldrb	r3, [r3, r2]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d101      	bne.n	8006dc6 <HAL_SPI_Transmit+0x26>
 8006dc2:	2302      	movs	r3, #2
 8006dc4:	e140      	b.n	8007048 <HAL_SPI_Transmit+0x2a8>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	225c      	movs	r2, #92	; 0x5c
 8006dca:	2101      	movs	r1, #1
 8006dcc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006dce:	f7fe faf3 	bl	80053b8 <HAL_GetTick>
 8006dd2:	0003      	movs	r3, r0
 8006dd4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006dd6:	2316      	movs	r3, #22
 8006dd8:	18fb      	adds	r3, r7, r3
 8006dda:	1dba      	adds	r2, r7, #6
 8006ddc:	8812      	ldrh	r2, [r2, #0]
 8006dde:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	225d      	movs	r2, #93	; 0x5d
 8006de4:	5c9b      	ldrb	r3, [r3, r2]
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d004      	beq.n	8006df6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006dec:	231f      	movs	r3, #31
 8006dee:	18fb      	adds	r3, r7, r3
 8006df0:	2202      	movs	r2, #2
 8006df2:	701a      	strb	r2, [r3, #0]
    goto error;
 8006df4:	e11d      	b.n	8007032 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d003      	beq.n	8006e04 <HAL_SPI_Transmit+0x64>
 8006dfc:	1dbb      	adds	r3, r7, #6
 8006dfe:	881b      	ldrh	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d104      	bne.n	8006e0e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006e04:	231f      	movs	r3, #31
 8006e06:	18fb      	adds	r3, r7, r3
 8006e08:	2201      	movs	r2, #1
 8006e0a:	701a      	strb	r2, [r3, #0]
    goto error;
 8006e0c:	e111      	b.n	8007032 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	225d      	movs	r2, #93	; 0x5d
 8006e12:	2103      	movs	r1, #3
 8006e14:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	1dba      	adds	r2, r7, #6
 8006e26:	8812      	ldrh	r2, [r2, #0]
 8006e28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	1dba      	adds	r2, r7, #6
 8006e2e:	8812      	ldrh	r2, [r2, #0]
 8006e30:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2244      	movs	r2, #68	; 0x44
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2246      	movs	r2, #70	; 0x46
 8006e44:	2100      	movs	r1, #0
 8006e46:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	689a      	ldr	r2, [r3, #8]
 8006e58:	2380      	movs	r3, #128	; 0x80
 8006e5a:	021b      	lsls	r3, r3, #8
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d110      	bne.n	8006e82 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2140      	movs	r1, #64	; 0x40
 8006e6c:	438a      	bics	r2, r1
 8006e6e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2180      	movs	r1, #128	; 0x80
 8006e7c:	01c9      	lsls	r1, r1, #7
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2240      	movs	r2, #64	; 0x40
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	2b40      	cmp	r3, #64	; 0x40
 8006e8e:	d007      	beq.n	8006ea0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2140      	movs	r1, #64	; 0x40
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	68da      	ldr	r2, [r3, #12]
 8006ea4:	23e0      	movs	r3, #224	; 0xe0
 8006ea6:	00db      	lsls	r3, r3, #3
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d94e      	bls.n	8006f4a <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d004      	beq.n	8006ebe <HAL_SPI_Transmit+0x11e>
 8006eb4:	2316      	movs	r3, #22
 8006eb6:	18fb      	adds	r3, r7, r3
 8006eb8:	881b      	ldrh	r3, [r3, #0]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d13f      	bne.n	8006f3e <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec2:	881a      	ldrh	r2, [r3, #0]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ece:	1c9a      	adds	r2, r3, #2
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	3b01      	subs	r3, #1
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006ee2:	e02c      	b.n	8006f3e <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	2202      	movs	r2, #2
 8006eec:	4013      	ands	r3, r2
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d112      	bne.n	8006f18 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef6:	881a      	ldrh	r2, [r3, #0]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f02:	1c9a      	adds	r2, r3, #2
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f16:	e012      	b.n	8006f3e <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f18:	f7fe fa4e 	bl	80053b8 <HAL_GetTick>
 8006f1c:	0002      	movs	r2, r0
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	683a      	ldr	r2, [r7, #0]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d802      	bhi.n	8006f2e <HAL_SPI_Transmit+0x18e>
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	d102      	bne.n	8006f34 <HAL_SPI_Transmit+0x194>
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d104      	bne.n	8006f3e <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8006f34:	231f      	movs	r3, #31
 8006f36:	18fb      	adds	r3, r7, r3
 8006f38:	2203      	movs	r2, #3
 8006f3a:	701a      	strb	r2, [r3, #0]
          goto error;
 8006f3c:	e079      	b.n	8007032 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1cd      	bne.n	8006ee4 <HAL_SPI_Transmit+0x144>
 8006f48:	e04f      	b.n	8006fea <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d004      	beq.n	8006f5c <HAL_SPI_Transmit+0x1bc>
 8006f52:	2316      	movs	r3, #22
 8006f54:	18fb      	adds	r3, r7, r3
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d141      	bne.n	8006fe0 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	330c      	adds	r3, #12
 8006f66:	7812      	ldrb	r2, [r2, #0]
 8006f68:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6e:	1c5a      	adds	r2, r3, #1
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006f82:	e02d      	b.n	8006fe0 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d113      	bne.n	8006fba <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	330c      	adds	r3, #12
 8006f9c:	7812      	ldrb	r2, [r2, #0]
 8006f9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa4:	1c5a      	adds	r2, r3, #1
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006fb8:	e012      	b.n	8006fe0 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fba:	f7fe f9fd 	bl	80053b8 <HAL_GetTick>
 8006fbe:	0002      	movs	r2, r0
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d802      	bhi.n	8006fd0 <HAL_SPI_Transmit+0x230>
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	d102      	bne.n	8006fd6 <HAL_SPI_Transmit+0x236>
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d104      	bne.n	8006fe0 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8006fd6:	231f      	movs	r3, #31
 8006fd8:	18fb      	adds	r3, r7, r3
 8006fda:	2203      	movs	r2, #3
 8006fdc:	701a      	strb	r2, [r3, #0]
          goto error;
 8006fde:	e028      	b.n	8007032 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1cc      	bne.n	8006f84 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fea:	69ba      	ldr	r2, [r7, #24]
 8006fec:	6839      	ldr	r1, [r7, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	0018      	movs	r0, r3
 8006ff2:	f000 f95d 	bl	80072b0 <SPI_EndRxTxTransaction>
 8006ff6:	1e03      	subs	r3, r0, #0
 8006ff8:	d002      	beq.n	8007000 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2220      	movs	r2, #32
 8006ffe:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10a      	bne.n	800701e <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007008:	2300      	movs	r3, #0
 800700a:	613b      	str	r3, [r7, #16]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	613b      	str	r3, [r7, #16]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	613b      	str	r3, [r7, #16]
 800701c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007022:	2b00      	cmp	r3, #0
 8007024:	d004      	beq.n	8007030 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8007026:	231f      	movs	r3, #31
 8007028:	18fb      	adds	r3, r7, r3
 800702a:	2201      	movs	r2, #1
 800702c:	701a      	strb	r2, [r3, #0]
 800702e:	e000      	b.n	8007032 <HAL_SPI_Transmit+0x292>
  }

error:
 8007030:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	225d      	movs	r2, #93	; 0x5d
 8007036:	2101      	movs	r1, #1
 8007038:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	225c      	movs	r2, #92	; 0x5c
 800703e:	2100      	movs	r1, #0
 8007040:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007042:	231f      	movs	r3, #31
 8007044:	18fb      	adds	r3, r7, r3
 8007046:	781b      	ldrb	r3, [r3, #0]
}
 8007048:	0018      	movs	r0, r3
 800704a:	46bd      	mov	sp, r7
 800704c:	b008      	add	sp, #32
 800704e:	bd80      	pop	{r7, pc}

08007050 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b088      	sub	sp, #32
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	603b      	str	r3, [r7, #0]
 800705c:	1dfb      	adds	r3, r7, #7
 800705e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007060:	f7fe f9aa 	bl	80053b8 <HAL_GetTick>
 8007064:	0002      	movs	r2, r0
 8007066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007068:	1a9b      	subs	r3, r3, r2
 800706a:	683a      	ldr	r2, [r7, #0]
 800706c:	18d3      	adds	r3, r2, r3
 800706e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007070:	f7fe f9a2 	bl	80053b8 <HAL_GetTick>
 8007074:	0003      	movs	r3, r0
 8007076:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007078:	4b3a      	ldr	r3, [pc, #232]	; (8007164 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	015b      	lsls	r3, r3, #5
 800707e:	0d1b      	lsrs	r3, r3, #20
 8007080:	69fa      	ldr	r2, [r7, #28]
 8007082:	4353      	muls	r3, r2
 8007084:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007086:	e058      	b.n	800713a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	3301      	adds	r3, #1
 800708c:	d055      	beq.n	800713a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800708e:	f7fe f993 	bl	80053b8 <HAL_GetTick>
 8007092:	0002      	movs	r2, r0
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	1ad3      	subs	r3, r2, r3
 8007098:	69fa      	ldr	r2, [r7, #28]
 800709a:	429a      	cmp	r2, r3
 800709c:	d902      	bls.n	80070a4 <SPI_WaitFlagStateUntilTimeout+0x54>
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d142      	bne.n	800712a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685a      	ldr	r2, [r3, #4]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	21e0      	movs	r1, #224	; 0xe0
 80070b0:	438a      	bics	r2, r1
 80070b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	685a      	ldr	r2, [r3, #4]
 80070b8:	2382      	movs	r3, #130	; 0x82
 80070ba:	005b      	lsls	r3, r3, #1
 80070bc:	429a      	cmp	r2, r3
 80070be:	d113      	bne.n	80070e8 <SPI_WaitFlagStateUntilTimeout+0x98>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	689a      	ldr	r2, [r3, #8]
 80070c4:	2380      	movs	r3, #128	; 0x80
 80070c6:	021b      	lsls	r3, r3, #8
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d005      	beq.n	80070d8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	689a      	ldr	r2, [r3, #8]
 80070d0:	2380      	movs	r3, #128	; 0x80
 80070d2:	00db      	lsls	r3, r3, #3
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d107      	bne.n	80070e8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2140      	movs	r1, #64	; 0x40
 80070e4:	438a      	bics	r2, r1
 80070e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070ec:	2380      	movs	r3, #128	; 0x80
 80070ee:	019b      	lsls	r3, r3, #6
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d110      	bne.n	8007116 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	491a      	ldr	r1, [pc, #104]	; (8007168 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007100:	400a      	ands	r2, r1
 8007102:	601a      	str	r2, [r3, #0]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2180      	movs	r1, #128	; 0x80
 8007110:	0189      	lsls	r1, r1, #6
 8007112:	430a      	orrs	r2, r1
 8007114:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	225d      	movs	r2, #93	; 0x5d
 800711a:	2101      	movs	r1, #1
 800711c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	225c      	movs	r2, #92	; 0x5c
 8007122:	2100      	movs	r1, #0
 8007124:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e017      	b.n	800715a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007130:	2300      	movs	r3, #0
 8007132:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	3b01      	subs	r3, #1
 8007138:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	4013      	ands	r3, r2
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	425a      	negs	r2, r3
 800714a:	4153      	adcs	r3, r2
 800714c:	b2db      	uxtb	r3, r3
 800714e:	001a      	movs	r2, r3
 8007150:	1dfb      	adds	r3, r7, #7
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	429a      	cmp	r2, r3
 8007156:	d197      	bne.n	8007088 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	0018      	movs	r0, r3
 800715c:	46bd      	mov	sp, r7
 800715e:	b008      	add	sp, #32
 8007160:	bd80      	pop	{r7, pc}
 8007162:	46c0      	nop			; (mov r8, r8)
 8007164:	20002820 	.word	0x20002820
 8007168:	ffffdfff 	.word	0xffffdfff

0800716c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b08a      	sub	sp, #40	; 0x28
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
 8007178:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800717a:	2317      	movs	r3, #23
 800717c:	18fb      	adds	r3, r7, r3
 800717e:	2200      	movs	r2, #0
 8007180:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007182:	f7fe f919 	bl	80053b8 <HAL_GetTick>
 8007186:	0002      	movs	r2, r0
 8007188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718a:	1a9b      	subs	r3, r3, r2
 800718c:	683a      	ldr	r2, [r7, #0]
 800718e:	18d3      	adds	r3, r2, r3
 8007190:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007192:	f7fe f911 	bl	80053b8 <HAL_GetTick>
 8007196:	0003      	movs	r3, r0
 8007198:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	330c      	adds	r3, #12
 80071a0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80071a2:	4b41      	ldr	r3, [pc, #260]	; (80072a8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	0013      	movs	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	189b      	adds	r3, r3, r2
 80071ac:	00da      	lsls	r2, r3, #3
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	0d1b      	lsrs	r3, r3, #20
 80071b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071b4:	4353      	muls	r3, r2
 80071b6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80071b8:	e068      	b.n	800728c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	23c0      	movs	r3, #192	; 0xc0
 80071be:	00db      	lsls	r3, r3, #3
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d10a      	bne.n	80071da <SPI_WaitFifoStateUntilTimeout+0x6e>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d107      	bne.n	80071da <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	b2da      	uxtb	r2, r3
 80071d0:	2117      	movs	r1, #23
 80071d2:	187b      	adds	r3, r7, r1
 80071d4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80071d6:	187b      	adds	r3, r7, r1
 80071d8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	3301      	adds	r3, #1
 80071de:	d055      	beq.n	800728c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071e0:	f7fe f8ea 	bl	80053b8 <HAL_GetTick>
 80071e4:	0002      	movs	r2, r0
 80071e6:	6a3b      	ldr	r3, [r7, #32]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d902      	bls.n	80071f6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80071f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d142      	bne.n	800727c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	21e0      	movs	r1, #224	; 0xe0
 8007202:	438a      	bics	r2, r1
 8007204:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	685a      	ldr	r2, [r3, #4]
 800720a:	2382      	movs	r3, #130	; 0x82
 800720c:	005b      	lsls	r3, r3, #1
 800720e:	429a      	cmp	r2, r3
 8007210:	d113      	bne.n	800723a <SPI_WaitFifoStateUntilTimeout+0xce>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	689a      	ldr	r2, [r3, #8]
 8007216:	2380      	movs	r3, #128	; 0x80
 8007218:	021b      	lsls	r3, r3, #8
 800721a:	429a      	cmp	r2, r3
 800721c:	d005      	beq.n	800722a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	689a      	ldr	r2, [r3, #8]
 8007222:	2380      	movs	r3, #128	; 0x80
 8007224:	00db      	lsls	r3, r3, #3
 8007226:	429a      	cmp	r2, r3
 8007228:	d107      	bne.n	800723a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2140      	movs	r1, #64	; 0x40
 8007236:	438a      	bics	r2, r1
 8007238:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800723e:	2380      	movs	r3, #128	; 0x80
 8007240:	019b      	lsls	r3, r3, #6
 8007242:	429a      	cmp	r2, r3
 8007244:	d110      	bne.n	8007268 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4916      	ldr	r1, [pc, #88]	; (80072ac <SPI_WaitFifoStateUntilTimeout+0x140>)
 8007252:	400a      	ands	r2, r1
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2180      	movs	r1, #128	; 0x80
 8007262:	0189      	lsls	r1, r1, #6
 8007264:	430a      	orrs	r2, r1
 8007266:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	225d      	movs	r2, #93	; 0x5d
 800726c:	2101      	movs	r1, #1
 800726e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	225c      	movs	r2, #92	; 0x5c
 8007274:	2100      	movs	r1, #0
 8007276:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e010      	b.n	800729e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8007282:	2300      	movs	r3, #0
 8007284:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	3b01      	subs	r3, #1
 800728a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	68ba      	ldr	r2, [r7, #8]
 8007294:	4013      	ands	r3, r2
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	429a      	cmp	r2, r3
 800729a:	d18e      	bne.n	80071ba <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	0018      	movs	r0, r3
 80072a0:	46bd      	mov	sp, r7
 80072a2:	b00a      	add	sp, #40	; 0x28
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	46c0      	nop			; (mov r8, r8)
 80072a8:	20002820 	.word	0x20002820
 80072ac:	ffffdfff 	.word	0xffffdfff

080072b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af02      	add	r7, sp, #8
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	23c0      	movs	r3, #192	; 0xc0
 80072c0:	0159      	lsls	r1, r3, #5
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	9300      	str	r3, [sp, #0]
 80072c8:	0013      	movs	r3, r2
 80072ca:	2200      	movs	r2, #0
 80072cc:	f7ff ff4e 	bl	800716c <SPI_WaitFifoStateUntilTimeout>
 80072d0:	1e03      	subs	r3, r0, #0
 80072d2:	d007      	beq.n	80072e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072d8:	2220      	movs	r2, #32
 80072da:	431a      	orrs	r2, r3
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e027      	b.n	8007334 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	0013      	movs	r3, r2
 80072ee:	2200      	movs	r2, #0
 80072f0:	2180      	movs	r1, #128	; 0x80
 80072f2:	f7ff fead 	bl	8007050 <SPI_WaitFlagStateUntilTimeout>
 80072f6:	1e03      	subs	r3, r0, #0
 80072f8:	d007      	beq.n	800730a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072fe:	2220      	movs	r2, #32
 8007300:	431a      	orrs	r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e014      	b.n	8007334 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800730a:	68ba      	ldr	r2, [r7, #8]
 800730c:	23c0      	movs	r3, #192	; 0xc0
 800730e:	00d9      	lsls	r1, r3, #3
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	0013      	movs	r3, r2
 8007318:	2200      	movs	r2, #0
 800731a:	f7ff ff27 	bl	800716c <SPI_WaitFifoStateUntilTimeout>
 800731e:	1e03      	subs	r3, r0, #0
 8007320:	d007      	beq.n	8007332 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007326:	2220      	movs	r2, #32
 8007328:	431a      	orrs	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e000      	b.n	8007334 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	0018      	movs	r0, r3
 8007336:	46bd      	mov	sp, r7
 8007338:	b004      	add	sp, #16
 800733a:	bd80      	pop	{r7, pc}

0800733c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d101      	bne.n	800734e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e042      	b.n	80073d4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	223d      	movs	r2, #61	; 0x3d
 8007352:	5c9b      	ldrb	r3, [r3, r2]
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b00      	cmp	r3, #0
 8007358:	d107      	bne.n	800736a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	223c      	movs	r2, #60	; 0x3c
 800735e:	2100      	movs	r1, #0
 8007360:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	0018      	movs	r0, r3
 8007366:	f7fd fea9 	bl	80050bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	223d      	movs	r2, #61	; 0x3d
 800736e:	2102      	movs	r1, #2
 8007370:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	3304      	adds	r3, #4
 800737a:	0019      	movs	r1, r3
 800737c:	0010      	movs	r0, r2
 800737e:	f000 f877 	bl	8007470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2246      	movs	r2, #70	; 0x46
 8007386:	2101      	movs	r1, #1
 8007388:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	223e      	movs	r2, #62	; 0x3e
 800738e:	2101      	movs	r1, #1
 8007390:	5499      	strb	r1, [r3, r2]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	223f      	movs	r2, #63	; 0x3f
 8007396:	2101      	movs	r1, #1
 8007398:	5499      	strb	r1, [r3, r2]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2240      	movs	r2, #64	; 0x40
 800739e:	2101      	movs	r1, #1
 80073a0:	5499      	strb	r1, [r3, r2]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2241      	movs	r2, #65	; 0x41
 80073a6:	2101      	movs	r1, #1
 80073a8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2242      	movs	r2, #66	; 0x42
 80073ae:	2101      	movs	r1, #1
 80073b0:	5499      	strb	r1, [r3, r2]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2243      	movs	r2, #67	; 0x43
 80073b6:	2101      	movs	r1, #1
 80073b8:	5499      	strb	r1, [r3, r2]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2244      	movs	r2, #68	; 0x44
 80073be:	2101      	movs	r1, #1
 80073c0:	5499      	strb	r1, [r3, r2]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2245      	movs	r2, #69	; 0x45
 80073c6:	2101      	movs	r1, #1
 80073c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	223d      	movs	r2, #61	; 0x3d
 80073ce:	2101      	movs	r1, #1
 80073d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	0018      	movs	r0, r3
 80073d6:	46bd      	mov	sp, r7
 80073d8:	b002      	add	sp, #8
 80073da:	bd80      	pop	{r7, pc}

080073dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	223d      	movs	r2, #61	; 0x3d
 80073e8:	5c9b      	ldrb	r3, [r3, r2]
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d001      	beq.n	80073f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e033      	b.n	800745c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	223d      	movs	r2, #61	; 0x3d
 80073f8:	2102      	movs	r1, #2
 80073fa:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a18      	ldr	r2, [pc, #96]	; (8007464 <HAL_TIM_Base_Start+0x88>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d00f      	beq.n	8007426 <HAL_TIM_Base_Start+0x4a>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	2380      	movs	r3, #128	; 0x80
 800740c:	05db      	lsls	r3, r3, #23
 800740e:	429a      	cmp	r2, r3
 8007410:	d009      	beq.n	8007426 <HAL_TIM_Base_Start+0x4a>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a14      	ldr	r2, [pc, #80]	; (8007468 <HAL_TIM_Base_Start+0x8c>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d004      	beq.n	8007426 <HAL_TIM_Base_Start+0x4a>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a12      	ldr	r2, [pc, #72]	; (800746c <HAL_TIM_Base_Start+0x90>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d111      	bne.n	800744a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	2207      	movs	r2, #7
 800742e:	4013      	ands	r3, r2
 8007430:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2b06      	cmp	r3, #6
 8007436:	d010      	beq.n	800745a <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2101      	movs	r1, #1
 8007444:	430a      	orrs	r2, r1
 8007446:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007448:	e007      	b.n	800745a <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2101      	movs	r1, #1
 8007456:	430a      	orrs	r2, r1
 8007458:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	0018      	movs	r0, r3
 800745e:	46bd      	mov	sp, r7
 8007460:	b004      	add	sp, #16
 8007462:	bd80      	pop	{r7, pc}
 8007464:	40012c00 	.word	0x40012c00
 8007468:	40000400 	.word	0x40000400
 800746c:	40014000 	.word	0x40014000

08007470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a34      	ldr	r2, [pc, #208]	; (8007554 <TIM_Base_SetConfig+0xe4>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d008      	beq.n	800749a <TIM_Base_SetConfig+0x2a>
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	2380      	movs	r3, #128	; 0x80
 800748c:	05db      	lsls	r3, r3, #23
 800748e:	429a      	cmp	r2, r3
 8007490:	d003      	beq.n	800749a <TIM_Base_SetConfig+0x2a>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a30      	ldr	r2, [pc, #192]	; (8007558 <TIM_Base_SetConfig+0xe8>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d108      	bne.n	80074ac <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2270      	movs	r2, #112	; 0x70
 800749e:	4393      	bics	r3, r2
 80074a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a29      	ldr	r2, [pc, #164]	; (8007554 <TIM_Base_SetConfig+0xe4>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d018      	beq.n	80074e6 <TIM_Base_SetConfig+0x76>
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	2380      	movs	r3, #128	; 0x80
 80074b8:	05db      	lsls	r3, r3, #23
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d013      	beq.n	80074e6 <TIM_Base_SetConfig+0x76>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a25      	ldr	r2, [pc, #148]	; (8007558 <TIM_Base_SetConfig+0xe8>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d00f      	beq.n	80074e6 <TIM_Base_SetConfig+0x76>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a24      	ldr	r2, [pc, #144]	; (800755c <TIM_Base_SetConfig+0xec>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d00b      	beq.n	80074e6 <TIM_Base_SetConfig+0x76>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a23      	ldr	r2, [pc, #140]	; (8007560 <TIM_Base_SetConfig+0xf0>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d007      	beq.n	80074e6 <TIM_Base_SetConfig+0x76>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a22      	ldr	r2, [pc, #136]	; (8007564 <TIM_Base_SetConfig+0xf4>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d003      	beq.n	80074e6 <TIM_Base_SetConfig+0x76>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a21      	ldr	r2, [pc, #132]	; (8007568 <TIM_Base_SetConfig+0xf8>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d108      	bne.n	80074f8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	4a20      	ldr	r2, [pc, #128]	; (800756c <TIM_Base_SetConfig+0xfc>)
 80074ea:	4013      	ands	r3, r2
 80074ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2280      	movs	r2, #128	; 0x80
 80074fc:	4393      	bics	r3, r2
 80074fe:	001a      	movs	r2, r3
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	695b      	ldr	r3, [r3, #20]
 8007504:	4313      	orrs	r3, r2
 8007506:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	689a      	ldr	r2, [r3, #8]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a0c      	ldr	r2, [pc, #48]	; (8007554 <TIM_Base_SetConfig+0xe4>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d00b      	beq.n	800753e <TIM_Base_SetConfig+0xce>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a0d      	ldr	r2, [pc, #52]	; (8007560 <TIM_Base_SetConfig+0xf0>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d007      	beq.n	800753e <TIM_Base_SetConfig+0xce>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a0c      	ldr	r2, [pc, #48]	; (8007564 <TIM_Base_SetConfig+0xf4>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d003      	beq.n	800753e <TIM_Base_SetConfig+0xce>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a0b      	ldr	r2, [pc, #44]	; (8007568 <TIM_Base_SetConfig+0xf8>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d103      	bne.n	8007546 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	691a      	ldr	r2, [r3, #16]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	615a      	str	r2, [r3, #20]
}
 800754c:	46c0      	nop			; (mov r8, r8)
 800754e:	46bd      	mov	sp, r7
 8007550:	b004      	add	sp, #16
 8007552:	bd80      	pop	{r7, pc}
 8007554:	40012c00 	.word	0x40012c00
 8007558:	40000400 	.word	0x40000400
 800755c:	40002000 	.word	0x40002000
 8007560:	40014000 	.word	0x40014000
 8007564:	40014400 	.word	0x40014400
 8007568:	40014800 	.word	0x40014800
 800756c:	fffffcff 	.word	0xfffffcff

08007570 <__errno>:
 8007570:	4b01      	ldr	r3, [pc, #4]	; (8007578 <__errno+0x8>)
 8007572:	6818      	ldr	r0, [r3, #0]
 8007574:	4770      	bx	lr
 8007576:	46c0      	nop			; (mov r8, r8)
 8007578:	2000282c 	.word	0x2000282c

0800757c <__libc_init_array>:
 800757c:	b570      	push	{r4, r5, r6, lr}
 800757e:	2600      	movs	r6, #0
 8007580:	4d0c      	ldr	r5, [pc, #48]	; (80075b4 <__libc_init_array+0x38>)
 8007582:	4c0d      	ldr	r4, [pc, #52]	; (80075b8 <__libc_init_array+0x3c>)
 8007584:	1b64      	subs	r4, r4, r5
 8007586:	10a4      	asrs	r4, r4, #2
 8007588:	42a6      	cmp	r6, r4
 800758a:	d109      	bne.n	80075a0 <__libc_init_array+0x24>
 800758c:	2600      	movs	r6, #0
 800758e:	f003 f839 	bl	800a604 <_init>
 8007592:	4d0a      	ldr	r5, [pc, #40]	; (80075bc <__libc_init_array+0x40>)
 8007594:	4c0a      	ldr	r4, [pc, #40]	; (80075c0 <__libc_init_array+0x44>)
 8007596:	1b64      	subs	r4, r4, r5
 8007598:	10a4      	asrs	r4, r4, #2
 800759a:	42a6      	cmp	r6, r4
 800759c:	d105      	bne.n	80075aa <__libc_init_array+0x2e>
 800759e:	bd70      	pop	{r4, r5, r6, pc}
 80075a0:	00b3      	lsls	r3, r6, #2
 80075a2:	58eb      	ldr	r3, [r5, r3]
 80075a4:	4798      	blx	r3
 80075a6:	3601      	adds	r6, #1
 80075a8:	e7ee      	b.n	8007588 <__libc_init_array+0xc>
 80075aa:	00b3      	lsls	r3, r6, #2
 80075ac:	58eb      	ldr	r3, [r5, r3]
 80075ae:	4798      	blx	r3
 80075b0:	3601      	adds	r6, #1
 80075b2:	e7f2      	b.n	800759a <__libc_init_array+0x1e>
 80075b4:	0800b1ec 	.word	0x0800b1ec
 80075b8:	0800b1ec 	.word	0x0800b1ec
 80075bc:	0800b1ec 	.word	0x0800b1ec
 80075c0:	0800b1f0 	.word	0x0800b1f0

080075c4 <memset>:
 80075c4:	0003      	movs	r3, r0
 80075c6:	1882      	adds	r2, r0, r2
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d100      	bne.n	80075ce <memset+0xa>
 80075cc:	4770      	bx	lr
 80075ce:	7019      	strb	r1, [r3, #0]
 80075d0:	3301      	adds	r3, #1
 80075d2:	e7f9      	b.n	80075c8 <memset+0x4>

080075d4 <__cvt>:
 80075d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075d6:	001e      	movs	r6, r3
 80075d8:	2300      	movs	r3, #0
 80075da:	0014      	movs	r4, r2
 80075dc:	b08b      	sub	sp, #44	; 0x2c
 80075de:	429e      	cmp	r6, r3
 80075e0:	da04      	bge.n	80075ec <__cvt+0x18>
 80075e2:	2180      	movs	r1, #128	; 0x80
 80075e4:	0609      	lsls	r1, r1, #24
 80075e6:	1873      	adds	r3, r6, r1
 80075e8:	001e      	movs	r6, r3
 80075ea:	232d      	movs	r3, #45	; 0x2d
 80075ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075ee:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80075f0:	7013      	strb	r3, [r2, #0]
 80075f2:	2320      	movs	r3, #32
 80075f4:	2203      	movs	r2, #3
 80075f6:	439f      	bics	r7, r3
 80075f8:	2f46      	cmp	r7, #70	; 0x46
 80075fa:	d007      	beq.n	800760c <__cvt+0x38>
 80075fc:	003b      	movs	r3, r7
 80075fe:	3b45      	subs	r3, #69	; 0x45
 8007600:	4259      	negs	r1, r3
 8007602:	414b      	adcs	r3, r1
 8007604:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007606:	3a01      	subs	r2, #1
 8007608:	18cb      	adds	r3, r1, r3
 800760a:	9310      	str	r3, [sp, #64]	; 0x40
 800760c:	ab09      	add	r3, sp, #36	; 0x24
 800760e:	9304      	str	r3, [sp, #16]
 8007610:	ab08      	add	r3, sp, #32
 8007612:	9303      	str	r3, [sp, #12]
 8007614:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007616:	9200      	str	r2, [sp, #0]
 8007618:	9302      	str	r3, [sp, #8]
 800761a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800761c:	0022      	movs	r2, r4
 800761e:	9301      	str	r3, [sp, #4]
 8007620:	0033      	movs	r3, r6
 8007622:	f000 fd8b 	bl	800813c <_dtoa_r>
 8007626:	0005      	movs	r5, r0
 8007628:	2f47      	cmp	r7, #71	; 0x47
 800762a:	d102      	bne.n	8007632 <__cvt+0x5e>
 800762c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800762e:	07db      	lsls	r3, r3, #31
 8007630:	d528      	bpl.n	8007684 <__cvt+0xb0>
 8007632:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007634:	18eb      	adds	r3, r5, r3
 8007636:	9307      	str	r3, [sp, #28]
 8007638:	2f46      	cmp	r7, #70	; 0x46
 800763a:	d114      	bne.n	8007666 <__cvt+0x92>
 800763c:	782b      	ldrb	r3, [r5, #0]
 800763e:	2b30      	cmp	r3, #48	; 0x30
 8007640:	d10c      	bne.n	800765c <__cvt+0x88>
 8007642:	2200      	movs	r2, #0
 8007644:	2300      	movs	r3, #0
 8007646:	0020      	movs	r0, r4
 8007648:	0031      	movs	r1, r6
 800764a:	f7f8 fefd 	bl	8000448 <__aeabi_dcmpeq>
 800764e:	2800      	cmp	r0, #0
 8007650:	d104      	bne.n	800765c <__cvt+0x88>
 8007652:	2301      	movs	r3, #1
 8007654:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007656:	1a9b      	subs	r3, r3, r2
 8007658:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800765a:	6013      	str	r3, [r2, #0]
 800765c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800765e:	9a07      	ldr	r2, [sp, #28]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	18d3      	adds	r3, r2, r3
 8007664:	9307      	str	r3, [sp, #28]
 8007666:	2200      	movs	r2, #0
 8007668:	2300      	movs	r3, #0
 800766a:	0020      	movs	r0, r4
 800766c:	0031      	movs	r1, r6
 800766e:	f7f8 feeb 	bl	8000448 <__aeabi_dcmpeq>
 8007672:	2800      	cmp	r0, #0
 8007674:	d001      	beq.n	800767a <__cvt+0xa6>
 8007676:	9b07      	ldr	r3, [sp, #28]
 8007678:	9309      	str	r3, [sp, #36]	; 0x24
 800767a:	2230      	movs	r2, #48	; 0x30
 800767c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800767e:	9907      	ldr	r1, [sp, #28]
 8007680:	428b      	cmp	r3, r1
 8007682:	d306      	bcc.n	8007692 <__cvt+0xbe>
 8007684:	0028      	movs	r0, r5
 8007686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007688:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800768a:	1b5b      	subs	r3, r3, r5
 800768c:	6013      	str	r3, [r2, #0]
 800768e:	b00b      	add	sp, #44	; 0x2c
 8007690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007692:	1c59      	adds	r1, r3, #1
 8007694:	9109      	str	r1, [sp, #36]	; 0x24
 8007696:	701a      	strb	r2, [r3, #0]
 8007698:	e7f0      	b.n	800767c <__cvt+0xa8>

0800769a <__exponent>:
 800769a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800769c:	1c83      	adds	r3, r0, #2
 800769e:	b087      	sub	sp, #28
 80076a0:	9303      	str	r3, [sp, #12]
 80076a2:	0005      	movs	r5, r0
 80076a4:	000c      	movs	r4, r1
 80076a6:	232b      	movs	r3, #43	; 0x2b
 80076a8:	7002      	strb	r2, [r0, #0]
 80076aa:	2900      	cmp	r1, #0
 80076ac:	da01      	bge.n	80076b2 <__exponent+0x18>
 80076ae:	424c      	negs	r4, r1
 80076b0:	3302      	adds	r3, #2
 80076b2:	706b      	strb	r3, [r5, #1]
 80076b4:	2c09      	cmp	r4, #9
 80076b6:	dd31      	ble.n	800771c <__exponent+0x82>
 80076b8:	270a      	movs	r7, #10
 80076ba:	ab04      	add	r3, sp, #16
 80076bc:	1dde      	adds	r6, r3, #7
 80076be:	0020      	movs	r0, r4
 80076c0:	0039      	movs	r1, r7
 80076c2:	9601      	str	r6, [sp, #4]
 80076c4:	f7f8 feaa 	bl	800041c <__aeabi_idivmod>
 80076c8:	3e01      	subs	r6, #1
 80076ca:	3130      	adds	r1, #48	; 0x30
 80076cc:	0020      	movs	r0, r4
 80076ce:	7031      	strb	r1, [r6, #0]
 80076d0:	0039      	movs	r1, r7
 80076d2:	9402      	str	r4, [sp, #8]
 80076d4:	f7f8 fdbc 	bl	8000250 <__divsi3>
 80076d8:	9b02      	ldr	r3, [sp, #8]
 80076da:	0004      	movs	r4, r0
 80076dc:	2b63      	cmp	r3, #99	; 0x63
 80076de:	dcee      	bgt.n	80076be <__exponent+0x24>
 80076e0:	9b01      	ldr	r3, [sp, #4]
 80076e2:	3430      	adds	r4, #48	; 0x30
 80076e4:	1e9a      	subs	r2, r3, #2
 80076e6:	0013      	movs	r3, r2
 80076e8:	9903      	ldr	r1, [sp, #12]
 80076ea:	7014      	strb	r4, [r2, #0]
 80076ec:	a804      	add	r0, sp, #16
 80076ee:	3007      	adds	r0, #7
 80076f0:	4298      	cmp	r0, r3
 80076f2:	d80e      	bhi.n	8007712 <__exponent+0x78>
 80076f4:	ab04      	add	r3, sp, #16
 80076f6:	3307      	adds	r3, #7
 80076f8:	2000      	movs	r0, #0
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d804      	bhi.n	8007708 <__exponent+0x6e>
 80076fe:	ab04      	add	r3, sp, #16
 8007700:	3009      	adds	r0, #9
 8007702:	18c0      	adds	r0, r0, r3
 8007704:	9b01      	ldr	r3, [sp, #4]
 8007706:	1ac0      	subs	r0, r0, r3
 8007708:	9b03      	ldr	r3, [sp, #12]
 800770a:	1818      	adds	r0, r3, r0
 800770c:	1b40      	subs	r0, r0, r5
 800770e:	b007      	add	sp, #28
 8007710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007712:	7818      	ldrb	r0, [r3, #0]
 8007714:	3301      	adds	r3, #1
 8007716:	7008      	strb	r0, [r1, #0]
 8007718:	3101      	adds	r1, #1
 800771a:	e7e7      	b.n	80076ec <__exponent+0x52>
 800771c:	2330      	movs	r3, #48	; 0x30
 800771e:	18e4      	adds	r4, r4, r3
 8007720:	70ab      	strb	r3, [r5, #2]
 8007722:	1d28      	adds	r0, r5, #4
 8007724:	70ec      	strb	r4, [r5, #3]
 8007726:	e7f1      	b.n	800770c <__exponent+0x72>

08007728 <_printf_float>:
 8007728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800772a:	b095      	sub	sp, #84	; 0x54
 800772c:	000c      	movs	r4, r1
 800772e:	9209      	str	r2, [sp, #36]	; 0x24
 8007730:	001e      	movs	r6, r3
 8007732:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007734:	0007      	movs	r7, r0
 8007736:	f001 fb2b 	bl	8008d90 <_localeconv_r>
 800773a:	6803      	ldr	r3, [r0, #0]
 800773c:	0018      	movs	r0, r3
 800773e:	930c      	str	r3, [sp, #48]	; 0x30
 8007740:	f7f8 fce0 	bl	8000104 <strlen>
 8007744:	2300      	movs	r3, #0
 8007746:	9312      	str	r3, [sp, #72]	; 0x48
 8007748:	7e23      	ldrb	r3, [r4, #24]
 800774a:	2207      	movs	r2, #7
 800774c:	930a      	str	r3, [sp, #40]	; 0x28
 800774e:	6823      	ldr	r3, [r4, #0]
 8007750:	900e      	str	r0, [sp, #56]	; 0x38
 8007752:	930d      	str	r3, [sp, #52]	; 0x34
 8007754:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007756:	682b      	ldr	r3, [r5, #0]
 8007758:	05c9      	lsls	r1, r1, #23
 800775a:	d547      	bpl.n	80077ec <_printf_float+0xc4>
 800775c:	189b      	adds	r3, r3, r2
 800775e:	4393      	bics	r3, r2
 8007760:	001a      	movs	r2, r3
 8007762:	3208      	adds	r2, #8
 8007764:	602a      	str	r2, [r5, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	64a2      	str	r2, [r4, #72]	; 0x48
 800776c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800776e:	2201      	movs	r2, #1
 8007770:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007772:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007774:	930b      	str	r3, [sp, #44]	; 0x2c
 8007776:	006b      	lsls	r3, r5, #1
 8007778:	085b      	lsrs	r3, r3, #1
 800777a:	930f      	str	r3, [sp, #60]	; 0x3c
 800777c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800777e:	4ba7      	ldr	r3, [pc, #668]	; (8007a1c <_printf_float+0x2f4>)
 8007780:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007782:	4252      	negs	r2, r2
 8007784:	f7fb f826 	bl	80027d4 <__aeabi_dcmpun>
 8007788:	2800      	cmp	r0, #0
 800778a:	d131      	bne.n	80077f0 <_printf_float+0xc8>
 800778c:	2201      	movs	r2, #1
 800778e:	4ba3      	ldr	r3, [pc, #652]	; (8007a1c <_printf_float+0x2f4>)
 8007790:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007792:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007794:	4252      	negs	r2, r2
 8007796:	f7f8 fe67 	bl	8000468 <__aeabi_dcmple>
 800779a:	2800      	cmp	r0, #0
 800779c:	d128      	bne.n	80077f0 <_printf_float+0xc8>
 800779e:	2200      	movs	r2, #0
 80077a0:	2300      	movs	r3, #0
 80077a2:	0029      	movs	r1, r5
 80077a4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80077a6:	f7f8 fe55 	bl	8000454 <__aeabi_dcmplt>
 80077aa:	2800      	cmp	r0, #0
 80077ac:	d003      	beq.n	80077b6 <_printf_float+0x8e>
 80077ae:	0023      	movs	r3, r4
 80077b0:	222d      	movs	r2, #45	; 0x2d
 80077b2:	3343      	adds	r3, #67	; 0x43
 80077b4:	701a      	strb	r2, [r3, #0]
 80077b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077b8:	4d99      	ldr	r5, [pc, #612]	; (8007a20 <_printf_float+0x2f8>)
 80077ba:	2b47      	cmp	r3, #71	; 0x47
 80077bc:	d900      	bls.n	80077c0 <_printf_float+0x98>
 80077be:	4d99      	ldr	r5, [pc, #612]	; (8007a24 <_printf_float+0x2fc>)
 80077c0:	2303      	movs	r3, #3
 80077c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077c4:	6123      	str	r3, [r4, #16]
 80077c6:	3301      	adds	r3, #1
 80077c8:	439a      	bics	r2, r3
 80077ca:	2300      	movs	r3, #0
 80077cc:	6022      	str	r2, [r4, #0]
 80077ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80077d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077d2:	0021      	movs	r1, r4
 80077d4:	0038      	movs	r0, r7
 80077d6:	9600      	str	r6, [sp, #0]
 80077d8:	aa13      	add	r2, sp, #76	; 0x4c
 80077da:	f000 f9e7 	bl	8007bac <_printf_common>
 80077de:	1c43      	adds	r3, r0, #1
 80077e0:	d000      	beq.n	80077e4 <_printf_float+0xbc>
 80077e2:	e0a2      	b.n	800792a <_printf_float+0x202>
 80077e4:	2001      	movs	r0, #1
 80077e6:	4240      	negs	r0, r0
 80077e8:	b015      	add	sp, #84	; 0x54
 80077ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077ec:	3307      	adds	r3, #7
 80077ee:	e7b6      	b.n	800775e <_printf_float+0x36>
 80077f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077f2:	002b      	movs	r3, r5
 80077f4:	0010      	movs	r0, r2
 80077f6:	0029      	movs	r1, r5
 80077f8:	f7fa ffec 	bl	80027d4 <__aeabi_dcmpun>
 80077fc:	2800      	cmp	r0, #0
 80077fe:	d00b      	beq.n	8007818 <_printf_float+0xf0>
 8007800:	2d00      	cmp	r5, #0
 8007802:	da03      	bge.n	800780c <_printf_float+0xe4>
 8007804:	0023      	movs	r3, r4
 8007806:	222d      	movs	r2, #45	; 0x2d
 8007808:	3343      	adds	r3, #67	; 0x43
 800780a:	701a      	strb	r2, [r3, #0]
 800780c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800780e:	4d86      	ldr	r5, [pc, #536]	; (8007a28 <_printf_float+0x300>)
 8007810:	2b47      	cmp	r3, #71	; 0x47
 8007812:	d9d5      	bls.n	80077c0 <_printf_float+0x98>
 8007814:	4d85      	ldr	r5, [pc, #532]	; (8007a2c <_printf_float+0x304>)
 8007816:	e7d3      	b.n	80077c0 <_printf_float+0x98>
 8007818:	2220      	movs	r2, #32
 800781a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800781c:	6863      	ldr	r3, [r4, #4]
 800781e:	4391      	bics	r1, r2
 8007820:	910f      	str	r1, [sp, #60]	; 0x3c
 8007822:	1c5a      	adds	r2, r3, #1
 8007824:	d149      	bne.n	80078ba <_printf_float+0x192>
 8007826:	3307      	adds	r3, #7
 8007828:	6063      	str	r3, [r4, #4]
 800782a:	2380      	movs	r3, #128	; 0x80
 800782c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800782e:	00db      	lsls	r3, r3, #3
 8007830:	4313      	orrs	r3, r2
 8007832:	2200      	movs	r2, #0
 8007834:	9206      	str	r2, [sp, #24]
 8007836:	aa12      	add	r2, sp, #72	; 0x48
 8007838:	9205      	str	r2, [sp, #20]
 800783a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800783c:	a908      	add	r1, sp, #32
 800783e:	9204      	str	r2, [sp, #16]
 8007840:	aa11      	add	r2, sp, #68	; 0x44
 8007842:	9203      	str	r2, [sp, #12]
 8007844:	2223      	movs	r2, #35	; 0x23
 8007846:	6023      	str	r3, [r4, #0]
 8007848:	9301      	str	r3, [sp, #4]
 800784a:	6863      	ldr	r3, [r4, #4]
 800784c:	1852      	adds	r2, r2, r1
 800784e:	9202      	str	r2, [sp, #8]
 8007850:	9300      	str	r3, [sp, #0]
 8007852:	0038      	movs	r0, r7
 8007854:	002b      	movs	r3, r5
 8007856:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007858:	f7ff febc 	bl	80075d4 <__cvt>
 800785c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800785e:	0005      	movs	r5, r0
 8007860:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007862:	2b47      	cmp	r3, #71	; 0x47
 8007864:	d108      	bne.n	8007878 <_printf_float+0x150>
 8007866:	1ccb      	adds	r3, r1, #3
 8007868:	db02      	blt.n	8007870 <_printf_float+0x148>
 800786a:	6863      	ldr	r3, [r4, #4]
 800786c:	4299      	cmp	r1, r3
 800786e:	dd48      	ble.n	8007902 <_printf_float+0x1da>
 8007870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007872:	3b02      	subs	r3, #2
 8007874:	b2db      	uxtb	r3, r3
 8007876:	930a      	str	r3, [sp, #40]	; 0x28
 8007878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800787a:	2b65      	cmp	r3, #101	; 0x65
 800787c:	d824      	bhi.n	80078c8 <_printf_float+0x1a0>
 800787e:	0020      	movs	r0, r4
 8007880:	001a      	movs	r2, r3
 8007882:	3901      	subs	r1, #1
 8007884:	3050      	adds	r0, #80	; 0x50
 8007886:	9111      	str	r1, [sp, #68]	; 0x44
 8007888:	f7ff ff07 	bl	800769a <__exponent>
 800788c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800788e:	900b      	str	r0, [sp, #44]	; 0x2c
 8007890:	1813      	adds	r3, r2, r0
 8007892:	6123      	str	r3, [r4, #16]
 8007894:	2a01      	cmp	r2, #1
 8007896:	dc02      	bgt.n	800789e <_printf_float+0x176>
 8007898:	6822      	ldr	r2, [r4, #0]
 800789a:	07d2      	lsls	r2, r2, #31
 800789c:	d501      	bpl.n	80078a2 <_printf_float+0x17a>
 800789e:	3301      	adds	r3, #1
 80078a0:	6123      	str	r3, [r4, #16]
 80078a2:	2323      	movs	r3, #35	; 0x23
 80078a4:	aa08      	add	r2, sp, #32
 80078a6:	189b      	adds	r3, r3, r2
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d100      	bne.n	80078b0 <_printf_float+0x188>
 80078ae:	e78f      	b.n	80077d0 <_printf_float+0xa8>
 80078b0:	0023      	movs	r3, r4
 80078b2:	222d      	movs	r2, #45	; 0x2d
 80078b4:	3343      	adds	r3, #67	; 0x43
 80078b6:	701a      	strb	r2, [r3, #0]
 80078b8:	e78a      	b.n	80077d0 <_printf_float+0xa8>
 80078ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078bc:	2a47      	cmp	r2, #71	; 0x47
 80078be:	d1b4      	bne.n	800782a <_printf_float+0x102>
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1b2      	bne.n	800782a <_printf_float+0x102>
 80078c4:	3301      	adds	r3, #1
 80078c6:	e7af      	b.n	8007828 <_printf_float+0x100>
 80078c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ca:	2b66      	cmp	r3, #102	; 0x66
 80078cc:	d11b      	bne.n	8007906 <_printf_float+0x1de>
 80078ce:	6863      	ldr	r3, [r4, #4]
 80078d0:	2900      	cmp	r1, #0
 80078d2:	dd0d      	ble.n	80078f0 <_printf_float+0x1c8>
 80078d4:	6121      	str	r1, [r4, #16]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d102      	bne.n	80078e0 <_printf_float+0x1b8>
 80078da:	6822      	ldr	r2, [r4, #0]
 80078dc:	07d2      	lsls	r2, r2, #31
 80078de:	d502      	bpl.n	80078e6 <_printf_float+0x1be>
 80078e0:	3301      	adds	r3, #1
 80078e2:	1859      	adds	r1, r3, r1
 80078e4:	6121      	str	r1, [r4, #16]
 80078e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078e8:	65a3      	str	r3, [r4, #88]	; 0x58
 80078ea:	2300      	movs	r3, #0
 80078ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80078ee:	e7d8      	b.n	80078a2 <_printf_float+0x17a>
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d103      	bne.n	80078fc <_printf_float+0x1d4>
 80078f4:	2201      	movs	r2, #1
 80078f6:	6821      	ldr	r1, [r4, #0]
 80078f8:	4211      	tst	r1, r2
 80078fa:	d000      	beq.n	80078fe <_printf_float+0x1d6>
 80078fc:	1c9a      	adds	r2, r3, #2
 80078fe:	6122      	str	r2, [r4, #16]
 8007900:	e7f1      	b.n	80078e6 <_printf_float+0x1be>
 8007902:	2367      	movs	r3, #103	; 0x67
 8007904:	930a      	str	r3, [sp, #40]	; 0x28
 8007906:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007908:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800790a:	4293      	cmp	r3, r2
 800790c:	db06      	blt.n	800791c <_printf_float+0x1f4>
 800790e:	6822      	ldr	r2, [r4, #0]
 8007910:	6123      	str	r3, [r4, #16]
 8007912:	07d2      	lsls	r2, r2, #31
 8007914:	d5e7      	bpl.n	80078e6 <_printf_float+0x1be>
 8007916:	3301      	adds	r3, #1
 8007918:	6123      	str	r3, [r4, #16]
 800791a:	e7e4      	b.n	80078e6 <_printf_float+0x1be>
 800791c:	2101      	movs	r1, #1
 800791e:	2b00      	cmp	r3, #0
 8007920:	dc01      	bgt.n	8007926 <_printf_float+0x1fe>
 8007922:	1849      	adds	r1, r1, r1
 8007924:	1ac9      	subs	r1, r1, r3
 8007926:	1852      	adds	r2, r2, r1
 8007928:	e7e9      	b.n	80078fe <_printf_float+0x1d6>
 800792a:	6822      	ldr	r2, [r4, #0]
 800792c:	0553      	lsls	r3, r2, #21
 800792e:	d407      	bmi.n	8007940 <_printf_float+0x218>
 8007930:	6923      	ldr	r3, [r4, #16]
 8007932:	002a      	movs	r2, r5
 8007934:	0038      	movs	r0, r7
 8007936:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007938:	47b0      	blx	r6
 800793a:	1c43      	adds	r3, r0, #1
 800793c:	d128      	bne.n	8007990 <_printf_float+0x268>
 800793e:	e751      	b.n	80077e4 <_printf_float+0xbc>
 8007940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007942:	2b65      	cmp	r3, #101	; 0x65
 8007944:	d800      	bhi.n	8007948 <_printf_float+0x220>
 8007946:	e0e1      	b.n	8007b0c <_printf_float+0x3e4>
 8007948:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800794a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800794c:	2200      	movs	r2, #0
 800794e:	2300      	movs	r3, #0
 8007950:	f7f8 fd7a 	bl	8000448 <__aeabi_dcmpeq>
 8007954:	2800      	cmp	r0, #0
 8007956:	d031      	beq.n	80079bc <_printf_float+0x294>
 8007958:	2301      	movs	r3, #1
 800795a:	0038      	movs	r0, r7
 800795c:	4a34      	ldr	r2, [pc, #208]	; (8007a30 <_printf_float+0x308>)
 800795e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007960:	47b0      	blx	r6
 8007962:	1c43      	adds	r3, r0, #1
 8007964:	d100      	bne.n	8007968 <_printf_float+0x240>
 8007966:	e73d      	b.n	80077e4 <_printf_float+0xbc>
 8007968:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800796a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800796c:	4293      	cmp	r3, r2
 800796e:	db02      	blt.n	8007976 <_printf_float+0x24e>
 8007970:	6823      	ldr	r3, [r4, #0]
 8007972:	07db      	lsls	r3, r3, #31
 8007974:	d50c      	bpl.n	8007990 <_printf_float+0x268>
 8007976:	0038      	movs	r0, r7
 8007978:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800797a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800797c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800797e:	47b0      	blx	r6
 8007980:	2500      	movs	r5, #0
 8007982:	1c43      	adds	r3, r0, #1
 8007984:	d100      	bne.n	8007988 <_printf_float+0x260>
 8007986:	e72d      	b.n	80077e4 <_printf_float+0xbc>
 8007988:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800798a:	3b01      	subs	r3, #1
 800798c:	42ab      	cmp	r3, r5
 800798e:	dc0a      	bgt.n	80079a6 <_printf_float+0x27e>
 8007990:	6823      	ldr	r3, [r4, #0]
 8007992:	079b      	lsls	r3, r3, #30
 8007994:	d500      	bpl.n	8007998 <_printf_float+0x270>
 8007996:	e106      	b.n	8007ba6 <_printf_float+0x47e>
 8007998:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800799a:	68e0      	ldr	r0, [r4, #12]
 800799c:	4298      	cmp	r0, r3
 800799e:	db00      	blt.n	80079a2 <_printf_float+0x27a>
 80079a0:	e722      	b.n	80077e8 <_printf_float+0xc0>
 80079a2:	0018      	movs	r0, r3
 80079a4:	e720      	b.n	80077e8 <_printf_float+0xc0>
 80079a6:	0022      	movs	r2, r4
 80079a8:	2301      	movs	r3, #1
 80079aa:	0038      	movs	r0, r7
 80079ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079ae:	321a      	adds	r2, #26
 80079b0:	47b0      	blx	r6
 80079b2:	1c43      	adds	r3, r0, #1
 80079b4:	d100      	bne.n	80079b8 <_printf_float+0x290>
 80079b6:	e715      	b.n	80077e4 <_printf_float+0xbc>
 80079b8:	3501      	adds	r5, #1
 80079ba:	e7e5      	b.n	8007988 <_printf_float+0x260>
 80079bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80079be:	2b00      	cmp	r3, #0
 80079c0:	dc38      	bgt.n	8007a34 <_printf_float+0x30c>
 80079c2:	2301      	movs	r3, #1
 80079c4:	0038      	movs	r0, r7
 80079c6:	4a1a      	ldr	r2, [pc, #104]	; (8007a30 <_printf_float+0x308>)
 80079c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079ca:	47b0      	blx	r6
 80079cc:	1c43      	adds	r3, r0, #1
 80079ce:	d100      	bne.n	80079d2 <_printf_float+0x2aa>
 80079d0:	e708      	b.n	80077e4 <_printf_float+0xbc>
 80079d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80079d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80079d6:	4313      	orrs	r3, r2
 80079d8:	d102      	bne.n	80079e0 <_printf_float+0x2b8>
 80079da:	6823      	ldr	r3, [r4, #0]
 80079dc:	07db      	lsls	r3, r3, #31
 80079de:	d5d7      	bpl.n	8007990 <_printf_float+0x268>
 80079e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079e2:	0038      	movs	r0, r7
 80079e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079e8:	47b0      	blx	r6
 80079ea:	1c43      	adds	r3, r0, #1
 80079ec:	d100      	bne.n	80079f0 <_printf_float+0x2c8>
 80079ee:	e6f9      	b.n	80077e4 <_printf_float+0xbc>
 80079f0:	2300      	movs	r3, #0
 80079f2:	930a      	str	r3, [sp, #40]	; 0x28
 80079f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80079f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079f8:	425b      	negs	r3, r3
 80079fa:	4293      	cmp	r3, r2
 80079fc:	dc01      	bgt.n	8007a02 <_printf_float+0x2da>
 80079fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a00:	e797      	b.n	8007932 <_printf_float+0x20a>
 8007a02:	0022      	movs	r2, r4
 8007a04:	2301      	movs	r3, #1
 8007a06:	0038      	movs	r0, r7
 8007a08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a0a:	321a      	adds	r2, #26
 8007a0c:	47b0      	blx	r6
 8007a0e:	1c43      	adds	r3, r0, #1
 8007a10:	d100      	bne.n	8007a14 <_printf_float+0x2ec>
 8007a12:	e6e7      	b.n	80077e4 <_printf_float+0xbc>
 8007a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a16:	3301      	adds	r3, #1
 8007a18:	e7eb      	b.n	80079f2 <_printf_float+0x2ca>
 8007a1a:	46c0      	nop			; (mov r8, r8)
 8007a1c:	7fefffff 	.word	0x7fefffff
 8007a20:	0800adb4 	.word	0x0800adb4
 8007a24:	0800adb8 	.word	0x0800adb8
 8007a28:	0800adbc 	.word	0x0800adbc
 8007a2c:	0800adc0 	.word	0x0800adc0
 8007a30:	0800adc4 	.word	0x0800adc4
 8007a34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007a36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a38:	920a      	str	r2, [sp, #40]	; 0x28
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	dd00      	ble.n	8007a40 <_printf_float+0x318>
 8007a3e:	930a      	str	r3, [sp, #40]	; 0x28
 8007a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	dc3c      	bgt.n	8007ac0 <_printf_float+0x398>
 8007a46:	2300      	movs	r3, #0
 8007a48:	930d      	str	r3, [sp, #52]	; 0x34
 8007a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a4c:	43db      	mvns	r3, r3
 8007a4e:	17db      	asrs	r3, r3, #31
 8007a50:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a56:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a5e:	1ad3      	subs	r3, r2, r3
 8007a60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a62:	4293      	cmp	r3, r2
 8007a64:	dc34      	bgt.n	8007ad0 <_printf_float+0x3a8>
 8007a66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	db3d      	blt.n	8007aea <_printf_float+0x3c2>
 8007a6e:	6823      	ldr	r3, [r4, #0]
 8007a70:	07db      	lsls	r3, r3, #31
 8007a72:	d43a      	bmi.n	8007aea <_printf_float+0x3c2>
 8007a74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007a76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a78:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	1a52      	subs	r2, r2, r1
 8007a7e:	920a      	str	r2, [sp, #40]	; 0x28
 8007a80:	429a      	cmp	r2, r3
 8007a82:	dd00      	ble.n	8007a86 <_printf_float+0x35e>
 8007a84:	930a      	str	r3, [sp, #40]	; 0x28
 8007a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	dc36      	bgt.n	8007afa <_printf_float+0x3d2>
 8007a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a8e:	2500      	movs	r5, #0
 8007a90:	43db      	mvns	r3, r3
 8007a92:	17db      	asrs	r3, r3, #31
 8007a94:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a96:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007a98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a9c:	1a9b      	subs	r3, r3, r2
 8007a9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007aa0:	400a      	ands	r2, r1
 8007aa2:	1a9b      	subs	r3, r3, r2
 8007aa4:	42ab      	cmp	r3, r5
 8007aa6:	dc00      	bgt.n	8007aaa <_printf_float+0x382>
 8007aa8:	e772      	b.n	8007990 <_printf_float+0x268>
 8007aaa:	0022      	movs	r2, r4
 8007aac:	2301      	movs	r3, #1
 8007aae:	0038      	movs	r0, r7
 8007ab0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ab2:	321a      	adds	r2, #26
 8007ab4:	47b0      	blx	r6
 8007ab6:	1c43      	adds	r3, r0, #1
 8007ab8:	d100      	bne.n	8007abc <_printf_float+0x394>
 8007aba:	e693      	b.n	80077e4 <_printf_float+0xbc>
 8007abc:	3501      	adds	r5, #1
 8007abe:	e7ea      	b.n	8007a96 <_printf_float+0x36e>
 8007ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ac2:	002a      	movs	r2, r5
 8007ac4:	0038      	movs	r0, r7
 8007ac6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ac8:	47b0      	blx	r6
 8007aca:	1c43      	adds	r3, r0, #1
 8007acc:	d1bb      	bne.n	8007a46 <_printf_float+0x31e>
 8007ace:	e689      	b.n	80077e4 <_printf_float+0xbc>
 8007ad0:	0022      	movs	r2, r4
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	0038      	movs	r0, r7
 8007ad6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ad8:	321a      	adds	r2, #26
 8007ada:	47b0      	blx	r6
 8007adc:	1c43      	adds	r3, r0, #1
 8007ade:	d100      	bne.n	8007ae2 <_printf_float+0x3ba>
 8007ae0:	e680      	b.n	80077e4 <_printf_float+0xbc>
 8007ae2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	930d      	str	r3, [sp, #52]	; 0x34
 8007ae8:	e7b3      	b.n	8007a52 <_printf_float+0x32a>
 8007aea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007aec:	0038      	movs	r0, r7
 8007aee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007af0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007af2:	47b0      	blx	r6
 8007af4:	1c43      	adds	r3, r0, #1
 8007af6:	d1bd      	bne.n	8007a74 <_printf_float+0x34c>
 8007af8:	e674      	b.n	80077e4 <_printf_float+0xbc>
 8007afa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007afc:	0038      	movs	r0, r7
 8007afe:	18ea      	adds	r2, r5, r3
 8007b00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b04:	47b0      	blx	r6
 8007b06:	1c43      	adds	r3, r0, #1
 8007b08:	d1c0      	bne.n	8007a8c <_printf_float+0x364>
 8007b0a:	e66b      	b.n	80077e4 <_printf_float+0xbc>
 8007b0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	dc02      	bgt.n	8007b18 <_printf_float+0x3f0>
 8007b12:	2301      	movs	r3, #1
 8007b14:	421a      	tst	r2, r3
 8007b16:	d034      	beq.n	8007b82 <_printf_float+0x45a>
 8007b18:	2301      	movs	r3, #1
 8007b1a:	002a      	movs	r2, r5
 8007b1c:	0038      	movs	r0, r7
 8007b1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b20:	47b0      	blx	r6
 8007b22:	1c43      	adds	r3, r0, #1
 8007b24:	d100      	bne.n	8007b28 <_printf_float+0x400>
 8007b26:	e65d      	b.n	80077e4 <_printf_float+0xbc>
 8007b28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b2a:	0038      	movs	r0, r7
 8007b2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b30:	47b0      	blx	r6
 8007b32:	1c43      	adds	r3, r0, #1
 8007b34:	d100      	bne.n	8007b38 <_printf_float+0x410>
 8007b36:	e655      	b.n	80077e4 <_printf_float+0xbc>
 8007b38:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007b3a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	2300      	movs	r3, #0
 8007b40:	f7f8 fc82 	bl	8000448 <__aeabi_dcmpeq>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	d11a      	bne.n	8007b7e <_printf_float+0x456>
 8007b48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b4a:	1c6a      	adds	r2, r5, #1
 8007b4c:	3b01      	subs	r3, #1
 8007b4e:	0038      	movs	r0, r7
 8007b50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b52:	47b0      	blx	r6
 8007b54:	1c43      	adds	r3, r0, #1
 8007b56:	d10e      	bne.n	8007b76 <_printf_float+0x44e>
 8007b58:	e644      	b.n	80077e4 <_printf_float+0xbc>
 8007b5a:	0022      	movs	r2, r4
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	0038      	movs	r0, r7
 8007b60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b62:	321a      	adds	r2, #26
 8007b64:	47b0      	blx	r6
 8007b66:	1c43      	adds	r3, r0, #1
 8007b68:	d100      	bne.n	8007b6c <_printf_float+0x444>
 8007b6a:	e63b      	b.n	80077e4 <_printf_float+0xbc>
 8007b6c:	3501      	adds	r5, #1
 8007b6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b70:	3b01      	subs	r3, #1
 8007b72:	42ab      	cmp	r3, r5
 8007b74:	dcf1      	bgt.n	8007b5a <_printf_float+0x432>
 8007b76:	0022      	movs	r2, r4
 8007b78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b7a:	3250      	adds	r2, #80	; 0x50
 8007b7c:	e6da      	b.n	8007934 <_printf_float+0x20c>
 8007b7e:	2500      	movs	r5, #0
 8007b80:	e7f5      	b.n	8007b6e <_printf_float+0x446>
 8007b82:	002a      	movs	r2, r5
 8007b84:	e7e3      	b.n	8007b4e <_printf_float+0x426>
 8007b86:	0022      	movs	r2, r4
 8007b88:	2301      	movs	r3, #1
 8007b8a:	0038      	movs	r0, r7
 8007b8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b8e:	3219      	adds	r2, #25
 8007b90:	47b0      	blx	r6
 8007b92:	1c43      	adds	r3, r0, #1
 8007b94:	d100      	bne.n	8007b98 <_printf_float+0x470>
 8007b96:	e625      	b.n	80077e4 <_printf_float+0xbc>
 8007b98:	3501      	adds	r5, #1
 8007b9a:	68e3      	ldr	r3, [r4, #12]
 8007b9c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007b9e:	1a9b      	subs	r3, r3, r2
 8007ba0:	42ab      	cmp	r3, r5
 8007ba2:	dcf0      	bgt.n	8007b86 <_printf_float+0x45e>
 8007ba4:	e6f8      	b.n	8007998 <_printf_float+0x270>
 8007ba6:	2500      	movs	r5, #0
 8007ba8:	e7f7      	b.n	8007b9a <_printf_float+0x472>
 8007baa:	46c0      	nop			; (mov r8, r8)

08007bac <_printf_common>:
 8007bac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bae:	0015      	movs	r5, r2
 8007bb0:	9301      	str	r3, [sp, #4]
 8007bb2:	688a      	ldr	r2, [r1, #8]
 8007bb4:	690b      	ldr	r3, [r1, #16]
 8007bb6:	000c      	movs	r4, r1
 8007bb8:	9000      	str	r0, [sp, #0]
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	da00      	bge.n	8007bc0 <_printf_common+0x14>
 8007bbe:	0013      	movs	r3, r2
 8007bc0:	0022      	movs	r2, r4
 8007bc2:	602b      	str	r3, [r5, #0]
 8007bc4:	3243      	adds	r2, #67	; 0x43
 8007bc6:	7812      	ldrb	r2, [r2, #0]
 8007bc8:	2a00      	cmp	r2, #0
 8007bca:	d001      	beq.n	8007bd0 <_printf_common+0x24>
 8007bcc:	3301      	adds	r3, #1
 8007bce:	602b      	str	r3, [r5, #0]
 8007bd0:	6823      	ldr	r3, [r4, #0]
 8007bd2:	069b      	lsls	r3, r3, #26
 8007bd4:	d502      	bpl.n	8007bdc <_printf_common+0x30>
 8007bd6:	682b      	ldr	r3, [r5, #0]
 8007bd8:	3302      	adds	r3, #2
 8007bda:	602b      	str	r3, [r5, #0]
 8007bdc:	6822      	ldr	r2, [r4, #0]
 8007bde:	2306      	movs	r3, #6
 8007be0:	0017      	movs	r7, r2
 8007be2:	401f      	ands	r7, r3
 8007be4:	421a      	tst	r2, r3
 8007be6:	d027      	beq.n	8007c38 <_printf_common+0x8c>
 8007be8:	0023      	movs	r3, r4
 8007bea:	3343      	adds	r3, #67	; 0x43
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	1e5a      	subs	r2, r3, #1
 8007bf0:	4193      	sbcs	r3, r2
 8007bf2:	6822      	ldr	r2, [r4, #0]
 8007bf4:	0692      	lsls	r2, r2, #26
 8007bf6:	d430      	bmi.n	8007c5a <_printf_common+0xae>
 8007bf8:	0022      	movs	r2, r4
 8007bfa:	9901      	ldr	r1, [sp, #4]
 8007bfc:	9800      	ldr	r0, [sp, #0]
 8007bfe:	9e08      	ldr	r6, [sp, #32]
 8007c00:	3243      	adds	r2, #67	; 0x43
 8007c02:	47b0      	blx	r6
 8007c04:	1c43      	adds	r3, r0, #1
 8007c06:	d025      	beq.n	8007c54 <_printf_common+0xa8>
 8007c08:	2306      	movs	r3, #6
 8007c0a:	6820      	ldr	r0, [r4, #0]
 8007c0c:	682a      	ldr	r2, [r5, #0]
 8007c0e:	68e1      	ldr	r1, [r4, #12]
 8007c10:	2500      	movs	r5, #0
 8007c12:	4003      	ands	r3, r0
 8007c14:	2b04      	cmp	r3, #4
 8007c16:	d103      	bne.n	8007c20 <_printf_common+0x74>
 8007c18:	1a8d      	subs	r5, r1, r2
 8007c1a:	43eb      	mvns	r3, r5
 8007c1c:	17db      	asrs	r3, r3, #31
 8007c1e:	401d      	ands	r5, r3
 8007c20:	68a3      	ldr	r3, [r4, #8]
 8007c22:	6922      	ldr	r2, [r4, #16]
 8007c24:	4293      	cmp	r3, r2
 8007c26:	dd01      	ble.n	8007c2c <_printf_common+0x80>
 8007c28:	1a9b      	subs	r3, r3, r2
 8007c2a:	18ed      	adds	r5, r5, r3
 8007c2c:	2700      	movs	r7, #0
 8007c2e:	42bd      	cmp	r5, r7
 8007c30:	d120      	bne.n	8007c74 <_printf_common+0xc8>
 8007c32:	2000      	movs	r0, #0
 8007c34:	e010      	b.n	8007c58 <_printf_common+0xac>
 8007c36:	3701      	adds	r7, #1
 8007c38:	68e3      	ldr	r3, [r4, #12]
 8007c3a:	682a      	ldr	r2, [r5, #0]
 8007c3c:	1a9b      	subs	r3, r3, r2
 8007c3e:	42bb      	cmp	r3, r7
 8007c40:	ddd2      	ble.n	8007be8 <_printf_common+0x3c>
 8007c42:	0022      	movs	r2, r4
 8007c44:	2301      	movs	r3, #1
 8007c46:	9901      	ldr	r1, [sp, #4]
 8007c48:	9800      	ldr	r0, [sp, #0]
 8007c4a:	9e08      	ldr	r6, [sp, #32]
 8007c4c:	3219      	adds	r2, #25
 8007c4e:	47b0      	blx	r6
 8007c50:	1c43      	adds	r3, r0, #1
 8007c52:	d1f0      	bne.n	8007c36 <_printf_common+0x8a>
 8007c54:	2001      	movs	r0, #1
 8007c56:	4240      	negs	r0, r0
 8007c58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c5a:	2030      	movs	r0, #48	; 0x30
 8007c5c:	18e1      	adds	r1, r4, r3
 8007c5e:	3143      	adds	r1, #67	; 0x43
 8007c60:	7008      	strb	r0, [r1, #0]
 8007c62:	0021      	movs	r1, r4
 8007c64:	1c5a      	adds	r2, r3, #1
 8007c66:	3145      	adds	r1, #69	; 0x45
 8007c68:	7809      	ldrb	r1, [r1, #0]
 8007c6a:	18a2      	adds	r2, r4, r2
 8007c6c:	3243      	adds	r2, #67	; 0x43
 8007c6e:	3302      	adds	r3, #2
 8007c70:	7011      	strb	r1, [r2, #0]
 8007c72:	e7c1      	b.n	8007bf8 <_printf_common+0x4c>
 8007c74:	0022      	movs	r2, r4
 8007c76:	2301      	movs	r3, #1
 8007c78:	9901      	ldr	r1, [sp, #4]
 8007c7a:	9800      	ldr	r0, [sp, #0]
 8007c7c:	9e08      	ldr	r6, [sp, #32]
 8007c7e:	321a      	adds	r2, #26
 8007c80:	47b0      	blx	r6
 8007c82:	1c43      	adds	r3, r0, #1
 8007c84:	d0e6      	beq.n	8007c54 <_printf_common+0xa8>
 8007c86:	3701      	adds	r7, #1
 8007c88:	e7d1      	b.n	8007c2e <_printf_common+0x82>
	...

08007c8c <_printf_i>:
 8007c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c8e:	b08b      	sub	sp, #44	; 0x2c
 8007c90:	9206      	str	r2, [sp, #24]
 8007c92:	000a      	movs	r2, r1
 8007c94:	3243      	adds	r2, #67	; 0x43
 8007c96:	9307      	str	r3, [sp, #28]
 8007c98:	9005      	str	r0, [sp, #20]
 8007c9a:	9204      	str	r2, [sp, #16]
 8007c9c:	7e0a      	ldrb	r2, [r1, #24]
 8007c9e:	000c      	movs	r4, r1
 8007ca0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ca2:	2a78      	cmp	r2, #120	; 0x78
 8007ca4:	d807      	bhi.n	8007cb6 <_printf_i+0x2a>
 8007ca6:	2a62      	cmp	r2, #98	; 0x62
 8007ca8:	d809      	bhi.n	8007cbe <_printf_i+0x32>
 8007caa:	2a00      	cmp	r2, #0
 8007cac:	d100      	bne.n	8007cb0 <_printf_i+0x24>
 8007cae:	e0c1      	b.n	8007e34 <_printf_i+0x1a8>
 8007cb0:	2a58      	cmp	r2, #88	; 0x58
 8007cb2:	d100      	bne.n	8007cb6 <_printf_i+0x2a>
 8007cb4:	e08c      	b.n	8007dd0 <_printf_i+0x144>
 8007cb6:	0026      	movs	r6, r4
 8007cb8:	3642      	adds	r6, #66	; 0x42
 8007cba:	7032      	strb	r2, [r6, #0]
 8007cbc:	e022      	b.n	8007d04 <_printf_i+0x78>
 8007cbe:	0010      	movs	r0, r2
 8007cc0:	3863      	subs	r0, #99	; 0x63
 8007cc2:	2815      	cmp	r0, #21
 8007cc4:	d8f7      	bhi.n	8007cb6 <_printf_i+0x2a>
 8007cc6:	f7f8 fa2f 	bl	8000128 <__gnu_thumb1_case_shi>
 8007cca:	0016      	.short	0x0016
 8007ccc:	fff6001f 	.word	0xfff6001f
 8007cd0:	fff6fff6 	.word	0xfff6fff6
 8007cd4:	001ffff6 	.word	0x001ffff6
 8007cd8:	fff6fff6 	.word	0xfff6fff6
 8007cdc:	fff6fff6 	.word	0xfff6fff6
 8007ce0:	003600a8 	.word	0x003600a8
 8007ce4:	fff6009a 	.word	0xfff6009a
 8007ce8:	00b9fff6 	.word	0x00b9fff6
 8007cec:	0036fff6 	.word	0x0036fff6
 8007cf0:	fff6fff6 	.word	0xfff6fff6
 8007cf4:	009e      	.short	0x009e
 8007cf6:	0026      	movs	r6, r4
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	3642      	adds	r6, #66	; 0x42
 8007cfc:	1d11      	adds	r1, r2, #4
 8007cfe:	6019      	str	r1, [r3, #0]
 8007d00:	6813      	ldr	r3, [r2, #0]
 8007d02:	7033      	strb	r3, [r6, #0]
 8007d04:	2301      	movs	r3, #1
 8007d06:	e0a7      	b.n	8007e58 <_printf_i+0x1cc>
 8007d08:	6808      	ldr	r0, [r1, #0]
 8007d0a:	6819      	ldr	r1, [r3, #0]
 8007d0c:	1d0a      	adds	r2, r1, #4
 8007d0e:	0605      	lsls	r5, r0, #24
 8007d10:	d50b      	bpl.n	8007d2a <_printf_i+0x9e>
 8007d12:	680d      	ldr	r5, [r1, #0]
 8007d14:	601a      	str	r2, [r3, #0]
 8007d16:	2d00      	cmp	r5, #0
 8007d18:	da03      	bge.n	8007d22 <_printf_i+0x96>
 8007d1a:	232d      	movs	r3, #45	; 0x2d
 8007d1c:	9a04      	ldr	r2, [sp, #16]
 8007d1e:	426d      	negs	r5, r5
 8007d20:	7013      	strb	r3, [r2, #0]
 8007d22:	4b61      	ldr	r3, [pc, #388]	; (8007ea8 <_printf_i+0x21c>)
 8007d24:	270a      	movs	r7, #10
 8007d26:	9303      	str	r3, [sp, #12]
 8007d28:	e01b      	b.n	8007d62 <_printf_i+0xd6>
 8007d2a:	680d      	ldr	r5, [r1, #0]
 8007d2c:	601a      	str	r2, [r3, #0]
 8007d2e:	0641      	lsls	r1, r0, #25
 8007d30:	d5f1      	bpl.n	8007d16 <_printf_i+0x8a>
 8007d32:	b22d      	sxth	r5, r5
 8007d34:	e7ef      	b.n	8007d16 <_printf_i+0x8a>
 8007d36:	680d      	ldr	r5, [r1, #0]
 8007d38:	6819      	ldr	r1, [r3, #0]
 8007d3a:	1d08      	adds	r0, r1, #4
 8007d3c:	6018      	str	r0, [r3, #0]
 8007d3e:	062e      	lsls	r6, r5, #24
 8007d40:	d501      	bpl.n	8007d46 <_printf_i+0xba>
 8007d42:	680d      	ldr	r5, [r1, #0]
 8007d44:	e003      	b.n	8007d4e <_printf_i+0xc2>
 8007d46:	066d      	lsls	r5, r5, #25
 8007d48:	d5fb      	bpl.n	8007d42 <_printf_i+0xb6>
 8007d4a:	680d      	ldr	r5, [r1, #0]
 8007d4c:	b2ad      	uxth	r5, r5
 8007d4e:	4b56      	ldr	r3, [pc, #344]	; (8007ea8 <_printf_i+0x21c>)
 8007d50:	2708      	movs	r7, #8
 8007d52:	9303      	str	r3, [sp, #12]
 8007d54:	2a6f      	cmp	r2, #111	; 0x6f
 8007d56:	d000      	beq.n	8007d5a <_printf_i+0xce>
 8007d58:	3702      	adds	r7, #2
 8007d5a:	0023      	movs	r3, r4
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	3343      	adds	r3, #67	; 0x43
 8007d60:	701a      	strb	r2, [r3, #0]
 8007d62:	6863      	ldr	r3, [r4, #4]
 8007d64:	60a3      	str	r3, [r4, #8]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	db03      	blt.n	8007d72 <_printf_i+0xe6>
 8007d6a:	2204      	movs	r2, #4
 8007d6c:	6821      	ldr	r1, [r4, #0]
 8007d6e:	4391      	bics	r1, r2
 8007d70:	6021      	str	r1, [r4, #0]
 8007d72:	2d00      	cmp	r5, #0
 8007d74:	d102      	bne.n	8007d7c <_printf_i+0xf0>
 8007d76:	9e04      	ldr	r6, [sp, #16]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00c      	beq.n	8007d96 <_printf_i+0x10a>
 8007d7c:	9e04      	ldr	r6, [sp, #16]
 8007d7e:	0028      	movs	r0, r5
 8007d80:	0039      	movs	r1, r7
 8007d82:	f7f8 fa61 	bl	8000248 <__aeabi_uidivmod>
 8007d86:	9b03      	ldr	r3, [sp, #12]
 8007d88:	3e01      	subs	r6, #1
 8007d8a:	5c5b      	ldrb	r3, [r3, r1]
 8007d8c:	7033      	strb	r3, [r6, #0]
 8007d8e:	002b      	movs	r3, r5
 8007d90:	0005      	movs	r5, r0
 8007d92:	429f      	cmp	r7, r3
 8007d94:	d9f3      	bls.n	8007d7e <_printf_i+0xf2>
 8007d96:	2f08      	cmp	r7, #8
 8007d98:	d109      	bne.n	8007dae <_printf_i+0x122>
 8007d9a:	6823      	ldr	r3, [r4, #0]
 8007d9c:	07db      	lsls	r3, r3, #31
 8007d9e:	d506      	bpl.n	8007dae <_printf_i+0x122>
 8007da0:	6863      	ldr	r3, [r4, #4]
 8007da2:	6922      	ldr	r2, [r4, #16]
 8007da4:	4293      	cmp	r3, r2
 8007da6:	dc02      	bgt.n	8007dae <_printf_i+0x122>
 8007da8:	2330      	movs	r3, #48	; 0x30
 8007daa:	3e01      	subs	r6, #1
 8007dac:	7033      	strb	r3, [r6, #0]
 8007dae:	9b04      	ldr	r3, [sp, #16]
 8007db0:	1b9b      	subs	r3, r3, r6
 8007db2:	6123      	str	r3, [r4, #16]
 8007db4:	9b07      	ldr	r3, [sp, #28]
 8007db6:	0021      	movs	r1, r4
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	9805      	ldr	r0, [sp, #20]
 8007dbc:	9b06      	ldr	r3, [sp, #24]
 8007dbe:	aa09      	add	r2, sp, #36	; 0x24
 8007dc0:	f7ff fef4 	bl	8007bac <_printf_common>
 8007dc4:	1c43      	adds	r3, r0, #1
 8007dc6:	d14c      	bne.n	8007e62 <_printf_i+0x1d6>
 8007dc8:	2001      	movs	r0, #1
 8007dca:	4240      	negs	r0, r0
 8007dcc:	b00b      	add	sp, #44	; 0x2c
 8007dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dd0:	3145      	adds	r1, #69	; 0x45
 8007dd2:	700a      	strb	r2, [r1, #0]
 8007dd4:	4a34      	ldr	r2, [pc, #208]	; (8007ea8 <_printf_i+0x21c>)
 8007dd6:	9203      	str	r2, [sp, #12]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	6821      	ldr	r1, [r4, #0]
 8007ddc:	ca20      	ldmia	r2!, {r5}
 8007dde:	601a      	str	r2, [r3, #0]
 8007de0:	0608      	lsls	r0, r1, #24
 8007de2:	d516      	bpl.n	8007e12 <_printf_i+0x186>
 8007de4:	07cb      	lsls	r3, r1, #31
 8007de6:	d502      	bpl.n	8007dee <_printf_i+0x162>
 8007de8:	2320      	movs	r3, #32
 8007dea:	4319      	orrs	r1, r3
 8007dec:	6021      	str	r1, [r4, #0]
 8007dee:	2710      	movs	r7, #16
 8007df0:	2d00      	cmp	r5, #0
 8007df2:	d1b2      	bne.n	8007d5a <_printf_i+0xce>
 8007df4:	2320      	movs	r3, #32
 8007df6:	6822      	ldr	r2, [r4, #0]
 8007df8:	439a      	bics	r2, r3
 8007dfa:	6022      	str	r2, [r4, #0]
 8007dfc:	e7ad      	b.n	8007d5a <_printf_i+0xce>
 8007dfe:	2220      	movs	r2, #32
 8007e00:	6809      	ldr	r1, [r1, #0]
 8007e02:	430a      	orrs	r2, r1
 8007e04:	6022      	str	r2, [r4, #0]
 8007e06:	0022      	movs	r2, r4
 8007e08:	2178      	movs	r1, #120	; 0x78
 8007e0a:	3245      	adds	r2, #69	; 0x45
 8007e0c:	7011      	strb	r1, [r2, #0]
 8007e0e:	4a27      	ldr	r2, [pc, #156]	; (8007eac <_printf_i+0x220>)
 8007e10:	e7e1      	b.n	8007dd6 <_printf_i+0x14a>
 8007e12:	0648      	lsls	r0, r1, #25
 8007e14:	d5e6      	bpl.n	8007de4 <_printf_i+0x158>
 8007e16:	b2ad      	uxth	r5, r5
 8007e18:	e7e4      	b.n	8007de4 <_printf_i+0x158>
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	680d      	ldr	r5, [r1, #0]
 8007e1e:	1d10      	adds	r0, r2, #4
 8007e20:	6949      	ldr	r1, [r1, #20]
 8007e22:	6018      	str	r0, [r3, #0]
 8007e24:	6813      	ldr	r3, [r2, #0]
 8007e26:	062e      	lsls	r6, r5, #24
 8007e28:	d501      	bpl.n	8007e2e <_printf_i+0x1a2>
 8007e2a:	6019      	str	r1, [r3, #0]
 8007e2c:	e002      	b.n	8007e34 <_printf_i+0x1a8>
 8007e2e:	066d      	lsls	r5, r5, #25
 8007e30:	d5fb      	bpl.n	8007e2a <_printf_i+0x19e>
 8007e32:	8019      	strh	r1, [r3, #0]
 8007e34:	2300      	movs	r3, #0
 8007e36:	9e04      	ldr	r6, [sp, #16]
 8007e38:	6123      	str	r3, [r4, #16]
 8007e3a:	e7bb      	b.n	8007db4 <_printf_i+0x128>
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	1d11      	adds	r1, r2, #4
 8007e40:	6019      	str	r1, [r3, #0]
 8007e42:	6816      	ldr	r6, [r2, #0]
 8007e44:	2100      	movs	r1, #0
 8007e46:	0030      	movs	r0, r6
 8007e48:	6862      	ldr	r2, [r4, #4]
 8007e4a:	f000 ffaf 	bl	8008dac <memchr>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d001      	beq.n	8007e56 <_printf_i+0x1ca>
 8007e52:	1b80      	subs	r0, r0, r6
 8007e54:	6060      	str	r0, [r4, #4]
 8007e56:	6863      	ldr	r3, [r4, #4]
 8007e58:	6123      	str	r3, [r4, #16]
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	9a04      	ldr	r2, [sp, #16]
 8007e5e:	7013      	strb	r3, [r2, #0]
 8007e60:	e7a8      	b.n	8007db4 <_printf_i+0x128>
 8007e62:	6923      	ldr	r3, [r4, #16]
 8007e64:	0032      	movs	r2, r6
 8007e66:	9906      	ldr	r1, [sp, #24]
 8007e68:	9805      	ldr	r0, [sp, #20]
 8007e6a:	9d07      	ldr	r5, [sp, #28]
 8007e6c:	47a8      	blx	r5
 8007e6e:	1c43      	adds	r3, r0, #1
 8007e70:	d0aa      	beq.n	8007dc8 <_printf_i+0x13c>
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	079b      	lsls	r3, r3, #30
 8007e76:	d415      	bmi.n	8007ea4 <_printf_i+0x218>
 8007e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e7a:	68e0      	ldr	r0, [r4, #12]
 8007e7c:	4298      	cmp	r0, r3
 8007e7e:	daa5      	bge.n	8007dcc <_printf_i+0x140>
 8007e80:	0018      	movs	r0, r3
 8007e82:	e7a3      	b.n	8007dcc <_printf_i+0x140>
 8007e84:	0022      	movs	r2, r4
 8007e86:	2301      	movs	r3, #1
 8007e88:	9906      	ldr	r1, [sp, #24]
 8007e8a:	9805      	ldr	r0, [sp, #20]
 8007e8c:	9e07      	ldr	r6, [sp, #28]
 8007e8e:	3219      	adds	r2, #25
 8007e90:	47b0      	blx	r6
 8007e92:	1c43      	adds	r3, r0, #1
 8007e94:	d098      	beq.n	8007dc8 <_printf_i+0x13c>
 8007e96:	3501      	adds	r5, #1
 8007e98:	68e3      	ldr	r3, [r4, #12]
 8007e9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e9c:	1a9b      	subs	r3, r3, r2
 8007e9e:	42ab      	cmp	r3, r5
 8007ea0:	dcf0      	bgt.n	8007e84 <_printf_i+0x1f8>
 8007ea2:	e7e9      	b.n	8007e78 <_printf_i+0x1ec>
 8007ea4:	2500      	movs	r5, #0
 8007ea6:	e7f7      	b.n	8007e98 <_printf_i+0x20c>
 8007ea8:	0800adc6 	.word	0x0800adc6
 8007eac:	0800add7 	.word	0x0800add7

08007eb0 <srand>:
 8007eb0:	4b11      	ldr	r3, [pc, #68]	; (8007ef8 <srand+0x48>)
 8007eb2:	b570      	push	{r4, r5, r6, lr}
 8007eb4:	681d      	ldr	r5, [r3, #0]
 8007eb6:	0004      	movs	r4, r0
 8007eb8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d116      	bne.n	8007eec <srand+0x3c>
 8007ebe:	2018      	movs	r0, #24
 8007ec0:	f000 ff6a 	bl	8008d98 <malloc>
 8007ec4:	1e02      	subs	r2, r0, #0
 8007ec6:	63a8      	str	r0, [r5, #56]	; 0x38
 8007ec8:	d104      	bne.n	8007ed4 <srand+0x24>
 8007eca:	2142      	movs	r1, #66	; 0x42
 8007ecc:	4b0b      	ldr	r3, [pc, #44]	; (8007efc <srand+0x4c>)
 8007ece:	480c      	ldr	r0, [pc, #48]	; (8007f00 <srand+0x50>)
 8007ed0:	f000 f88a 	bl	8007fe8 <__assert_func>
 8007ed4:	4b0b      	ldr	r3, [pc, #44]	; (8007f04 <srand+0x54>)
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	6003      	str	r3, [r0, #0]
 8007eda:	4b0b      	ldr	r3, [pc, #44]	; (8007f08 <srand+0x58>)
 8007edc:	6043      	str	r3, [r0, #4]
 8007ede:	4b0b      	ldr	r3, [pc, #44]	; (8007f0c <srand+0x5c>)
 8007ee0:	6083      	str	r3, [r0, #8]
 8007ee2:	230b      	movs	r3, #11
 8007ee4:	8183      	strh	r3, [r0, #12]
 8007ee6:	2001      	movs	r0, #1
 8007ee8:	6110      	str	r0, [r2, #16]
 8007eea:	6151      	str	r1, [r2, #20]
 8007eec:	2200      	movs	r2, #0
 8007eee:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007ef0:	611c      	str	r4, [r3, #16]
 8007ef2:	615a      	str	r2, [r3, #20]
 8007ef4:	bd70      	pop	{r4, r5, r6, pc}
 8007ef6:	46c0      	nop			; (mov r8, r8)
 8007ef8:	2000282c 	.word	0x2000282c
 8007efc:	0800ade8 	.word	0x0800ade8
 8007f00:	0800adff 	.word	0x0800adff
 8007f04:	abcd330e 	.word	0xabcd330e
 8007f08:	e66d1234 	.word	0xe66d1234
 8007f0c:	0005deec 	.word	0x0005deec

08007f10 <rand>:
 8007f10:	4b16      	ldr	r3, [pc, #88]	; (8007f6c <rand+0x5c>)
 8007f12:	b510      	push	{r4, lr}
 8007f14:	681c      	ldr	r4, [r3, #0]
 8007f16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d116      	bne.n	8007f4a <rand+0x3a>
 8007f1c:	2018      	movs	r0, #24
 8007f1e:	f000 ff3b 	bl	8008d98 <malloc>
 8007f22:	1e02      	subs	r2, r0, #0
 8007f24:	63a0      	str	r0, [r4, #56]	; 0x38
 8007f26:	d104      	bne.n	8007f32 <rand+0x22>
 8007f28:	214e      	movs	r1, #78	; 0x4e
 8007f2a:	4b11      	ldr	r3, [pc, #68]	; (8007f70 <rand+0x60>)
 8007f2c:	4811      	ldr	r0, [pc, #68]	; (8007f74 <rand+0x64>)
 8007f2e:	f000 f85b 	bl	8007fe8 <__assert_func>
 8007f32:	4b11      	ldr	r3, [pc, #68]	; (8007f78 <rand+0x68>)
 8007f34:	2100      	movs	r1, #0
 8007f36:	6003      	str	r3, [r0, #0]
 8007f38:	4b10      	ldr	r3, [pc, #64]	; (8007f7c <rand+0x6c>)
 8007f3a:	6043      	str	r3, [r0, #4]
 8007f3c:	4b10      	ldr	r3, [pc, #64]	; (8007f80 <rand+0x70>)
 8007f3e:	6083      	str	r3, [r0, #8]
 8007f40:	230b      	movs	r3, #11
 8007f42:	8183      	strh	r3, [r0, #12]
 8007f44:	2001      	movs	r0, #1
 8007f46:	6110      	str	r0, [r2, #16]
 8007f48:	6151      	str	r1, [r2, #20]
 8007f4a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8007f4c:	4a0d      	ldr	r2, [pc, #52]	; (8007f84 <rand+0x74>)
 8007f4e:	6920      	ldr	r0, [r4, #16]
 8007f50:	6961      	ldr	r1, [r4, #20]
 8007f52:	4b0d      	ldr	r3, [pc, #52]	; (8007f88 <rand+0x78>)
 8007f54:	f7f8 faa6 	bl	80004a4 <__aeabi_lmul>
 8007f58:	2201      	movs	r2, #1
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	1880      	adds	r0, r0, r2
 8007f5e:	4159      	adcs	r1, r3
 8007f60:	6120      	str	r0, [r4, #16]
 8007f62:	6161      	str	r1, [r4, #20]
 8007f64:	0048      	lsls	r0, r1, #1
 8007f66:	0840      	lsrs	r0, r0, #1
 8007f68:	bd10      	pop	{r4, pc}
 8007f6a:	46c0      	nop			; (mov r8, r8)
 8007f6c:	2000282c 	.word	0x2000282c
 8007f70:	0800ade8 	.word	0x0800ade8
 8007f74:	0800adff 	.word	0x0800adff
 8007f78:	abcd330e 	.word	0xabcd330e
 8007f7c:	e66d1234 	.word	0xe66d1234
 8007f80:	0005deec 	.word	0x0005deec
 8007f84:	4c957f2d 	.word	0x4c957f2d
 8007f88:	5851f42d 	.word	0x5851f42d

08007f8c <siprintf>:
 8007f8c:	b40e      	push	{r1, r2, r3}
 8007f8e:	b500      	push	{lr}
 8007f90:	490b      	ldr	r1, [pc, #44]	; (8007fc0 <siprintf+0x34>)
 8007f92:	b09c      	sub	sp, #112	; 0x70
 8007f94:	ab1d      	add	r3, sp, #116	; 0x74
 8007f96:	9002      	str	r0, [sp, #8]
 8007f98:	9006      	str	r0, [sp, #24]
 8007f9a:	9107      	str	r1, [sp, #28]
 8007f9c:	9104      	str	r1, [sp, #16]
 8007f9e:	4809      	ldr	r0, [pc, #36]	; (8007fc4 <siprintf+0x38>)
 8007fa0:	4909      	ldr	r1, [pc, #36]	; (8007fc8 <siprintf+0x3c>)
 8007fa2:	cb04      	ldmia	r3!, {r2}
 8007fa4:	9105      	str	r1, [sp, #20]
 8007fa6:	6800      	ldr	r0, [r0, #0]
 8007fa8:	a902      	add	r1, sp, #8
 8007faa:	9301      	str	r3, [sp, #4]
 8007fac:	f001 fc1e 	bl	80097ec <_svfiprintf_r>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	9a02      	ldr	r2, [sp, #8]
 8007fb4:	7013      	strb	r3, [r2, #0]
 8007fb6:	b01c      	add	sp, #112	; 0x70
 8007fb8:	bc08      	pop	{r3}
 8007fba:	b003      	add	sp, #12
 8007fbc:	4718      	bx	r3
 8007fbe:	46c0      	nop			; (mov r8, r8)
 8007fc0:	7fffffff 	.word	0x7fffffff
 8007fc4:	2000282c 	.word	0x2000282c
 8007fc8:	ffff0208 	.word	0xffff0208

08007fcc <strcat>:
 8007fcc:	0002      	movs	r2, r0
 8007fce:	b510      	push	{r4, lr}
 8007fd0:	7813      	ldrb	r3, [r2, #0]
 8007fd2:	0014      	movs	r4, r2
 8007fd4:	3201      	adds	r2, #1
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1fa      	bne.n	8007fd0 <strcat+0x4>
 8007fda:	5cca      	ldrb	r2, [r1, r3]
 8007fdc:	54e2      	strb	r2, [r4, r3]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	2a00      	cmp	r2, #0
 8007fe2:	d1fa      	bne.n	8007fda <strcat+0xe>
 8007fe4:	bd10      	pop	{r4, pc}
	...

08007fe8 <__assert_func>:
 8007fe8:	b530      	push	{r4, r5, lr}
 8007fea:	0014      	movs	r4, r2
 8007fec:	001a      	movs	r2, r3
 8007fee:	4b09      	ldr	r3, [pc, #36]	; (8008014 <__assert_func+0x2c>)
 8007ff0:	0005      	movs	r5, r0
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	b085      	sub	sp, #20
 8007ff6:	68d8      	ldr	r0, [r3, #12]
 8007ff8:	4b07      	ldr	r3, [pc, #28]	; (8008018 <__assert_func+0x30>)
 8007ffa:	2c00      	cmp	r4, #0
 8007ffc:	d101      	bne.n	8008002 <__assert_func+0x1a>
 8007ffe:	4b07      	ldr	r3, [pc, #28]	; (800801c <__assert_func+0x34>)
 8008000:	001c      	movs	r4, r3
 8008002:	9301      	str	r3, [sp, #4]
 8008004:	9100      	str	r1, [sp, #0]
 8008006:	002b      	movs	r3, r5
 8008008:	4905      	ldr	r1, [pc, #20]	; (8008020 <__assert_func+0x38>)
 800800a:	9402      	str	r4, [sp, #8]
 800800c:	f000 feb0 	bl	8008d70 <fiprintf>
 8008010:	f001 ff2e 	bl	8009e70 <abort>
 8008014:	2000282c 	.word	0x2000282c
 8008018:	0800ae5a 	.word	0x0800ae5a
 800801c:	0800ae95 	.word	0x0800ae95
 8008020:	0800ae67 	.word	0x0800ae67

08008024 <quorem>:
 8008024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008026:	0006      	movs	r6, r0
 8008028:	690b      	ldr	r3, [r1, #16]
 800802a:	6932      	ldr	r2, [r6, #16]
 800802c:	b087      	sub	sp, #28
 800802e:	2000      	movs	r0, #0
 8008030:	9103      	str	r1, [sp, #12]
 8008032:	429a      	cmp	r2, r3
 8008034:	db65      	blt.n	8008102 <quorem+0xde>
 8008036:	3b01      	subs	r3, #1
 8008038:	009c      	lsls	r4, r3, #2
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	000b      	movs	r3, r1
 800803e:	3314      	adds	r3, #20
 8008040:	9305      	str	r3, [sp, #20]
 8008042:	191b      	adds	r3, r3, r4
 8008044:	9304      	str	r3, [sp, #16]
 8008046:	0033      	movs	r3, r6
 8008048:	3314      	adds	r3, #20
 800804a:	9302      	str	r3, [sp, #8]
 800804c:	191c      	adds	r4, r3, r4
 800804e:	9b04      	ldr	r3, [sp, #16]
 8008050:	6827      	ldr	r7, [r4, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	0038      	movs	r0, r7
 8008056:	1c5d      	adds	r5, r3, #1
 8008058:	0029      	movs	r1, r5
 800805a:	9301      	str	r3, [sp, #4]
 800805c:	f7f8 f86e 	bl	800013c <__udivsi3>
 8008060:	9001      	str	r0, [sp, #4]
 8008062:	42af      	cmp	r7, r5
 8008064:	d324      	bcc.n	80080b0 <quorem+0x8c>
 8008066:	2500      	movs	r5, #0
 8008068:	46ac      	mov	ip, r5
 800806a:	9802      	ldr	r0, [sp, #8]
 800806c:	9f05      	ldr	r7, [sp, #20]
 800806e:	cf08      	ldmia	r7!, {r3}
 8008070:	9a01      	ldr	r2, [sp, #4]
 8008072:	b299      	uxth	r1, r3
 8008074:	4351      	muls	r1, r2
 8008076:	0c1b      	lsrs	r3, r3, #16
 8008078:	4353      	muls	r3, r2
 800807a:	1949      	adds	r1, r1, r5
 800807c:	0c0a      	lsrs	r2, r1, #16
 800807e:	189b      	adds	r3, r3, r2
 8008080:	6802      	ldr	r2, [r0, #0]
 8008082:	b289      	uxth	r1, r1
 8008084:	b292      	uxth	r2, r2
 8008086:	4462      	add	r2, ip
 8008088:	1a52      	subs	r2, r2, r1
 800808a:	6801      	ldr	r1, [r0, #0]
 800808c:	0c1d      	lsrs	r5, r3, #16
 800808e:	0c09      	lsrs	r1, r1, #16
 8008090:	b29b      	uxth	r3, r3
 8008092:	1acb      	subs	r3, r1, r3
 8008094:	1411      	asrs	r1, r2, #16
 8008096:	185b      	adds	r3, r3, r1
 8008098:	1419      	asrs	r1, r3, #16
 800809a:	b292      	uxth	r2, r2
 800809c:	041b      	lsls	r3, r3, #16
 800809e:	431a      	orrs	r2, r3
 80080a0:	9b04      	ldr	r3, [sp, #16]
 80080a2:	468c      	mov	ip, r1
 80080a4:	c004      	stmia	r0!, {r2}
 80080a6:	42bb      	cmp	r3, r7
 80080a8:	d2e1      	bcs.n	800806e <quorem+0x4a>
 80080aa:	6823      	ldr	r3, [r4, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d030      	beq.n	8008112 <quorem+0xee>
 80080b0:	0030      	movs	r0, r6
 80080b2:	9903      	ldr	r1, [sp, #12]
 80080b4:	f001 f912 	bl	80092dc <__mcmp>
 80080b8:	2800      	cmp	r0, #0
 80080ba:	db21      	blt.n	8008100 <quorem+0xdc>
 80080bc:	0030      	movs	r0, r6
 80080be:	2400      	movs	r4, #0
 80080c0:	9b01      	ldr	r3, [sp, #4]
 80080c2:	9903      	ldr	r1, [sp, #12]
 80080c4:	3301      	adds	r3, #1
 80080c6:	9301      	str	r3, [sp, #4]
 80080c8:	3014      	adds	r0, #20
 80080ca:	3114      	adds	r1, #20
 80080cc:	6803      	ldr	r3, [r0, #0]
 80080ce:	c920      	ldmia	r1!, {r5}
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	1914      	adds	r4, r2, r4
 80080d4:	b2aa      	uxth	r2, r5
 80080d6:	1aa2      	subs	r2, r4, r2
 80080d8:	0c1b      	lsrs	r3, r3, #16
 80080da:	0c2d      	lsrs	r5, r5, #16
 80080dc:	1414      	asrs	r4, r2, #16
 80080de:	1b5b      	subs	r3, r3, r5
 80080e0:	191b      	adds	r3, r3, r4
 80080e2:	141c      	asrs	r4, r3, #16
 80080e4:	b292      	uxth	r2, r2
 80080e6:	041b      	lsls	r3, r3, #16
 80080e8:	4313      	orrs	r3, r2
 80080ea:	c008      	stmia	r0!, {r3}
 80080ec:	9b04      	ldr	r3, [sp, #16]
 80080ee:	428b      	cmp	r3, r1
 80080f0:	d2ec      	bcs.n	80080cc <quorem+0xa8>
 80080f2:	9b00      	ldr	r3, [sp, #0]
 80080f4:	9a02      	ldr	r2, [sp, #8]
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	18d3      	adds	r3, r2, r3
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	2a00      	cmp	r2, #0
 80080fe:	d015      	beq.n	800812c <quorem+0x108>
 8008100:	9801      	ldr	r0, [sp, #4]
 8008102:	b007      	add	sp, #28
 8008104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008106:	6823      	ldr	r3, [r4, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d106      	bne.n	800811a <quorem+0xf6>
 800810c:	9b00      	ldr	r3, [sp, #0]
 800810e:	3b01      	subs	r3, #1
 8008110:	9300      	str	r3, [sp, #0]
 8008112:	9b02      	ldr	r3, [sp, #8]
 8008114:	3c04      	subs	r4, #4
 8008116:	42a3      	cmp	r3, r4
 8008118:	d3f5      	bcc.n	8008106 <quorem+0xe2>
 800811a:	9b00      	ldr	r3, [sp, #0]
 800811c:	6133      	str	r3, [r6, #16]
 800811e:	e7c7      	b.n	80080b0 <quorem+0x8c>
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	2a00      	cmp	r2, #0
 8008124:	d106      	bne.n	8008134 <quorem+0x110>
 8008126:	9a00      	ldr	r2, [sp, #0]
 8008128:	3a01      	subs	r2, #1
 800812a:	9200      	str	r2, [sp, #0]
 800812c:	9a02      	ldr	r2, [sp, #8]
 800812e:	3b04      	subs	r3, #4
 8008130:	429a      	cmp	r2, r3
 8008132:	d3f5      	bcc.n	8008120 <quorem+0xfc>
 8008134:	9b00      	ldr	r3, [sp, #0]
 8008136:	6133      	str	r3, [r6, #16]
 8008138:	e7e2      	b.n	8008100 <quorem+0xdc>
	...

0800813c <_dtoa_r>:
 800813c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800813e:	b09d      	sub	sp, #116	; 0x74
 8008140:	9202      	str	r2, [sp, #8]
 8008142:	9303      	str	r3, [sp, #12]
 8008144:	9b02      	ldr	r3, [sp, #8]
 8008146:	9c03      	ldr	r4, [sp, #12]
 8008148:	9308      	str	r3, [sp, #32]
 800814a:	9409      	str	r4, [sp, #36]	; 0x24
 800814c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800814e:	0007      	movs	r7, r0
 8008150:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8008152:	2c00      	cmp	r4, #0
 8008154:	d10e      	bne.n	8008174 <_dtoa_r+0x38>
 8008156:	2010      	movs	r0, #16
 8008158:	f000 fe1e 	bl	8008d98 <malloc>
 800815c:	1e02      	subs	r2, r0, #0
 800815e:	6278      	str	r0, [r7, #36]	; 0x24
 8008160:	d104      	bne.n	800816c <_dtoa_r+0x30>
 8008162:	21ea      	movs	r1, #234	; 0xea
 8008164:	4bc7      	ldr	r3, [pc, #796]	; (8008484 <_dtoa_r+0x348>)
 8008166:	48c8      	ldr	r0, [pc, #800]	; (8008488 <_dtoa_r+0x34c>)
 8008168:	f7ff ff3e 	bl	8007fe8 <__assert_func>
 800816c:	6044      	str	r4, [r0, #4]
 800816e:	6084      	str	r4, [r0, #8]
 8008170:	6004      	str	r4, [r0, #0]
 8008172:	60c4      	str	r4, [r0, #12]
 8008174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008176:	6819      	ldr	r1, [r3, #0]
 8008178:	2900      	cmp	r1, #0
 800817a:	d00a      	beq.n	8008192 <_dtoa_r+0x56>
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	2301      	movs	r3, #1
 8008180:	4093      	lsls	r3, r2
 8008182:	604a      	str	r2, [r1, #4]
 8008184:	608b      	str	r3, [r1, #8]
 8008186:	0038      	movs	r0, r7
 8008188:	f000 fe68 	bl	8008e5c <_Bfree>
 800818c:	2200      	movs	r2, #0
 800818e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008190:	601a      	str	r2, [r3, #0]
 8008192:	9b03      	ldr	r3, [sp, #12]
 8008194:	2b00      	cmp	r3, #0
 8008196:	da20      	bge.n	80081da <_dtoa_r+0x9e>
 8008198:	2301      	movs	r3, #1
 800819a:	602b      	str	r3, [r5, #0]
 800819c:	9b03      	ldr	r3, [sp, #12]
 800819e:	005b      	lsls	r3, r3, #1
 80081a0:	085b      	lsrs	r3, r3, #1
 80081a2:	9309      	str	r3, [sp, #36]	; 0x24
 80081a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80081a6:	4bb9      	ldr	r3, [pc, #740]	; (800848c <_dtoa_r+0x350>)
 80081a8:	4ab8      	ldr	r2, [pc, #736]	; (800848c <_dtoa_r+0x350>)
 80081aa:	402b      	ands	r3, r5
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d117      	bne.n	80081e0 <_dtoa_r+0xa4>
 80081b0:	4bb7      	ldr	r3, [pc, #732]	; (8008490 <_dtoa_r+0x354>)
 80081b2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80081b4:	0328      	lsls	r0, r5, #12
 80081b6:	6013      	str	r3, [r2, #0]
 80081b8:	9b02      	ldr	r3, [sp, #8]
 80081ba:	0b00      	lsrs	r0, r0, #12
 80081bc:	4318      	orrs	r0, r3
 80081be:	d101      	bne.n	80081c4 <_dtoa_r+0x88>
 80081c0:	f000 fdbf 	bl	8008d42 <_dtoa_r+0xc06>
 80081c4:	48b3      	ldr	r0, [pc, #716]	; (8008494 <_dtoa_r+0x358>)
 80081c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80081c8:	9006      	str	r0, [sp, #24]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d002      	beq.n	80081d4 <_dtoa_r+0x98>
 80081ce:	4bb2      	ldr	r3, [pc, #712]	; (8008498 <_dtoa_r+0x35c>)
 80081d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80081d2:	6013      	str	r3, [r2, #0]
 80081d4:	9806      	ldr	r0, [sp, #24]
 80081d6:	b01d      	add	sp, #116	; 0x74
 80081d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081da:	2300      	movs	r3, #0
 80081dc:	602b      	str	r3, [r5, #0]
 80081de:	e7e1      	b.n	80081a4 <_dtoa_r+0x68>
 80081e0:	9b08      	ldr	r3, [sp, #32]
 80081e2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80081e4:	9312      	str	r3, [sp, #72]	; 0x48
 80081e6:	9413      	str	r4, [sp, #76]	; 0x4c
 80081e8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80081ea:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80081ec:	2200      	movs	r2, #0
 80081ee:	2300      	movs	r3, #0
 80081f0:	f7f8 f92a 	bl	8000448 <__aeabi_dcmpeq>
 80081f4:	1e04      	subs	r4, r0, #0
 80081f6:	d009      	beq.n	800820c <_dtoa_r+0xd0>
 80081f8:	2301      	movs	r3, #1
 80081fa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80081fc:	6013      	str	r3, [r2, #0]
 80081fe:	4ba7      	ldr	r3, [pc, #668]	; (800849c <_dtoa_r+0x360>)
 8008200:	9306      	str	r3, [sp, #24]
 8008202:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008204:	2b00      	cmp	r3, #0
 8008206:	d0e5      	beq.n	80081d4 <_dtoa_r+0x98>
 8008208:	4ba5      	ldr	r3, [pc, #660]	; (80084a0 <_dtoa_r+0x364>)
 800820a:	e7e1      	b.n	80081d0 <_dtoa_r+0x94>
 800820c:	ab1a      	add	r3, sp, #104	; 0x68
 800820e:	9301      	str	r3, [sp, #4]
 8008210:	ab1b      	add	r3, sp, #108	; 0x6c
 8008212:	9300      	str	r3, [sp, #0]
 8008214:	0038      	movs	r0, r7
 8008216:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008218:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800821a:	f001 f913 	bl	8009444 <__d2b>
 800821e:	006e      	lsls	r6, r5, #1
 8008220:	9005      	str	r0, [sp, #20]
 8008222:	0d76      	lsrs	r6, r6, #21
 8008224:	d100      	bne.n	8008228 <_dtoa_r+0xec>
 8008226:	e07c      	b.n	8008322 <_dtoa_r+0x1e6>
 8008228:	9812      	ldr	r0, [sp, #72]	; 0x48
 800822a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800822c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800822e:	4a9d      	ldr	r2, [pc, #628]	; (80084a4 <_dtoa_r+0x368>)
 8008230:	031b      	lsls	r3, r3, #12
 8008232:	0b1b      	lsrs	r3, r3, #12
 8008234:	431a      	orrs	r2, r3
 8008236:	0011      	movs	r1, r2
 8008238:	4b9b      	ldr	r3, [pc, #620]	; (80084a8 <_dtoa_r+0x36c>)
 800823a:	9418      	str	r4, [sp, #96]	; 0x60
 800823c:	18f6      	adds	r6, r6, r3
 800823e:	2200      	movs	r2, #0
 8008240:	4b9a      	ldr	r3, [pc, #616]	; (80084ac <_dtoa_r+0x370>)
 8008242:	f7f9 ff35 	bl	80020b0 <__aeabi_dsub>
 8008246:	4a9a      	ldr	r2, [pc, #616]	; (80084b0 <_dtoa_r+0x374>)
 8008248:	4b9a      	ldr	r3, [pc, #616]	; (80084b4 <_dtoa_r+0x378>)
 800824a:	f7f9 fcc5 	bl	8001bd8 <__aeabi_dmul>
 800824e:	4a9a      	ldr	r2, [pc, #616]	; (80084b8 <_dtoa_r+0x37c>)
 8008250:	4b9a      	ldr	r3, [pc, #616]	; (80084bc <_dtoa_r+0x380>)
 8008252:	f7f8 fd83 	bl	8000d5c <__aeabi_dadd>
 8008256:	0004      	movs	r4, r0
 8008258:	0030      	movs	r0, r6
 800825a:	000d      	movs	r5, r1
 800825c:	f7fa fb0e 	bl	800287c <__aeabi_i2d>
 8008260:	4a97      	ldr	r2, [pc, #604]	; (80084c0 <_dtoa_r+0x384>)
 8008262:	4b98      	ldr	r3, [pc, #608]	; (80084c4 <_dtoa_r+0x388>)
 8008264:	f7f9 fcb8 	bl	8001bd8 <__aeabi_dmul>
 8008268:	0002      	movs	r2, r0
 800826a:	000b      	movs	r3, r1
 800826c:	0020      	movs	r0, r4
 800826e:	0029      	movs	r1, r5
 8008270:	f7f8 fd74 	bl	8000d5c <__aeabi_dadd>
 8008274:	0004      	movs	r4, r0
 8008276:	000d      	movs	r5, r1
 8008278:	f7fa faca 	bl	8002810 <__aeabi_d2iz>
 800827c:	2200      	movs	r2, #0
 800827e:	9002      	str	r0, [sp, #8]
 8008280:	2300      	movs	r3, #0
 8008282:	0020      	movs	r0, r4
 8008284:	0029      	movs	r1, r5
 8008286:	f7f8 f8e5 	bl	8000454 <__aeabi_dcmplt>
 800828a:	2800      	cmp	r0, #0
 800828c:	d00b      	beq.n	80082a6 <_dtoa_r+0x16a>
 800828e:	9802      	ldr	r0, [sp, #8]
 8008290:	f7fa faf4 	bl	800287c <__aeabi_i2d>
 8008294:	002b      	movs	r3, r5
 8008296:	0022      	movs	r2, r4
 8008298:	f7f8 f8d6 	bl	8000448 <__aeabi_dcmpeq>
 800829c:	4243      	negs	r3, r0
 800829e:	4158      	adcs	r0, r3
 80082a0:	9b02      	ldr	r3, [sp, #8]
 80082a2:	1a1b      	subs	r3, r3, r0
 80082a4:	9302      	str	r3, [sp, #8]
 80082a6:	2301      	movs	r3, #1
 80082a8:	9316      	str	r3, [sp, #88]	; 0x58
 80082aa:	9b02      	ldr	r3, [sp, #8]
 80082ac:	2b16      	cmp	r3, #22
 80082ae:	d80f      	bhi.n	80082d0 <_dtoa_r+0x194>
 80082b0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80082b2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80082b4:	00da      	lsls	r2, r3, #3
 80082b6:	4b84      	ldr	r3, [pc, #528]	; (80084c8 <_dtoa_r+0x38c>)
 80082b8:	189b      	adds	r3, r3, r2
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	f7f8 f8c9 	bl	8000454 <__aeabi_dcmplt>
 80082c2:	2800      	cmp	r0, #0
 80082c4:	d049      	beq.n	800835a <_dtoa_r+0x21e>
 80082c6:	9b02      	ldr	r3, [sp, #8]
 80082c8:	3b01      	subs	r3, #1
 80082ca:	9302      	str	r3, [sp, #8]
 80082cc:	2300      	movs	r3, #0
 80082ce:	9316      	str	r3, [sp, #88]	; 0x58
 80082d0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80082d2:	1b9e      	subs	r6, r3, r6
 80082d4:	2300      	movs	r3, #0
 80082d6:	930a      	str	r3, [sp, #40]	; 0x28
 80082d8:	0033      	movs	r3, r6
 80082da:	3b01      	subs	r3, #1
 80082dc:	930d      	str	r3, [sp, #52]	; 0x34
 80082de:	d504      	bpl.n	80082ea <_dtoa_r+0x1ae>
 80082e0:	2301      	movs	r3, #1
 80082e2:	1b9b      	subs	r3, r3, r6
 80082e4:	930a      	str	r3, [sp, #40]	; 0x28
 80082e6:	2300      	movs	r3, #0
 80082e8:	930d      	str	r3, [sp, #52]	; 0x34
 80082ea:	9b02      	ldr	r3, [sp, #8]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	db36      	blt.n	800835e <_dtoa_r+0x222>
 80082f0:	9a02      	ldr	r2, [sp, #8]
 80082f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082f4:	4694      	mov	ip, r2
 80082f6:	4463      	add	r3, ip
 80082f8:	930d      	str	r3, [sp, #52]	; 0x34
 80082fa:	2300      	movs	r3, #0
 80082fc:	9215      	str	r2, [sp, #84]	; 0x54
 80082fe:	930e      	str	r3, [sp, #56]	; 0x38
 8008300:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008302:	2401      	movs	r4, #1
 8008304:	2b09      	cmp	r3, #9
 8008306:	d864      	bhi.n	80083d2 <_dtoa_r+0x296>
 8008308:	2b05      	cmp	r3, #5
 800830a:	dd02      	ble.n	8008312 <_dtoa_r+0x1d6>
 800830c:	2400      	movs	r4, #0
 800830e:	3b04      	subs	r3, #4
 8008310:	9322      	str	r3, [sp, #136]	; 0x88
 8008312:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008314:	1e98      	subs	r0, r3, #2
 8008316:	2803      	cmp	r0, #3
 8008318:	d864      	bhi.n	80083e4 <_dtoa_r+0x2a8>
 800831a:	f7f7 fefb 	bl	8000114 <__gnu_thumb1_case_uqi>
 800831e:	3829      	.short	0x3829
 8008320:	5836      	.short	0x5836
 8008322:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008324:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008326:	189e      	adds	r6, r3, r2
 8008328:	4b68      	ldr	r3, [pc, #416]	; (80084cc <_dtoa_r+0x390>)
 800832a:	18f2      	adds	r2, r6, r3
 800832c:	2a20      	cmp	r2, #32
 800832e:	dd0f      	ble.n	8008350 <_dtoa_r+0x214>
 8008330:	2340      	movs	r3, #64	; 0x40
 8008332:	1a9b      	subs	r3, r3, r2
 8008334:	409d      	lsls	r5, r3
 8008336:	4b66      	ldr	r3, [pc, #408]	; (80084d0 <_dtoa_r+0x394>)
 8008338:	9802      	ldr	r0, [sp, #8]
 800833a:	18f3      	adds	r3, r6, r3
 800833c:	40d8      	lsrs	r0, r3
 800833e:	4328      	orrs	r0, r5
 8008340:	f7fa facc 	bl	80028dc <__aeabi_ui2d>
 8008344:	2301      	movs	r3, #1
 8008346:	4c63      	ldr	r4, [pc, #396]	; (80084d4 <_dtoa_r+0x398>)
 8008348:	3e01      	subs	r6, #1
 800834a:	1909      	adds	r1, r1, r4
 800834c:	9318      	str	r3, [sp, #96]	; 0x60
 800834e:	e776      	b.n	800823e <_dtoa_r+0x102>
 8008350:	2320      	movs	r3, #32
 8008352:	9802      	ldr	r0, [sp, #8]
 8008354:	1a9b      	subs	r3, r3, r2
 8008356:	4098      	lsls	r0, r3
 8008358:	e7f2      	b.n	8008340 <_dtoa_r+0x204>
 800835a:	9016      	str	r0, [sp, #88]	; 0x58
 800835c:	e7b8      	b.n	80082d0 <_dtoa_r+0x194>
 800835e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008360:	9a02      	ldr	r2, [sp, #8]
 8008362:	1a9b      	subs	r3, r3, r2
 8008364:	930a      	str	r3, [sp, #40]	; 0x28
 8008366:	4253      	negs	r3, r2
 8008368:	930e      	str	r3, [sp, #56]	; 0x38
 800836a:	2300      	movs	r3, #0
 800836c:	9315      	str	r3, [sp, #84]	; 0x54
 800836e:	e7c7      	b.n	8008300 <_dtoa_r+0x1c4>
 8008370:	2300      	movs	r3, #0
 8008372:	930f      	str	r3, [sp, #60]	; 0x3c
 8008374:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008376:	930c      	str	r3, [sp, #48]	; 0x30
 8008378:	9307      	str	r3, [sp, #28]
 800837a:	2b00      	cmp	r3, #0
 800837c:	dc13      	bgt.n	80083a6 <_dtoa_r+0x26a>
 800837e:	2301      	movs	r3, #1
 8008380:	001a      	movs	r2, r3
 8008382:	930c      	str	r3, [sp, #48]	; 0x30
 8008384:	9307      	str	r3, [sp, #28]
 8008386:	9223      	str	r2, [sp, #140]	; 0x8c
 8008388:	e00d      	b.n	80083a6 <_dtoa_r+0x26a>
 800838a:	2301      	movs	r3, #1
 800838c:	e7f1      	b.n	8008372 <_dtoa_r+0x236>
 800838e:	2300      	movs	r3, #0
 8008390:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008392:	930f      	str	r3, [sp, #60]	; 0x3c
 8008394:	4694      	mov	ip, r2
 8008396:	9b02      	ldr	r3, [sp, #8]
 8008398:	4463      	add	r3, ip
 800839a:	930c      	str	r3, [sp, #48]	; 0x30
 800839c:	3301      	adds	r3, #1
 800839e:	9307      	str	r3, [sp, #28]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	dc00      	bgt.n	80083a6 <_dtoa_r+0x26a>
 80083a4:	2301      	movs	r3, #1
 80083a6:	2200      	movs	r2, #0
 80083a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083aa:	6042      	str	r2, [r0, #4]
 80083ac:	3204      	adds	r2, #4
 80083ae:	0015      	movs	r5, r2
 80083b0:	3514      	adds	r5, #20
 80083b2:	6841      	ldr	r1, [r0, #4]
 80083b4:	429d      	cmp	r5, r3
 80083b6:	d919      	bls.n	80083ec <_dtoa_r+0x2b0>
 80083b8:	0038      	movs	r0, r7
 80083ba:	f000 fd0b 	bl	8008dd4 <_Balloc>
 80083be:	9006      	str	r0, [sp, #24]
 80083c0:	2800      	cmp	r0, #0
 80083c2:	d117      	bne.n	80083f4 <_dtoa_r+0x2b8>
 80083c4:	21d5      	movs	r1, #213	; 0xd5
 80083c6:	0002      	movs	r2, r0
 80083c8:	4b43      	ldr	r3, [pc, #268]	; (80084d8 <_dtoa_r+0x39c>)
 80083ca:	0049      	lsls	r1, r1, #1
 80083cc:	e6cb      	b.n	8008166 <_dtoa_r+0x2a>
 80083ce:	2301      	movs	r3, #1
 80083d0:	e7de      	b.n	8008390 <_dtoa_r+0x254>
 80083d2:	2300      	movs	r3, #0
 80083d4:	940f      	str	r4, [sp, #60]	; 0x3c
 80083d6:	9322      	str	r3, [sp, #136]	; 0x88
 80083d8:	3b01      	subs	r3, #1
 80083da:	930c      	str	r3, [sp, #48]	; 0x30
 80083dc:	9307      	str	r3, [sp, #28]
 80083de:	2200      	movs	r2, #0
 80083e0:	3313      	adds	r3, #19
 80083e2:	e7d0      	b.n	8008386 <_dtoa_r+0x24a>
 80083e4:	2301      	movs	r3, #1
 80083e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80083e8:	3b02      	subs	r3, #2
 80083ea:	e7f6      	b.n	80083da <_dtoa_r+0x29e>
 80083ec:	3101      	adds	r1, #1
 80083ee:	6041      	str	r1, [r0, #4]
 80083f0:	0052      	lsls	r2, r2, #1
 80083f2:	e7dc      	b.n	80083ae <_dtoa_r+0x272>
 80083f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f6:	9a06      	ldr	r2, [sp, #24]
 80083f8:	601a      	str	r2, [r3, #0]
 80083fa:	9b07      	ldr	r3, [sp, #28]
 80083fc:	2b0e      	cmp	r3, #14
 80083fe:	d900      	bls.n	8008402 <_dtoa_r+0x2c6>
 8008400:	e0eb      	b.n	80085da <_dtoa_r+0x49e>
 8008402:	2c00      	cmp	r4, #0
 8008404:	d100      	bne.n	8008408 <_dtoa_r+0x2cc>
 8008406:	e0e8      	b.n	80085da <_dtoa_r+0x49e>
 8008408:	9b02      	ldr	r3, [sp, #8]
 800840a:	2b00      	cmp	r3, #0
 800840c:	dd68      	ble.n	80084e0 <_dtoa_r+0x3a4>
 800840e:	001a      	movs	r2, r3
 8008410:	210f      	movs	r1, #15
 8008412:	4b2d      	ldr	r3, [pc, #180]	; (80084c8 <_dtoa_r+0x38c>)
 8008414:	400a      	ands	r2, r1
 8008416:	00d2      	lsls	r2, r2, #3
 8008418:	189b      	adds	r3, r3, r2
 800841a:	681d      	ldr	r5, [r3, #0]
 800841c:	685e      	ldr	r6, [r3, #4]
 800841e:	9b02      	ldr	r3, [sp, #8]
 8008420:	111c      	asrs	r4, r3, #4
 8008422:	2302      	movs	r3, #2
 8008424:	9310      	str	r3, [sp, #64]	; 0x40
 8008426:	9b02      	ldr	r3, [sp, #8]
 8008428:	05db      	lsls	r3, r3, #23
 800842a:	d50b      	bpl.n	8008444 <_dtoa_r+0x308>
 800842c:	4b2b      	ldr	r3, [pc, #172]	; (80084dc <_dtoa_r+0x3a0>)
 800842e:	400c      	ands	r4, r1
 8008430:	6a1a      	ldr	r2, [r3, #32]
 8008432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008434:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008436:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008438:	f7f8 ffcc 	bl	80013d4 <__aeabi_ddiv>
 800843c:	2303      	movs	r3, #3
 800843e:	9008      	str	r0, [sp, #32]
 8008440:	9109      	str	r1, [sp, #36]	; 0x24
 8008442:	9310      	str	r3, [sp, #64]	; 0x40
 8008444:	4b25      	ldr	r3, [pc, #148]	; (80084dc <_dtoa_r+0x3a0>)
 8008446:	9314      	str	r3, [sp, #80]	; 0x50
 8008448:	2c00      	cmp	r4, #0
 800844a:	d108      	bne.n	800845e <_dtoa_r+0x322>
 800844c:	9808      	ldr	r0, [sp, #32]
 800844e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008450:	002a      	movs	r2, r5
 8008452:	0033      	movs	r3, r6
 8008454:	f7f8 ffbe 	bl	80013d4 <__aeabi_ddiv>
 8008458:	9008      	str	r0, [sp, #32]
 800845a:	9109      	str	r1, [sp, #36]	; 0x24
 800845c:	e05c      	b.n	8008518 <_dtoa_r+0x3dc>
 800845e:	2301      	movs	r3, #1
 8008460:	421c      	tst	r4, r3
 8008462:	d00b      	beq.n	800847c <_dtoa_r+0x340>
 8008464:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008466:	0028      	movs	r0, r5
 8008468:	3301      	adds	r3, #1
 800846a:	9310      	str	r3, [sp, #64]	; 0x40
 800846c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800846e:	0031      	movs	r1, r6
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	f7f9 fbb0 	bl	8001bd8 <__aeabi_dmul>
 8008478:	0005      	movs	r5, r0
 800847a:	000e      	movs	r6, r1
 800847c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800847e:	1064      	asrs	r4, r4, #1
 8008480:	3308      	adds	r3, #8
 8008482:	e7e0      	b.n	8008446 <_dtoa_r+0x30a>
 8008484:	0800ade8 	.word	0x0800ade8
 8008488:	0800aea3 	.word	0x0800aea3
 800848c:	7ff00000 	.word	0x7ff00000
 8008490:	0000270f 	.word	0x0000270f
 8008494:	0800ae9f 	.word	0x0800ae9f
 8008498:	0800aea2 	.word	0x0800aea2
 800849c:	0800adc4 	.word	0x0800adc4
 80084a0:	0800adc5 	.word	0x0800adc5
 80084a4:	3ff00000 	.word	0x3ff00000
 80084a8:	fffffc01 	.word	0xfffffc01
 80084ac:	3ff80000 	.word	0x3ff80000
 80084b0:	636f4361 	.word	0x636f4361
 80084b4:	3fd287a7 	.word	0x3fd287a7
 80084b8:	8b60c8b3 	.word	0x8b60c8b3
 80084bc:	3fc68a28 	.word	0x3fc68a28
 80084c0:	509f79fb 	.word	0x509f79fb
 80084c4:	3fd34413 	.word	0x3fd34413
 80084c8:	0800af98 	.word	0x0800af98
 80084cc:	00000432 	.word	0x00000432
 80084d0:	00000412 	.word	0x00000412
 80084d4:	fe100000 	.word	0xfe100000
 80084d8:	0800aefe 	.word	0x0800aefe
 80084dc:	0800af70 	.word	0x0800af70
 80084e0:	2302      	movs	r3, #2
 80084e2:	9310      	str	r3, [sp, #64]	; 0x40
 80084e4:	9b02      	ldr	r3, [sp, #8]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d016      	beq.n	8008518 <_dtoa_r+0x3dc>
 80084ea:	9812      	ldr	r0, [sp, #72]	; 0x48
 80084ec:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80084ee:	425c      	negs	r4, r3
 80084f0:	230f      	movs	r3, #15
 80084f2:	4ab6      	ldr	r2, [pc, #728]	; (80087cc <_dtoa_r+0x690>)
 80084f4:	4023      	ands	r3, r4
 80084f6:	00db      	lsls	r3, r3, #3
 80084f8:	18d3      	adds	r3, r2, r3
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	f7f9 fb6b 	bl	8001bd8 <__aeabi_dmul>
 8008502:	2601      	movs	r6, #1
 8008504:	2300      	movs	r3, #0
 8008506:	9008      	str	r0, [sp, #32]
 8008508:	9109      	str	r1, [sp, #36]	; 0x24
 800850a:	4db1      	ldr	r5, [pc, #708]	; (80087d0 <_dtoa_r+0x694>)
 800850c:	1124      	asrs	r4, r4, #4
 800850e:	2c00      	cmp	r4, #0
 8008510:	d000      	beq.n	8008514 <_dtoa_r+0x3d8>
 8008512:	e094      	b.n	800863e <_dtoa_r+0x502>
 8008514:	2b00      	cmp	r3, #0
 8008516:	d19f      	bne.n	8008458 <_dtoa_r+0x31c>
 8008518:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800851a:	2b00      	cmp	r3, #0
 800851c:	d100      	bne.n	8008520 <_dtoa_r+0x3e4>
 800851e:	e09b      	b.n	8008658 <_dtoa_r+0x51c>
 8008520:	9c08      	ldr	r4, [sp, #32]
 8008522:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008524:	2200      	movs	r2, #0
 8008526:	0020      	movs	r0, r4
 8008528:	0029      	movs	r1, r5
 800852a:	4baa      	ldr	r3, [pc, #680]	; (80087d4 <_dtoa_r+0x698>)
 800852c:	f7f7 ff92 	bl	8000454 <__aeabi_dcmplt>
 8008530:	2800      	cmp	r0, #0
 8008532:	d100      	bne.n	8008536 <_dtoa_r+0x3fa>
 8008534:	e090      	b.n	8008658 <_dtoa_r+0x51c>
 8008536:	9b07      	ldr	r3, [sp, #28]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d100      	bne.n	800853e <_dtoa_r+0x402>
 800853c:	e08c      	b.n	8008658 <_dtoa_r+0x51c>
 800853e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008540:	2b00      	cmp	r3, #0
 8008542:	dd46      	ble.n	80085d2 <_dtoa_r+0x496>
 8008544:	9b02      	ldr	r3, [sp, #8]
 8008546:	2200      	movs	r2, #0
 8008548:	0020      	movs	r0, r4
 800854a:	0029      	movs	r1, r5
 800854c:	1e5e      	subs	r6, r3, #1
 800854e:	4ba2      	ldr	r3, [pc, #648]	; (80087d8 <_dtoa_r+0x69c>)
 8008550:	f7f9 fb42 	bl	8001bd8 <__aeabi_dmul>
 8008554:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008556:	9008      	str	r0, [sp, #32]
 8008558:	9109      	str	r1, [sp, #36]	; 0x24
 800855a:	3301      	adds	r3, #1
 800855c:	9310      	str	r3, [sp, #64]	; 0x40
 800855e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008560:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008562:	9c08      	ldr	r4, [sp, #32]
 8008564:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008566:	9314      	str	r3, [sp, #80]	; 0x50
 8008568:	f7fa f988 	bl	800287c <__aeabi_i2d>
 800856c:	0022      	movs	r2, r4
 800856e:	002b      	movs	r3, r5
 8008570:	f7f9 fb32 	bl	8001bd8 <__aeabi_dmul>
 8008574:	2200      	movs	r2, #0
 8008576:	4b99      	ldr	r3, [pc, #612]	; (80087dc <_dtoa_r+0x6a0>)
 8008578:	f7f8 fbf0 	bl	8000d5c <__aeabi_dadd>
 800857c:	9010      	str	r0, [sp, #64]	; 0x40
 800857e:	9111      	str	r1, [sp, #68]	; 0x44
 8008580:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008582:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008584:	9208      	str	r2, [sp, #32]
 8008586:	9309      	str	r3, [sp, #36]	; 0x24
 8008588:	4a95      	ldr	r2, [pc, #596]	; (80087e0 <_dtoa_r+0x6a4>)
 800858a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800858c:	4694      	mov	ip, r2
 800858e:	4463      	add	r3, ip
 8008590:	9317      	str	r3, [sp, #92]	; 0x5c
 8008592:	9309      	str	r3, [sp, #36]	; 0x24
 8008594:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008596:	2b00      	cmp	r3, #0
 8008598:	d161      	bne.n	800865e <_dtoa_r+0x522>
 800859a:	2200      	movs	r2, #0
 800859c:	0020      	movs	r0, r4
 800859e:	0029      	movs	r1, r5
 80085a0:	4b90      	ldr	r3, [pc, #576]	; (80087e4 <_dtoa_r+0x6a8>)
 80085a2:	f7f9 fd85 	bl	80020b0 <__aeabi_dsub>
 80085a6:	9a08      	ldr	r2, [sp, #32]
 80085a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085aa:	0004      	movs	r4, r0
 80085ac:	000d      	movs	r5, r1
 80085ae:	f7f7 ff65 	bl	800047c <__aeabi_dcmpgt>
 80085b2:	2800      	cmp	r0, #0
 80085b4:	d000      	beq.n	80085b8 <_dtoa_r+0x47c>
 80085b6:	e2af      	b.n	8008b18 <_dtoa_r+0x9dc>
 80085b8:	488b      	ldr	r0, [pc, #556]	; (80087e8 <_dtoa_r+0x6ac>)
 80085ba:	9911      	ldr	r1, [sp, #68]	; 0x44
 80085bc:	4684      	mov	ip, r0
 80085be:	4461      	add	r1, ip
 80085c0:	000b      	movs	r3, r1
 80085c2:	0020      	movs	r0, r4
 80085c4:	0029      	movs	r1, r5
 80085c6:	9a08      	ldr	r2, [sp, #32]
 80085c8:	f7f7 ff44 	bl	8000454 <__aeabi_dcmplt>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d000      	beq.n	80085d2 <_dtoa_r+0x496>
 80085d0:	e29f      	b.n	8008b12 <_dtoa_r+0x9d6>
 80085d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085d4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80085d6:	9308      	str	r3, [sp, #32]
 80085d8:	9409      	str	r4, [sp, #36]	; 0x24
 80085da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80085dc:	2b00      	cmp	r3, #0
 80085de:	da00      	bge.n	80085e2 <_dtoa_r+0x4a6>
 80085e0:	e172      	b.n	80088c8 <_dtoa_r+0x78c>
 80085e2:	9a02      	ldr	r2, [sp, #8]
 80085e4:	2a0e      	cmp	r2, #14
 80085e6:	dd00      	ble.n	80085ea <_dtoa_r+0x4ae>
 80085e8:	e16e      	b.n	80088c8 <_dtoa_r+0x78c>
 80085ea:	4b78      	ldr	r3, [pc, #480]	; (80087cc <_dtoa_r+0x690>)
 80085ec:	00d2      	lsls	r2, r2, #3
 80085ee:	189b      	adds	r3, r3, r2
 80085f0:	685c      	ldr	r4, [r3, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	930a      	str	r3, [sp, #40]	; 0x28
 80085f6:	940b      	str	r4, [sp, #44]	; 0x2c
 80085f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	db00      	blt.n	8008600 <_dtoa_r+0x4c4>
 80085fe:	e0f7      	b.n	80087f0 <_dtoa_r+0x6b4>
 8008600:	9b07      	ldr	r3, [sp, #28]
 8008602:	2b00      	cmp	r3, #0
 8008604:	dd00      	ble.n	8008608 <_dtoa_r+0x4cc>
 8008606:	e0f3      	b.n	80087f0 <_dtoa_r+0x6b4>
 8008608:	d000      	beq.n	800860c <_dtoa_r+0x4d0>
 800860a:	e282      	b.n	8008b12 <_dtoa_r+0x9d6>
 800860c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800860e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008610:	2200      	movs	r2, #0
 8008612:	4b74      	ldr	r3, [pc, #464]	; (80087e4 <_dtoa_r+0x6a8>)
 8008614:	f7f9 fae0 	bl	8001bd8 <__aeabi_dmul>
 8008618:	9a08      	ldr	r2, [sp, #32]
 800861a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800861c:	f7f7 ff38 	bl	8000490 <__aeabi_dcmpge>
 8008620:	9e07      	ldr	r6, [sp, #28]
 8008622:	0035      	movs	r5, r6
 8008624:	2800      	cmp	r0, #0
 8008626:	d000      	beq.n	800862a <_dtoa_r+0x4ee>
 8008628:	e259      	b.n	8008ade <_dtoa_r+0x9a2>
 800862a:	9b06      	ldr	r3, [sp, #24]
 800862c:	9a06      	ldr	r2, [sp, #24]
 800862e:	3301      	adds	r3, #1
 8008630:	9308      	str	r3, [sp, #32]
 8008632:	2331      	movs	r3, #49	; 0x31
 8008634:	7013      	strb	r3, [r2, #0]
 8008636:	9b02      	ldr	r3, [sp, #8]
 8008638:	3301      	adds	r3, #1
 800863a:	9302      	str	r3, [sp, #8]
 800863c:	e254      	b.n	8008ae8 <_dtoa_r+0x9ac>
 800863e:	4234      	tst	r4, r6
 8008640:	d007      	beq.n	8008652 <_dtoa_r+0x516>
 8008642:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008644:	3301      	adds	r3, #1
 8008646:	9310      	str	r3, [sp, #64]	; 0x40
 8008648:	682a      	ldr	r2, [r5, #0]
 800864a:	686b      	ldr	r3, [r5, #4]
 800864c:	f7f9 fac4 	bl	8001bd8 <__aeabi_dmul>
 8008650:	0033      	movs	r3, r6
 8008652:	1064      	asrs	r4, r4, #1
 8008654:	3508      	adds	r5, #8
 8008656:	e75a      	b.n	800850e <_dtoa_r+0x3d2>
 8008658:	9e02      	ldr	r6, [sp, #8]
 800865a:	9b07      	ldr	r3, [sp, #28]
 800865c:	e780      	b.n	8008560 <_dtoa_r+0x424>
 800865e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008660:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008662:	1e5a      	subs	r2, r3, #1
 8008664:	4b59      	ldr	r3, [pc, #356]	; (80087cc <_dtoa_r+0x690>)
 8008666:	00d2      	lsls	r2, r2, #3
 8008668:	189b      	adds	r3, r3, r2
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	2900      	cmp	r1, #0
 8008670:	d051      	beq.n	8008716 <_dtoa_r+0x5da>
 8008672:	2000      	movs	r0, #0
 8008674:	495d      	ldr	r1, [pc, #372]	; (80087ec <_dtoa_r+0x6b0>)
 8008676:	f7f8 fead 	bl	80013d4 <__aeabi_ddiv>
 800867a:	9a08      	ldr	r2, [sp, #32]
 800867c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800867e:	f7f9 fd17 	bl	80020b0 <__aeabi_dsub>
 8008682:	9a06      	ldr	r2, [sp, #24]
 8008684:	9b06      	ldr	r3, [sp, #24]
 8008686:	4694      	mov	ip, r2
 8008688:	9317      	str	r3, [sp, #92]	; 0x5c
 800868a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800868c:	9010      	str	r0, [sp, #64]	; 0x40
 800868e:	9111      	str	r1, [sp, #68]	; 0x44
 8008690:	4463      	add	r3, ip
 8008692:	9319      	str	r3, [sp, #100]	; 0x64
 8008694:	0029      	movs	r1, r5
 8008696:	0020      	movs	r0, r4
 8008698:	f7fa f8ba 	bl	8002810 <__aeabi_d2iz>
 800869c:	9014      	str	r0, [sp, #80]	; 0x50
 800869e:	f7fa f8ed 	bl	800287c <__aeabi_i2d>
 80086a2:	0002      	movs	r2, r0
 80086a4:	000b      	movs	r3, r1
 80086a6:	0020      	movs	r0, r4
 80086a8:	0029      	movs	r1, r5
 80086aa:	f7f9 fd01 	bl	80020b0 <__aeabi_dsub>
 80086ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80086b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80086b2:	3301      	adds	r3, #1
 80086b4:	9308      	str	r3, [sp, #32]
 80086b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80086b8:	0004      	movs	r4, r0
 80086ba:	3330      	adds	r3, #48	; 0x30
 80086bc:	7013      	strb	r3, [r2, #0]
 80086be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80086c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086c2:	000d      	movs	r5, r1
 80086c4:	f7f7 fec6 	bl	8000454 <__aeabi_dcmplt>
 80086c8:	2800      	cmp	r0, #0
 80086ca:	d175      	bne.n	80087b8 <_dtoa_r+0x67c>
 80086cc:	0022      	movs	r2, r4
 80086ce:	002b      	movs	r3, r5
 80086d0:	2000      	movs	r0, #0
 80086d2:	4940      	ldr	r1, [pc, #256]	; (80087d4 <_dtoa_r+0x698>)
 80086d4:	f7f9 fcec 	bl	80020b0 <__aeabi_dsub>
 80086d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80086da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086dc:	f7f7 feba 	bl	8000454 <__aeabi_dcmplt>
 80086e0:	2800      	cmp	r0, #0
 80086e2:	d000      	beq.n	80086e6 <_dtoa_r+0x5aa>
 80086e4:	e0d2      	b.n	800888c <_dtoa_r+0x750>
 80086e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80086e8:	9a08      	ldr	r2, [sp, #32]
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d100      	bne.n	80086f0 <_dtoa_r+0x5b4>
 80086ee:	e770      	b.n	80085d2 <_dtoa_r+0x496>
 80086f0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80086f2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80086f4:	2200      	movs	r2, #0
 80086f6:	4b38      	ldr	r3, [pc, #224]	; (80087d8 <_dtoa_r+0x69c>)
 80086f8:	f7f9 fa6e 	bl	8001bd8 <__aeabi_dmul>
 80086fc:	4b36      	ldr	r3, [pc, #216]	; (80087d8 <_dtoa_r+0x69c>)
 80086fe:	9010      	str	r0, [sp, #64]	; 0x40
 8008700:	9111      	str	r1, [sp, #68]	; 0x44
 8008702:	2200      	movs	r2, #0
 8008704:	0020      	movs	r0, r4
 8008706:	0029      	movs	r1, r5
 8008708:	f7f9 fa66 	bl	8001bd8 <__aeabi_dmul>
 800870c:	9b08      	ldr	r3, [sp, #32]
 800870e:	0004      	movs	r4, r0
 8008710:	000d      	movs	r5, r1
 8008712:	9317      	str	r3, [sp, #92]	; 0x5c
 8008714:	e7be      	b.n	8008694 <_dtoa_r+0x558>
 8008716:	9808      	ldr	r0, [sp, #32]
 8008718:	9909      	ldr	r1, [sp, #36]	; 0x24
 800871a:	f7f9 fa5d 	bl	8001bd8 <__aeabi_dmul>
 800871e:	9a06      	ldr	r2, [sp, #24]
 8008720:	9b06      	ldr	r3, [sp, #24]
 8008722:	4694      	mov	ip, r2
 8008724:	9308      	str	r3, [sp, #32]
 8008726:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008728:	9010      	str	r0, [sp, #64]	; 0x40
 800872a:	9111      	str	r1, [sp, #68]	; 0x44
 800872c:	4463      	add	r3, ip
 800872e:	9319      	str	r3, [sp, #100]	; 0x64
 8008730:	0029      	movs	r1, r5
 8008732:	0020      	movs	r0, r4
 8008734:	f7fa f86c 	bl	8002810 <__aeabi_d2iz>
 8008738:	9017      	str	r0, [sp, #92]	; 0x5c
 800873a:	f7fa f89f 	bl	800287c <__aeabi_i2d>
 800873e:	0002      	movs	r2, r0
 8008740:	000b      	movs	r3, r1
 8008742:	0020      	movs	r0, r4
 8008744:	0029      	movs	r1, r5
 8008746:	f7f9 fcb3 	bl	80020b0 <__aeabi_dsub>
 800874a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800874c:	9a08      	ldr	r2, [sp, #32]
 800874e:	3330      	adds	r3, #48	; 0x30
 8008750:	7013      	strb	r3, [r2, #0]
 8008752:	0013      	movs	r3, r2
 8008754:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008756:	3301      	adds	r3, #1
 8008758:	0004      	movs	r4, r0
 800875a:	000d      	movs	r5, r1
 800875c:	9308      	str	r3, [sp, #32]
 800875e:	4293      	cmp	r3, r2
 8008760:	d12c      	bne.n	80087bc <_dtoa_r+0x680>
 8008762:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008764:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008766:	9a06      	ldr	r2, [sp, #24]
 8008768:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800876a:	4694      	mov	ip, r2
 800876c:	4463      	add	r3, ip
 800876e:	2200      	movs	r2, #0
 8008770:	9308      	str	r3, [sp, #32]
 8008772:	4b1e      	ldr	r3, [pc, #120]	; (80087ec <_dtoa_r+0x6b0>)
 8008774:	f7f8 faf2 	bl	8000d5c <__aeabi_dadd>
 8008778:	0002      	movs	r2, r0
 800877a:	000b      	movs	r3, r1
 800877c:	0020      	movs	r0, r4
 800877e:	0029      	movs	r1, r5
 8008780:	f7f7 fe7c 	bl	800047c <__aeabi_dcmpgt>
 8008784:	2800      	cmp	r0, #0
 8008786:	d000      	beq.n	800878a <_dtoa_r+0x64e>
 8008788:	e080      	b.n	800888c <_dtoa_r+0x750>
 800878a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800878c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800878e:	2000      	movs	r0, #0
 8008790:	4916      	ldr	r1, [pc, #88]	; (80087ec <_dtoa_r+0x6b0>)
 8008792:	f7f9 fc8d 	bl	80020b0 <__aeabi_dsub>
 8008796:	0002      	movs	r2, r0
 8008798:	000b      	movs	r3, r1
 800879a:	0020      	movs	r0, r4
 800879c:	0029      	movs	r1, r5
 800879e:	f7f7 fe59 	bl	8000454 <__aeabi_dcmplt>
 80087a2:	2800      	cmp	r0, #0
 80087a4:	d100      	bne.n	80087a8 <_dtoa_r+0x66c>
 80087a6:	e714      	b.n	80085d2 <_dtoa_r+0x496>
 80087a8:	9b08      	ldr	r3, [sp, #32]
 80087aa:	001a      	movs	r2, r3
 80087ac:	3a01      	subs	r2, #1
 80087ae:	9208      	str	r2, [sp, #32]
 80087b0:	7812      	ldrb	r2, [r2, #0]
 80087b2:	2a30      	cmp	r2, #48	; 0x30
 80087b4:	d0f8      	beq.n	80087a8 <_dtoa_r+0x66c>
 80087b6:	9308      	str	r3, [sp, #32]
 80087b8:	9602      	str	r6, [sp, #8]
 80087ba:	e055      	b.n	8008868 <_dtoa_r+0x72c>
 80087bc:	2200      	movs	r2, #0
 80087be:	4b06      	ldr	r3, [pc, #24]	; (80087d8 <_dtoa_r+0x69c>)
 80087c0:	f7f9 fa0a 	bl	8001bd8 <__aeabi_dmul>
 80087c4:	0004      	movs	r4, r0
 80087c6:	000d      	movs	r5, r1
 80087c8:	e7b2      	b.n	8008730 <_dtoa_r+0x5f4>
 80087ca:	46c0      	nop			; (mov r8, r8)
 80087cc:	0800af98 	.word	0x0800af98
 80087d0:	0800af70 	.word	0x0800af70
 80087d4:	3ff00000 	.word	0x3ff00000
 80087d8:	40240000 	.word	0x40240000
 80087dc:	401c0000 	.word	0x401c0000
 80087e0:	fcc00000 	.word	0xfcc00000
 80087e4:	40140000 	.word	0x40140000
 80087e8:	7cc00000 	.word	0x7cc00000
 80087ec:	3fe00000 	.word	0x3fe00000
 80087f0:	9b07      	ldr	r3, [sp, #28]
 80087f2:	9e06      	ldr	r6, [sp, #24]
 80087f4:	3b01      	subs	r3, #1
 80087f6:	199b      	adds	r3, r3, r6
 80087f8:	930c      	str	r3, [sp, #48]	; 0x30
 80087fa:	9c08      	ldr	r4, [sp, #32]
 80087fc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80087fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008802:	0020      	movs	r0, r4
 8008804:	0029      	movs	r1, r5
 8008806:	f7f8 fde5 	bl	80013d4 <__aeabi_ddiv>
 800880a:	f7fa f801 	bl	8002810 <__aeabi_d2iz>
 800880e:	9007      	str	r0, [sp, #28]
 8008810:	f7fa f834 	bl	800287c <__aeabi_i2d>
 8008814:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008818:	f7f9 f9de 	bl	8001bd8 <__aeabi_dmul>
 800881c:	0002      	movs	r2, r0
 800881e:	000b      	movs	r3, r1
 8008820:	0020      	movs	r0, r4
 8008822:	0029      	movs	r1, r5
 8008824:	f7f9 fc44 	bl	80020b0 <__aeabi_dsub>
 8008828:	0033      	movs	r3, r6
 800882a:	9a07      	ldr	r2, [sp, #28]
 800882c:	3601      	adds	r6, #1
 800882e:	3230      	adds	r2, #48	; 0x30
 8008830:	701a      	strb	r2, [r3, #0]
 8008832:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008834:	9608      	str	r6, [sp, #32]
 8008836:	429a      	cmp	r2, r3
 8008838:	d139      	bne.n	80088ae <_dtoa_r+0x772>
 800883a:	0002      	movs	r2, r0
 800883c:	000b      	movs	r3, r1
 800883e:	f7f8 fa8d 	bl	8000d5c <__aeabi_dadd>
 8008842:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008844:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008846:	0004      	movs	r4, r0
 8008848:	000d      	movs	r5, r1
 800884a:	f7f7 fe17 	bl	800047c <__aeabi_dcmpgt>
 800884e:	2800      	cmp	r0, #0
 8008850:	d11b      	bne.n	800888a <_dtoa_r+0x74e>
 8008852:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008854:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008856:	0020      	movs	r0, r4
 8008858:	0029      	movs	r1, r5
 800885a:	f7f7 fdf5 	bl	8000448 <__aeabi_dcmpeq>
 800885e:	2800      	cmp	r0, #0
 8008860:	d002      	beq.n	8008868 <_dtoa_r+0x72c>
 8008862:	9b07      	ldr	r3, [sp, #28]
 8008864:	07db      	lsls	r3, r3, #31
 8008866:	d410      	bmi.n	800888a <_dtoa_r+0x74e>
 8008868:	0038      	movs	r0, r7
 800886a:	9905      	ldr	r1, [sp, #20]
 800886c:	f000 faf6 	bl	8008e5c <_Bfree>
 8008870:	2300      	movs	r3, #0
 8008872:	9a08      	ldr	r2, [sp, #32]
 8008874:	9802      	ldr	r0, [sp, #8]
 8008876:	7013      	strb	r3, [r2, #0]
 8008878:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800887a:	3001      	adds	r0, #1
 800887c:	6018      	str	r0, [r3, #0]
 800887e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008880:	2b00      	cmp	r3, #0
 8008882:	d100      	bne.n	8008886 <_dtoa_r+0x74a>
 8008884:	e4a6      	b.n	80081d4 <_dtoa_r+0x98>
 8008886:	601a      	str	r2, [r3, #0]
 8008888:	e4a4      	b.n	80081d4 <_dtoa_r+0x98>
 800888a:	9e02      	ldr	r6, [sp, #8]
 800888c:	9b08      	ldr	r3, [sp, #32]
 800888e:	9308      	str	r3, [sp, #32]
 8008890:	3b01      	subs	r3, #1
 8008892:	781a      	ldrb	r2, [r3, #0]
 8008894:	2a39      	cmp	r2, #57	; 0x39
 8008896:	d106      	bne.n	80088a6 <_dtoa_r+0x76a>
 8008898:	9a06      	ldr	r2, [sp, #24]
 800889a:	429a      	cmp	r2, r3
 800889c:	d1f7      	bne.n	800888e <_dtoa_r+0x752>
 800889e:	2230      	movs	r2, #48	; 0x30
 80088a0:	9906      	ldr	r1, [sp, #24]
 80088a2:	3601      	adds	r6, #1
 80088a4:	700a      	strb	r2, [r1, #0]
 80088a6:	781a      	ldrb	r2, [r3, #0]
 80088a8:	3201      	adds	r2, #1
 80088aa:	701a      	strb	r2, [r3, #0]
 80088ac:	e784      	b.n	80087b8 <_dtoa_r+0x67c>
 80088ae:	2200      	movs	r2, #0
 80088b0:	4baa      	ldr	r3, [pc, #680]	; (8008b5c <_dtoa_r+0xa20>)
 80088b2:	f7f9 f991 	bl	8001bd8 <__aeabi_dmul>
 80088b6:	2200      	movs	r2, #0
 80088b8:	2300      	movs	r3, #0
 80088ba:	0004      	movs	r4, r0
 80088bc:	000d      	movs	r5, r1
 80088be:	f7f7 fdc3 	bl	8000448 <__aeabi_dcmpeq>
 80088c2:	2800      	cmp	r0, #0
 80088c4:	d09b      	beq.n	80087fe <_dtoa_r+0x6c2>
 80088c6:	e7cf      	b.n	8008868 <_dtoa_r+0x72c>
 80088c8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80088ca:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80088cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80088ce:	2d00      	cmp	r5, #0
 80088d0:	d012      	beq.n	80088f8 <_dtoa_r+0x7bc>
 80088d2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80088d4:	2a01      	cmp	r2, #1
 80088d6:	dc66      	bgt.n	80089a6 <_dtoa_r+0x86a>
 80088d8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80088da:	2a00      	cmp	r2, #0
 80088dc:	d05d      	beq.n	800899a <_dtoa_r+0x85e>
 80088de:	4aa0      	ldr	r2, [pc, #640]	; (8008b60 <_dtoa_r+0xa24>)
 80088e0:	189b      	adds	r3, r3, r2
 80088e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088e4:	2101      	movs	r1, #1
 80088e6:	18d2      	adds	r2, r2, r3
 80088e8:	920a      	str	r2, [sp, #40]	; 0x28
 80088ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088ec:	0038      	movs	r0, r7
 80088ee:	18d3      	adds	r3, r2, r3
 80088f0:	930d      	str	r3, [sp, #52]	; 0x34
 80088f2:	f000 fb63 	bl	8008fbc <__i2b>
 80088f6:	0005      	movs	r5, r0
 80088f8:	2c00      	cmp	r4, #0
 80088fa:	dd0e      	ble.n	800891a <_dtoa_r+0x7de>
 80088fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088fe:	2b00      	cmp	r3, #0
 8008900:	dd0b      	ble.n	800891a <_dtoa_r+0x7de>
 8008902:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008904:	0023      	movs	r3, r4
 8008906:	4294      	cmp	r4, r2
 8008908:	dd00      	ble.n	800890c <_dtoa_r+0x7d0>
 800890a:	0013      	movs	r3, r2
 800890c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800890e:	1ae4      	subs	r4, r4, r3
 8008910:	1ad2      	subs	r2, r2, r3
 8008912:	920a      	str	r2, [sp, #40]	; 0x28
 8008914:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008916:	1ad3      	subs	r3, r2, r3
 8008918:	930d      	str	r3, [sp, #52]	; 0x34
 800891a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800891c:	2b00      	cmp	r3, #0
 800891e:	d01f      	beq.n	8008960 <_dtoa_r+0x824>
 8008920:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008922:	2b00      	cmp	r3, #0
 8008924:	d054      	beq.n	80089d0 <_dtoa_r+0x894>
 8008926:	2e00      	cmp	r6, #0
 8008928:	dd11      	ble.n	800894e <_dtoa_r+0x812>
 800892a:	0029      	movs	r1, r5
 800892c:	0032      	movs	r2, r6
 800892e:	0038      	movs	r0, r7
 8008930:	f000 fc0a 	bl	8009148 <__pow5mult>
 8008934:	9a05      	ldr	r2, [sp, #20]
 8008936:	0001      	movs	r1, r0
 8008938:	0005      	movs	r5, r0
 800893a:	0038      	movs	r0, r7
 800893c:	f000 fb54 	bl	8008fe8 <__multiply>
 8008940:	9905      	ldr	r1, [sp, #20]
 8008942:	9014      	str	r0, [sp, #80]	; 0x50
 8008944:	0038      	movs	r0, r7
 8008946:	f000 fa89 	bl	8008e5c <_Bfree>
 800894a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800894c:	9305      	str	r3, [sp, #20]
 800894e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008950:	1b9a      	subs	r2, r3, r6
 8008952:	42b3      	cmp	r3, r6
 8008954:	d004      	beq.n	8008960 <_dtoa_r+0x824>
 8008956:	0038      	movs	r0, r7
 8008958:	9905      	ldr	r1, [sp, #20]
 800895a:	f000 fbf5 	bl	8009148 <__pow5mult>
 800895e:	9005      	str	r0, [sp, #20]
 8008960:	2101      	movs	r1, #1
 8008962:	0038      	movs	r0, r7
 8008964:	f000 fb2a 	bl	8008fbc <__i2b>
 8008968:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800896a:	0006      	movs	r6, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	dd31      	ble.n	80089d4 <_dtoa_r+0x898>
 8008970:	001a      	movs	r2, r3
 8008972:	0001      	movs	r1, r0
 8008974:	0038      	movs	r0, r7
 8008976:	f000 fbe7 	bl	8009148 <__pow5mult>
 800897a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800897c:	0006      	movs	r6, r0
 800897e:	2b01      	cmp	r3, #1
 8008980:	dd2d      	ble.n	80089de <_dtoa_r+0x8a2>
 8008982:	2300      	movs	r3, #0
 8008984:	930e      	str	r3, [sp, #56]	; 0x38
 8008986:	6933      	ldr	r3, [r6, #16]
 8008988:	3303      	adds	r3, #3
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	18f3      	adds	r3, r6, r3
 800898e:	6858      	ldr	r0, [r3, #4]
 8008990:	f000 facc 	bl	8008f2c <__hi0bits>
 8008994:	2320      	movs	r3, #32
 8008996:	1a18      	subs	r0, r3, r0
 8008998:	e039      	b.n	8008a0e <_dtoa_r+0x8d2>
 800899a:	2336      	movs	r3, #54	; 0x36
 800899c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800899e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80089a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80089a2:	1a9b      	subs	r3, r3, r2
 80089a4:	e79d      	b.n	80088e2 <_dtoa_r+0x7a6>
 80089a6:	9b07      	ldr	r3, [sp, #28]
 80089a8:	1e5e      	subs	r6, r3, #1
 80089aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089ac:	42b3      	cmp	r3, r6
 80089ae:	db07      	blt.n	80089c0 <_dtoa_r+0x884>
 80089b0:	1b9e      	subs	r6, r3, r6
 80089b2:	9b07      	ldr	r3, [sp, #28]
 80089b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	da93      	bge.n	80088e2 <_dtoa_r+0x7a6>
 80089ba:	1ae4      	subs	r4, r4, r3
 80089bc:	2300      	movs	r3, #0
 80089be:	e790      	b.n	80088e2 <_dtoa_r+0x7a6>
 80089c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80089c4:	1af3      	subs	r3, r6, r3
 80089c6:	18d3      	adds	r3, r2, r3
 80089c8:	960e      	str	r6, [sp, #56]	; 0x38
 80089ca:	9315      	str	r3, [sp, #84]	; 0x54
 80089cc:	2600      	movs	r6, #0
 80089ce:	e7f0      	b.n	80089b2 <_dtoa_r+0x876>
 80089d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089d2:	e7c0      	b.n	8008956 <_dtoa_r+0x81a>
 80089d4:	2300      	movs	r3, #0
 80089d6:	930e      	str	r3, [sp, #56]	; 0x38
 80089d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089da:	2b01      	cmp	r3, #1
 80089dc:	dc13      	bgt.n	8008a06 <_dtoa_r+0x8ca>
 80089de:	2300      	movs	r3, #0
 80089e0:	930e      	str	r3, [sp, #56]	; 0x38
 80089e2:	9b08      	ldr	r3, [sp, #32]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d10e      	bne.n	8008a06 <_dtoa_r+0x8ca>
 80089e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ea:	031b      	lsls	r3, r3, #12
 80089ec:	d10b      	bne.n	8008a06 <_dtoa_r+0x8ca>
 80089ee:	4b5d      	ldr	r3, [pc, #372]	; (8008b64 <_dtoa_r+0xa28>)
 80089f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089f2:	4213      	tst	r3, r2
 80089f4:	d007      	beq.n	8008a06 <_dtoa_r+0x8ca>
 80089f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089f8:	3301      	adds	r3, #1
 80089fa:	930a      	str	r3, [sp, #40]	; 0x28
 80089fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089fe:	3301      	adds	r3, #1
 8008a00:	930d      	str	r3, [sp, #52]	; 0x34
 8008a02:	2301      	movs	r3, #1
 8008a04:	930e      	str	r3, [sp, #56]	; 0x38
 8008a06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a08:	2001      	movs	r0, #1
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1bb      	bne.n	8008986 <_dtoa_r+0x84a>
 8008a0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a10:	221f      	movs	r2, #31
 8008a12:	1818      	adds	r0, r3, r0
 8008a14:	0003      	movs	r3, r0
 8008a16:	4013      	ands	r3, r2
 8008a18:	4210      	tst	r0, r2
 8008a1a:	d046      	beq.n	8008aaa <_dtoa_r+0x96e>
 8008a1c:	3201      	adds	r2, #1
 8008a1e:	1ad2      	subs	r2, r2, r3
 8008a20:	2a04      	cmp	r2, #4
 8008a22:	dd3f      	ble.n	8008aa4 <_dtoa_r+0x968>
 8008a24:	221c      	movs	r2, #28
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a2a:	18e4      	adds	r4, r4, r3
 8008a2c:	18d2      	adds	r2, r2, r3
 8008a2e:	920a      	str	r2, [sp, #40]	; 0x28
 8008a30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a32:	18d3      	adds	r3, r2, r3
 8008a34:	930d      	str	r3, [sp, #52]	; 0x34
 8008a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	dd05      	ble.n	8008a48 <_dtoa_r+0x90c>
 8008a3c:	001a      	movs	r2, r3
 8008a3e:	0038      	movs	r0, r7
 8008a40:	9905      	ldr	r1, [sp, #20]
 8008a42:	f000 fbdd 	bl	8009200 <__lshift>
 8008a46:	9005      	str	r0, [sp, #20]
 8008a48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	dd05      	ble.n	8008a5a <_dtoa_r+0x91e>
 8008a4e:	0031      	movs	r1, r6
 8008a50:	001a      	movs	r2, r3
 8008a52:	0038      	movs	r0, r7
 8008a54:	f000 fbd4 	bl	8009200 <__lshift>
 8008a58:	0006      	movs	r6, r0
 8008a5a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d026      	beq.n	8008aae <_dtoa_r+0x972>
 8008a60:	0031      	movs	r1, r6
 8008a62:	9805      	ldr	r0, [sp, #20]
 8008a64:	f000 fc3a 	bl	80092dc <__mcmp>
 8008a68:	2800      	cmp	r0, #0
 8008a6a:	da20      	bge.n	8008aae <_dtoa_r+0x972>
 8008a6c:	9b02      	ldr	r3, [sp, #8]
 8008a6e:	220a      	movs	r2, #10
 8008a70:	3b01      	subs	r3, #1
 8008a72:	9302      	str	r3, [sp, #8]
 8008a74:	0038      	movs	r0, r7
 8008a76:	2300      	movs	r3, #0
 8008a78:	9905      	ldr	r1, [sp, #20]
 8008a7a:	f000 fa13 	bl	8008ea4 <__multadd>
 8008a7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a80:	9005      	str	r0, [sp, #20]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d100      	bne.n	8008a88 <_dtoa_r+0x94c>
 8008a86:	e166      	b.n	8008d56 <_dtoa_r+0xc1a>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	0029      	movs	r1, r5
 8008a8c:	220a      	movs	r2, #10
 8008a8e:	0038      	movs	r0, r7
 8008a90:	f000 fa08 	bl	8008ea4 <__multadd>
 8008a94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a96:	0005      	movs	r5, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	dc47      	bgt.n	8008b2c <_dtoa_r+0x9f0>
 8008a9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	dc0d      	bgt.n	8008abe <_dtoa_r+0x982>
 8008aa2:	e043      	b.n	8008b2c <_dtoa_r+0x9f0>
 8008aa4:	2a04      	cmp	r2, #4
 8008aa6:	d0c6      	beq.n	8008a36 <_dtoa_r+0x8fa>
 8008aa8:	0013      	movs	r3, r2
 8008aaa:	331c      	adds	r3, #28
 8008aac:	e7bc      	b.n	8008a28 <_dtoa_r+0x8ec>
 8008aae:	9b07      	ldr	r3, [sp, #28]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	dc35      	bgt.n	8008b20 <_dtoa_r+0x9e4>
 8008ab4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	dd32      	ble.n	8008b20 <_dtoa_r+0x9e4>
 8008aba:	9b07      	ldr	r3, [sp, #28]
 8008abc:	930c      	str	r3, [sp, #48]	; 0x30
 8008abe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d10c      	bne.n	8008ade <_dtoa_r+0x9a2>
 8008ac4:	0031      	movs	r1, r6
 8008ac6:	2205      	movs	r2, #5
 8008ac8:	0038      	movs	r0, r7
 8008aca:	f000 f9eb 	bl	8008ea4 <__multadd>
 8008ace:	0006      	movs	r6, r0
 8008ad0:	0001      	movs	r1, r0
 8008ad2:	9805      	ldr	r0, [sp, #20]
 8008ad4:	f000 fc02 	bl	80092dc <__mcmp>
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	dd00      	ble.n	8008ade <_dtoa_r+0x9a2>
 8008adc:	e5a5      	b.n	800862a <_dtoa_r+0x4ee>
 8008ade:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008ae0:	43db      	mvns	r3, r3
 8008ae2:	9302      	str	r3, [sp, #8]
 8008ae4:	9b06      	ldr	r3, [sp, #24]
 8008ae6:	9308      	str	r3, [sp, #32]
 8008ae8:	2400      	movs	r4, #0
 8008aea:	0031      	movs	r1, r6
 8008aec:	0038      	movs	r0, r7
 8008aee:	f000 f9b5 	bl	8008e5c <_Bfree>
 8008af2:	2d00      	cmp	r5, #0
 8008af4:	d100      	bne.n	8008af8 <_dtoa_r+0x9bc>
 8008af6:	e6b7      	b.n	8008868 <_dtoa_r+0x72c>
 8008af8:	2c00      	cmp	r4, #0
 8008afa:	d005      	beq.n	8008b08 <_dtoa_r+0x9cc>
 8008afc:	42ac      	cmp	r4, r5
 8008afe:	d003      	beq.n	8008b08 <_dtoa_r+0x9cc>
 8008b00:	0021      	movs	r1, r4
 8008b02:	0038      	movs	r0, r7
 8008b04:	f000 f9aa 	bl	8008e5c <_Bfree>
 8008b08:	0029      	movs	r1, r5
 8008b0a:	0038      	movs	r0, r7
 8008b0c:	f000 f9a6 	bl	8008e5c <_Bfree>
 8008b10:	e6aa      	b.n	8008868 <_dtoa_r+0x72c>
 8008b12:	2600      	movs	r6, #0
 8008b14:	0035      	movs	r5, r6
 8008b16:	e7e2      	b.n	8008ade <_dtoa_r+0x9a2>
 8008b18:	9602      	str	r6, [sp, #8]
 8008b1a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008b1c:	0035      	movs	r5, r6
 8008b1e:	e584      	b.n	800862a <_dtoa_r+0x4ee>
 8008b20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d100      	bne.n	8008b28 <_dtoa_r+0x9ec>
 8008b26:	e0ce      	b.n	8008cc6 <_dtoa_r+0xb8a>
 8008b28:	9b07      	ldr	r3, [sp, #28]
 8008b2a:	930c      	str	r3, [sp, #48]	; 0x30
 8008b2c:	2c00      	cmp	r4, #0
 8008b2e:	dd05      	ble.n	8008b3c <_dtoa_r+0xa00>
 8008b30:	0029      	movs	r1, r5
 8008b32:	0022      	movs	r2, r4
 8008b34:	0038      	movs	r0, r7
 8008b36:	f000 fb63 	bl	8009200 <__lshift>
 8008b3a:	0005      	movs	r5, r0
 8008b3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b3e:	0028      	movs	r0, r5
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d022      	beq.n	8008b8a <_dtoa_r+0xa4e>
 8008b44:	0038      	movs	r0, r7
 8008b46:	6869      	ldr	r1, [r5, #4]
 8008b48:	f000 f944 	bl	8008dd4 <_Balloc>
 8008b4c:	1e04      	subs	r4, r0, #0
 8008b4e:	d10f      	bne.n	8008b70 <_dtoa_r+0xa34>
 8008b50:	0002      	movs	r2, r0
 8008b52:	4b05      	ldr	r3, [pc, #20]	; (8008b68 <_dtoa_r+0xa2c>)
 8008b54:	4905      	ldr	r1, [pc, #20]	; (8008b6c <_dtoa_r+0xa30>)
 8008b56:	f7ff fb06 	bl	8008166 <_dtoa_r+0x2a>
 8008b5a:	46c0      	nop			; (mov r8, r8)
 8008b5c:	40240000 	.word	0x40240000
 8008b60:	00000433 	.word	0x00000433
 8008b64:	7ff00000 	.word	0x7ff00000
 8008b68:	0800aefe 	.word	0x0800aefe
 8008b6c:	000002ea 	.word	0x000002ea
 8008b70:	0029      	movs	r1, r5
 8008b72:	692b      	ldr	r3, [r5, #16]
 8008b74:	310c      	adds	r1, #12
 8008b76:	1c9a      	adds	r2, r3, #2
 8008b78:	0092      	lsls	r2, r2, #2
 8008b7a:	300c      	adds	r0, #12
 8008b7c:	f000 f921 	bl	8008dc2 <memcpy>
 8008b80:	2201      	movs	r2, #1
 8008b82:	0021      	movs	r1, r4
 8008b84:	0038      	movs	r0, r7
 8008b86:	f000 fb3b 	bl	8009200 <__lshift>
 8008b8a:	9b06      	ldr	r3, [sp, #24]
 8008b8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b8e:	930a      	str	r3, [sp, #40]	; 0x28
 8008b90:	3b01      	subs	r3, #1
 8008b92:	189b      	adds	r3, r3, r2
 8008b94:	2201      	movs	r2, #1
 8008b96:	002c      	movs	r4, r5
 8008b98:	0005      	movs	r5, r0
 8008b9a:	9314      	str	r3, [sp, #80]	; 0x50
 8008b9c:	9b08      	ldr	r3, [sp, #32]
 8008b9e:	4013      	ands	r3, r2
 8008ba0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ba2:	0031      	movs	r1, r6
 8008ba4:	9805      	ldr	r0, [sp, #20]
 8008ba6:	f7ff fa3d 	bl	8008024 <quorem>
 8008baa:	0003      	movs	r3, r0
 8008bac:	0021      	movs	r1, r4
 8008bae:	3330      	adds	r3, #48	; 0x30
 8008bb0:	900d      	str	r0, [sp, #52]	; 0x34
 8008bb2:	9805      	ldr	r0, [sp, #20]
 8008bb4:	9307      	str	r3, [sp, #28]
 8008bb6:	f000 fb91 	bl	80092dc <__mcmp>
 8008bba:	002a      	movs	r2, r5
 8008bbc:	900e      	str	r0, [sp, #56]	; 0x38
 8008bbe:	0031      	movs	r1, r6
 8008bc0:	0038      	movs	r0, r7
 8008bc2:	f000 fba7 	bl	8009314 <__mdiff>
 8008bc6:	68c3      	ldr	r3, [r0, #12]
 8008bc8:	9008      	str	r0, [sp, #32]
 8008bca:	9310      	str	r3, [sp, #64]	; 0x40
 8008bcc:	2301      	movs	r3, #1
 8008bce:	930c      	str	r3, [sp, #48]	; 0x30
 8008bd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d104      	bne.n	8008be0 <_dtoa_r+0xaa4>
 8008bd6:	0001      	movs	r1, r0
 8008bd8:	9805      	ldr	r0, [sp, #20]
 8008bda:	f000 fb7f 	bl	80092dc <__mcmp>
 8008bde:	900c      	str	r0, [sp, #48]	; 0x30
 8008be0:	0038      	movs	r0, r7
 8008be2:	9908      	ldr	r1, [sp, #32]
 8008be4:	f000 f93a 	bl	8008e5c <_Bfree>
 8008be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bec:	3301      	adds	r3, #1
 8008bee:	9308      	str	r3, [sp, #32]
 8008bf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	d10c      	bne.n	8008c14 <_dtoa_r+0xad8>
 8008bfa:	9b07      	ldr	r3, [sp, #28]
 8008bfc:	2b39      	cmp	r3, #57	; 0x39
 8008bfe:	d026      	beq.n	8008c4e <_dtoa_r+0xb12>
 8008c00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	dd02      	ble.n	8008c0c <_dtoa_r+0xad0>
 8008c06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c08:	3331      	adds	r3, #49	; 0x31
 8008c0a:	9307      	str	r3, [sp, #28]
 8008c0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c0e:	9a07      	ldr	r2, [sp, #28]
 8008c10:	701a      	strb	r2, [r3, #0]
 8008c12:	e76a      	b.n	8008aea <_dtoa_r+0x9ae>
 8008c14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	db04      	blt.n	8008c24 <_dtoa_r+0xae8>
 8008c1a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c20:	4313      	orrs	r3, r2
 8008c22:	d11f      	bne.n	8008c64 <_dtoa_r+0xb28>
 8008c24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	ddf0      	ble.n	8008c0c <_dtoa_r+0xad0>
 8008c2a:	9905      	ldr	r1, [sp, #20]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	0038      	movs	r0, r7
 8008c30:	f000 fae6 	bl	8009200 <__lshift>
 8008c34:	0031      	movs	r1, r6
 8008c36:	9005      	str	r0, [sp, #20]
 8008c38:	f000 fb50 	bl	80092dc <__mcmp>
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	dc03      	bgt.n	8008c48 <_dtoa_r+0xb0c>
 8008c40:	d1e4      	bne.n	8008c0c <_dtoa_r+0xad0>
 8008c42:	9b07      	ldr	r3, [sp, #28]
 8008c44:	07db      	lsls	r3, r3, #31
 8008c46:	d5e1      	bpl.n	8008c0c <_dtoa_r+0xad0>
 8008c48:	9b07      	ldr	r3, [sp, #28]
 8008c4a:	2b39      	cmp	r3, #57	; 0x39
 8008c4c:	d1db      	bne.n	8008c06 <_dtoa_r+0xaca>
 8008c4e:	2339      	movs	r3, #57	; 0x39
 8008c50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c52:	7013      	strb	r3, [r2, #0]
 8008c54:	9b08      	ldr	r3, [sp, #32]
 8008c56:	9308      	str	r3, [sp, #32]
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	781a      	ldrb	r2, [r3, #0]
 8008c5c:	2a39      	cmp	r2, #57	; 0x39
 8008c5e:	d068      	beq.n	8008d32 <_dtoa_r+0xbf6>
 8008c60:	3201      	adds	r2, #1
 8008c62:	e7d5      	b.n	8008c10 <_dtoa_r+0xad4>
 8008c64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	dd07      	ble.n	8008c7a <_dtoa_r+0xb3e>
 8008c6a:	9b07      	ldr	r3, [sp, #28]
 8008c6c:	2b39      	cmp	r3, #57	; 0x39
 8008c6e:	d0ee      	beq.n	8008c4e <_dtoa_r+0xb12>
 8008c70:	9b07      	ldr	r3, [sp, #28]
 8008c72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c74:	3301      	adds	r3, #1
 8008c76:	7013      	strb	r3, [r2, #0]
 8008c78:	e737      	b.n	8008aea <_dtoa_r+0x9ae>
 8008c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c7c:	9a07      	ldr	r2, [sp, #28]
 8008c7e:	701a      	strb	r2, [r3, #0]
 8008c80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d03e      	beq.n	8008d06 <_dtoa_r+0xbca>
 8008c88:	2300      	movs	r3, #0
 8008c8a:	220a      	movs	r2, #10
 8008c8c:	9905      	ldr	r1, [sp, #20]
 8008c8e:	0038      	movs	r0, r7
 8008c90:	f000 f908 	bl	8008ea4 <__multadd>
 8008c94:	2300      	movs	r3, #0
 8008c96:	9005      	str	r0, [sp, #20]
 8008c98:	220a      	movs	r2, #10
 8008c9a:	0021      	movs	r1, r4
 8008c9c:	0038      	movs	r0, r7
 8008c9e:	42ac      	cmp	r4, r5
 8008ca0:	d106      	bne.n	8008cb0 <_dtoa_r+0xb74>
 8008ca2:	f000 f8ff 	bl	8008ea4 <__multadd>
 8008ca6:	0004      	movs	r4, r0
 8008ca8:	0005      	movs	r5, r0
 8008caa:	9b08      	ldr	r3, [sp, #32]
 8008cac:	930a      	str	r3, [sp, #40]	; 0x28
 8008cae:	e778      	b.n	8008ba2 <_dtoa_r+0xa66>
 8008cb0:	f000 f8f8 	bl	8008ea4 <__multadd>
 8008cb4:	0029      	movs	r1, r5
 8008cb6:	0004      	movs	r4, r0
 8008cb8:	2300      	movs	r3, #0
 8008cba:	220a      	movs	r2, #10
 8008cbc:	0038      	movs	r0, r7
 8008cbe:	f000 f8f1 	bl	8008ea4 <__multadd>
 8008cc2:	0005      	movs	r5, r0
 8008cc4:	e7f1      	b.n	8008caa <_dtoa_r+0xb6e>
 8008cc6:	9b07      	ldr	r3, [sp, #28]
 8008cc8:	930c      	str	r3, [sp, #48]	; 0x30
 8008cca:	2400      	movs	r4, #0
 8008ccc:	0031      	movs	r1, r6
 8008cce:	9805      	ldr	r0, [sp, #20]
 8008cd0:	f7ff f9a8 	bl	8008024 <quorem>
 8008cd4:	9b06      	ldr	r3, [sp, #24]
 8008cd6:	3030      	adds	r0, #48	; 0x30
 8008cd8:	5518      	strb	r0, [r3, r4]
 8008cda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cdc:	3401      	adds	r4, #1
 8008cde:	9007      	str	r0, [sp, #28]
 8008ce0:	42a3      	cmp	r3, r4
 8008ce2:	dd07      	ble.n	8008cf4 <_dtoa_r+0xbb8>
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	220a      	movs	r2, #10
 8008ce8:	0038      	movs	r0, r7
 8008cea:	9905      	ldr	r1, [sp, #20]
 8008cec:	f000 f8da 	bl	8008ea4 <__multadd>
 8008cf0:	9005      	str	r0, [sp, #20]
 8008cf2:	e7eb      	b.n	8008ccc <_dtoa_r+0xb90>
 8008cf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cf6:	2001      	movs	r0, #1
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	dd00      	ble.n	8008cfe <_dtoa_r+0xbc2>
 8008cfc:	0018      	movs	r0, r3
 8008cfe:	2400      	movs	r4, #0
 8008d00:	9b06      	ldr	r3, [sp, #24]
 8008d02:	181b      	adds	r3, r3, r0
 8008d04:	9308      	str	r3, [sp, #32]
 8008d06:	9905      	ldr	r1, [sp, #20]
 8008d08:	2201      	movs	r2, #1
 8008d0a:	0038      	movs	r0, r7
 8008d0c:	f000 fa78 	bl	8009200 <__lshift>
 8008d10:	0031      	movs	r1, r6
 8008d12:	9005      	str	r0, [sp, #20]
 8008d14:	f000 fae2 	bl	80092dc <__mcmp>
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	dc9b      	bgt.n	8008c54 <_dtoa_r+0xb18>
 8008d1c:	d102      	bne.n	8008d24 <_dtoa_r+0xbe8>
 8008d1e:	9b07      	ldr	r3, [sp, #28]
 8008d20:	07db      	lsls	r3, r3, #31
 8008d22:	d497      	bmi.n	8008c54 <_dtoa_r+0xb18>
 8008d24:	9b08      	ldr	r3, [sp, #32]
 8008d26:	9308      	str	r3, [sp, #32]
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	781a      	ldrb	r2, [r3, #0]
 8008d2c:	2a30      	cmp	r2, #48	; 0x30
 8008d2e:	d0fa      	beq.n	8008d26 <_dtoa_r+0xbea>
 8008d30:	e6db      	b.n	8008aea <_dtoa_r+0x9ae>
 8008d32:	9a06      	ldr	r2, [sp, #24]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d18e      	bne.n	8008c56 <_dtoa_r+0xb1a>
 8008d38:	9b02      	ldr	r3, [sp, #8]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	9302      	str	r3, [sp, #8]
 8008d3e:	2331      	movs	r3, #49	; 0x31
 8008d40:	e799      	b.n	8008c76 <_dtoa_r+0xb3a>
 8008d42:	4b09      	ldr	r3, [pc, #36]	; (8008d68 <_dtoa_r+0xc2c>)
 8008d44:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008d46:	9306      	str	r3, [sp, #24]
 8008d48:	4b08      	ldr	r3, [pc, #32]	; (8008d6c <_dtoa_r+0xc30>)
 8008d4a:	2a00      	cmp	r2, #0
 8008d4c:	d001      	beq.n	8008d52 <_dtoa_r+0xc16>
 8008d4e:	f7ff fa3f 	bl	80081d0 <_dtoa_r+0x94>
 8008d52:	f7ff fa3f 	bl	80081d4 <_dtoa_r+0x98>
 8008d56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	dcb6      	bgt.n	8008cca <_dtoa_r+0xb8e>
 8008d5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	dd00      	ble.n	8008d64 <_dtoa_r+0xc28>
 8008d62:	e6ac      	b.n	8008abe <_dtoa_r+0x982>
 8008d64:	e7b1      	b.n	8008cca <_dtoa_r+0xb8e>
 8008d66:	46c0      	nop			; (mov r8, r8)
 8008d68:	0800ae96 	.word	0x0800ae96
 8008d6c:	0800ae9e 	.word	0x0800ae9e

08008d70 <fiprintf>:
 8008d70:	b40e      	push	{r1, r2, r3}
 8008d72:	b503      	push	{r0, r1, lr}
 8008d74:	0001      	movs	r1, r0
 8008d76:	ab03      	add	r3, sp, #12
 8008d78:	4804      	ldr	r0, [pc, #16]	; (8008d8c <fiprintf+0x1c>)
 8008d7a:	cb04      	ldmia	r3!, {r2}
 8008d7c:	6800      	ldr	r0, [r0, #0]
 8008d7e:	9301      	str	r3, [sp, #4]
 8008d80:	f000 fe5c 	bl	8009a3c <_vfiprintf_r>
 8008d84:	b002      	add	sp, #8
 8008d86:	bc08      	pop	{r3}
 8008d88:	b003      	add	sp, #12
 8008d8a:	4718      	bx	r3
 8008d8c:	2000282c 	.word	0x2000282c

08008d90 <_localeconv_r>:
 8008d90:	4800      	ldr	r0, [pc, #0]	; (8008d94 <_localeconv_r+0x4>)
 8008d92:	4770      	bx	lr
 8008d94:	20002980 	.word	0x20002980

08008d98 <malloc>:
 8008d98:	b510      	push	{r4, lr}
 8008d9a:	4b03      	ldr	r3, [pc, #12]	; (8008da8 <malloc+0x10>)
 8008d9c:	0001      	movs	r1, r0
 8008d9e:	6818      	ldr	r0, [r3, #0]
 8008da0:	f000 fc4c 	bl	800963c <_malloc_r>
 8008da4:	bd10      	pop	{r4, pc}
 8008da6:	46c0      	nop			; (mov r8, r8)
 8008da8:	2000282c 	.word	0x2000282c

08008dac <memchr>:
 8008dac:	b2c9      	uxtb	r1, r1
 8008dae:	1882      	adds	r2, r0, r2
 8008db0:	4290      	cmp	r0, r2
 8008db2:	d101      	bne.n	8008db8 <memchr+0xc>
 8008db4:	2000      	movs	r0, #0
 8008db6:	4770      	bx	lr
 8008db8:	7803      	ldrb	r3, [r0, #0]
 8008dba:	428b      	cmp	r3, r1
 8008dbc:	d0fb      	beq.n	8008db6 <memchr+0xa>
 8008dbe:	3001      	adds	r0, #1
 8008dc0:	e7f6      	b.n	8008db0 <memchr+0x4>

08008dc2 <memcpy>:
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	b510      	push	{r4, lr}
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d100      	bne.n	8008dcc <memcpy+0xa>
 8008dca:	bd10      	pop	{r4, pc}
 8008dcc:	5ccc      	ldrb	r4, [r1, r3]
 8008dce:	54c4      	strb	r4, [r0, r3]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	e7f8      	b.n	8008dc6 <memcpy+0x4>

08008dd4 <_Balloc>:
 8008dd4:	b570      	push	{r4, r5, r6, lr}
 8008dd6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008dd8:	0006      	movs	r6, r0
 8008dda:	000c      	movs	r4, r1
 8008ddc:	2d00      	cmp	r5, #0
 8008dde:	d10e      	bne.n	8008dfe <_Balloc+0x2a>
 8008de0:	2010      	movs	r0, #16
 8008de2:	f7ff ffd9 	bl	8008d98 <malloc>
 8008de6:	1e02      	subs	r2, r0, #0
 8008de8:	6270      	str	r0, [r6, #36]	; 0x24
 8008dea:	d104      	bne.n	8008df6 <_Balloc+0x22>
 8008dec:	2166      	movs	r1, #102	; 0x66
 8008dee:	4b19      	ldr	r3, [pc, #100]	; (8008e54 <_Balloc+0x80>)
 8008df0:	4819      	ldr	r0, [pc, #100]	; (8008e58 <_Balloc+0x84>)
 8008df2:	f7ff f8f9 	bl	8007fe8 <__assert_func>
 8008df6:	6045      	str	r5, [r0, #4]
 8008df8:	6085      	str	r5, [r0, #8]
 8008dfa:	6005      	str	r5, [r0, #0]
 8008dfc:	60c5      	str	r5, [r0, #12]
 8008dfe:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8008e00:	68eb      	ldr	r3, [r5, #12]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d013      	beq.n	8008e2e <_Balloc+0x5a>
 8008e06:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008e08:	00a2      	lsls	r2, r4, #2
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	189b      	adds	r3, r3, r2
 8008e0e:	6818      	ldr	r0, [r3, #0]
 8008e10:	2800      	cmp	r0, #0
 8008e12:	d118      	bne.n	8008e46 <_Balloc+0x72>
 8008e14:	2101      	movs	r1, #1
 8008e16:	000d      	movs	r5, r1
 8008e18:	40a5      	lsls	r5, r4
 8008e1a:	1d6a      	adds	r2, r5, #5
 8008e1c:	0030      	movs	r0, r6
 8008e1e:	0092      	lsls	r2, r2, #2
 8008e20:	f000 fb74 	bl	800950c <_calloc_r>
 8008e24:	2800      	cmp	r0, #0
 8008e26:	d00c      	beq.n	8008e42 <_Balloc+0x6e>
 8008e28:	6044      	str	r4, [r0, #4]
 8008e2a:	6085      	str	r5, [r0, #8]
 8008e2c:	e00d      	b.n	8008e4a <_Balloc+0x76>
 8008e2e:	2221      	movs	r2, #33	; 0x21
 8008e30:	2104      	movs	r1, #4
 8008e32:	0030      	movs	r0, r6
 8008e34:	f000 fb6a 	bl	800950c <_calloc_r>
 8008e38:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008e3a:	60e8      	str	r0, [r5, #12]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d1e1      	bne.n	8008e06 <_Balloc+0x32>
 8008e42:	2000      	movs	r0, #0
 8008e44:	bd70      	pop	{r4, r5, r6, pc}
 8008e46:	6802      	ldr	r2, [r0, #0]
 8008e48:	601a      	str	r2, [r3, #0]
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	6103      	str	r3, [r0, #16]
 8008e4e:	60c3      	str	r3, [r0, #12]
 8008e50:	e7f8      	b.n	8008e44 <_Balloc+0x70>
 8008e52:	46c0      	nop			; (mov r8, r8)
 8008e54:	0800ade8 	.word	0x0800ade8
 8008e58:	0800af0f 	.word	0x0800af0f

08008e5c <_Bfree>:
 8008e5c:	b570      	push	{r4, r5, r6, lr}
 8008e5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e60:	0005      	movs	r5, r0
 8008e62:	000c      	movs	r4, r1
 8008e64:	2e00      	cmp	r6, #0
 8008e66:	d10e      	bne.n	8008e86 <_Bfree+0x2a>
 8008e68:	2010      	movs	r0, #16
 8008e6a:	f7ff ff95 	bl	8008d98 <malloc>
 8008e6e:	1e02      	subs	r2, r0, #0
 8008e70:	6268      	str	r0, [r5, #36]	; 0x24
 8008e72:	d104      	bne.n	8008e7e <_Bfree+0x22>
 8008e74:	218a      	movs	r1, #138	; 0x8a
 8008e76:	4b09      	ldr	r3, [pc, #36]	; (8008e9c <_Bfree+0x40>)
 8008e78:	4809      	ldr	r0, [pc, #36]	; (8008ea0 <_Bfree+0x44>)
 8008e7a:	f7ff f8b5 	bl	8007fe8 <__assert_func>
 8008e7e:	6046      	str	r6, [r0, #4]
 8008e80:	6086      	str	r6, [r0, #8]
 8008e82:	6006      	str	r6, [r0, #0]
 8008e84:	60c6      	str	r6, [r0, #12]
 8008e86:	2c00      	cmp	r4, #0
 8008e88:	d007      	beq.n	8008e9a <_Bfree+0x3e>
 8008e8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008e8c:	6862      	ldr	r2, [r4, #4]
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	0092      	lsls	r2, r2, #2
 8008e92:	189b      	adds	r3, r3, r2
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	6022      	str	r2, [r4, #0]
 8008e98:	601c      	str	r4, [r3, #0]
 8008e9a:	bd70      	pop	{r4, r5, r6, pc}
 8008e9c:	0800ade8 	.word	0x0800ade8
 8008ea0:	0800af0f 	.word	0x0800af0f

08008ea4 <__multadd>:
 8008ea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ea6:	000e      	movs	r6, r1
 8008ea8:	9001      	str	r0, [sp, #4]
 8008eaa:	000c      	movs	r4, r1
 8008eac:	001d      	movs	r5, r3
 8008eae:	2000      	movs	r0, #0
 8008eb0:	690f      	ldr	r7, [r1, #16]
 8008eb2:	3614      	adds	r6, #20
 8008eb4:	6833      	ldr	r3, [r6, #0]
 8008eb6:	3001      	adds	r0, #1
 8008eb8:	b299      	uxth	r1, r3
 8008eba:	4351      	muls	r1, r2
 8008ebc:	0c1b      	lsrs	r3, r3, #16
 8008ebe:	4353      	muls	r3, r2
 8008ec0:	1949      	adds	r1, r1, r5
 8008ec2:	0c0d      	lsrs	r5, r1, #16
 8008ec4:	195b      	adds	r3, r3, r5
 8008ec6:	0c1d      	lsrs	r5, r3, #16
 8008ec8:	b289      	uxth	r1, r1
 8008eca:	041b      	lsls	r3, r3, #16
 8008ecc:	185b      	adds	r3, r3, r1
 8008ece:	c608      	stmia	r6!, {r3}
 8008ed0:	4287      	cmp	r7, r0
 8008ed2:	dcef      	bgt.n	8008eb4 <__multadd+0x10>
 8008ed4:	2d00      	cmp	r5, #0
 8008ed6:	d022      	beq.n	8008f1e <__multadd+0x7a>
 8008ed8:	68a3      	ldr	r3, [r4, #8]
 8008eda:	42bb      	cmp	r3, r7
 8008edc:	dc19      	bgt.n	8008f12 <__multadd+0x6e>
 8008ede:	6863      	ldr	r3, [r4, #4]
 8008ee0:	9801      	ldr	r0, [sp, #4]
 8008ee2:	1c59      	adds	r1, r3, #1
 8008ee4:	f7ff ff76 	bl	8008dd4 <_Balloc>
 8008ee8:	1e06      	subs	r6, r0, #0
 8008eea:	d105      	bne.n	8008ef8 <__multadd+0x54>
 8008eec:	0002      	movs	r2, r0
 8008eee:	21b5      	movs	r1, #181	; 0xb5
 8008ef0:	4b0c      	ldr	r3, [pc, #48]	; (8008f24 <__multadd+0x80>)
 8008ef2:	480d      	ldr	r0, [pc, #52]	; (8008f28 <__multadd+0x84>)
 8008ef4:	f7ff f878 	bl	8007fe8 <__assert_func>
 8008ef8:	0021      	movs	r1, r4
 8008efa:	6923      	ldr	r3, [r4, #16]
 8008efc:	310c      	adds	r1, #12
 8008efe:	1c9a      	adds	r2, r3, #2
 8008f00:	0092      	lsls	r2, r2, #2
 8008f02:	300c      	adds	r0, #12
 8008f04:	f7ff ff5d 	bl	8008dc2 <memcpy>
 8008f08:	0021      	movs	r1, r4
 8008f0a:	9801      	ldr	r0, [sp, #4]
 8008f0c:	f7ff ffa6 	bl	8008e5c <_Bfree>
 8008f10:	0034      	movs	r4, r6
 8008f12:	1d3b      	adds	r3, r7, #4
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	18e3      	adds	r3, r4, r3
 8008f18:	605d      	str	r5, [r3, #4]
 8008f1a:	1c7b      	adds	r3, r7, #1
 8008f1c:	6123      	str	r3, [r4, #16]
 8008f1e:	0020      	movs	r0, r4
 8008f20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f22:	46c0      	nop			; (mov r8, r8)
 8008f24:	0800aefe 	.word	0x0800aefe
 8008f28:	0800af0f 	.word	0x0800af0f

08008f2c <__hi0bits>:
 8008f2c:	0003      	movs	r3, r0
 8008f2e:	0c02      	lsrs	r2, r0, #16
 8008f30:	2000      	movs	r0, #0
 8008f32:	4282      	cmp	r2, r0
 8008f34:	d101      	bne.n	8008f3a <__hi0bits+0xe>
 8008f36:	041b      	lsls	r3, r3, #16
 8008f38:	3010      	adds	r0, #16
 8008f3a:	0e1a      	lsrs	r2, r3, #24
 8008f3c:	d101      	bne.n	8008f42 <__hi0bits+0x16>
 8008f3e:	3008      	adds	r0, #8
 8008f40:	021b      	lsls	r3, r3, #8
 8008f42:	0f1a      	lsrs	r2, r3, #28
 8008f44:	d101      	bne.n	8008f4a <__hi0bits+0x1e>
 8008f46:	3004      	adds	r0, #4
 8008f48:	011b      	lsls	r3, r3, #4
 8008f4a:	0f9a      	lsrs	r2, r3, #30
 8008f4c:	d101      	bne.n	8008f52 <__hi0bits+0x26>
 8008f4e:	3002      	adds	r0, #2
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	db03      	blt.n	8008f5e <__hi0bits+0x32>
 8008f56:	3001      	adds	r0, #1
 8008f58:	005b      	lsls	r3, r3, #1
 8008f5a:	d400      	bmi.n	8008f5e <__hi0bits+0x32>
 8008f5c:	2020      	movs	r0, #32
 8008f5e:	4770      	bx	lr

08008f60 <__lo0bits>:
 8008f60:	6803      	ldr	r3, [r0, #0]
 8008f62:	0002      	movs	r2, r0
 8008f64:	2107      	movs	r1, #7
 8008f66:	0018      	movs	r0, r3
 8008f68:	4008      	ands	r0, r1
 8008f6a:	420b      	tst	r3, r1
 8008f6c:	d00d      	beq.n	8008f8a <__lo0bits+0x2a>
 8008f6e:	3906      	subs	r1, #6
 8008f70:	2000      	movs	r0, #0
 8008f72:	420b      	tst	r3, r1
 8008f74:	d105      	bne.n	8008f82 <__lo0bits+0x22>
 8008f76:	3002      	adds	r0, #2
 8008f78:	4203      	tst	r3, r0
 8008f7a:	d003      	beq.n	8008f84 <__lo0bits+0x24>
 8008f7c:	40cb      	lsrs	r3, r1
 8008f7e:	0008      	movs	r0, r1
 8008f80:	6013      	str	r3, [r2, #0]
 8008f82:	4770      	bx	lr
 8008f84:	089b      	lsrs	r3, r3, #2
 8008f86:	6013      	str	r3, [r2, #0]
 8008f88:	e7fb      	b.n	8008f82 <__lo0bits+0x22>
 8008f8a:	b299      	uxth	r1, r3
 8008f8c:	2900      	cmp	r1, #0
 8008f8e:	d101      	bne.n	8008f94 <__lo0bits+0x34>
 8008f90:	2010      	movs	r0, #16
 8008f92:	0c1b      	lsrs	r3, r3, #16
 8008f94:	b2d9      	uxtb	r1, r3
 8008f96:	2900      	cmp	r1, #0
 8008f98:	d101      	bne.n	8008f9e <__lo0bits+0x3e>
 8008f9a:	3008      	adds	r0, #8
 8008f9c:	0a1b      	lsrs	r3, r3, #8
 8008f9e:	0719      	lsls	r1, r3, #28
 8008fa0:	d101      	bne.n	8008fa6 <__lo0bits+0x46>
 8008fa2:	3004      	adds	r0, #4
 8008fa4:	091b      	lsrs	r3, r3, #4
 8008fa6:	0799      	lsls	r1, r3, #30
 8008fa8:	d101      	bne.n	8008fae <__lo0bits+0x4e>
 8008faa:	3002      	adds	r0, #2
 8008fac:	089b      	lsrs	r3, r3, #2
 8008fae:	07d9      	lsls	r1, r3, #31
 8008fb0:	d4e9      	bmi.n	8008f86 <__lo0bits+0x26>
 8008fb2:	3001      	adds	r0, #1
 8008fb4:	085b      	lsrs	r3, r3, #1
 8008fb6:	d1e6      	bne.n	8008f86 <__lo0bits+0x26>
 8008fb8:	2020      	movs	r0, #32
 8008fba:	e7e2      	b.n	8008f82 <__lo0bits+0x22>

08008fbc <__i2b>:
 8008fbc:	b510      	push	{r4, lr}
 8008fbe:	000c      	movs	r4, r1
 8008fc0:	2101      	movs	r1, #1
 8008fc2:	f7ff ff07 	bl	8008dd4 <_Balloc>
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	d106      	bne.n	8008fd8 <__i2b+0x1c>
 8008fca:	21a0      	movs	r1, #160	; 0xa0
 8008fcc:	0002      	movs	r2, r0
 8008fce:	4b04      	ldr	r3, [pc, #16]	; (8008fe0 <__i2b+0x24>)
 8008fd0:	4804      	ldr	r0, [pc, #16]	; (8008fe4 <__i2b+0x28>)
 8008fd2:	0049      	lsls	r1, r1, #1
 8008fd4:	f7ff f808 	bl	8007fe8 <__assert_func>
 8008fd8:	2301      	movs	r3, #1
 8008fda:	6144      	str	r4, [r0, #20]
 8008fdc:	6103      	str	r3, [r0, #16]
 8008fde:	bd10      	pop	{r4, pc}
 8008fe0:	0800aefe 	.word	0x0800aefe
 8008fe4:	0800af0f 	.word	0x0800af0f

08008fe8 <__multiply>:
 8008fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fea:	690b      	ldr	r3, [r1, #16]
 8008fec:	0014      	movs	r4, r2
 8008fee:	6912      	ldr	r2, [r2, #16]
 8008ff0:	000d      	movs	r5, r1
 8008ff2:	b089      	sub	sp, #36	; 0x24
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	da01      	bge.n	8008ffc <__multiply+0x14>
 8008ff8:	0025      	movs	r5, r4
 8008ffa:	000c      	movs	r4, r1
 8008ffc:	692f      	ldr	r7, [r5, #16]
 8008ffe:	6926      	ldr	r6, [r4, #16]
 8009000:	6869      	ldr	r1, [r5, #4]
 8009002:	19bb      	adds	r3, r7, r6
 8009004:	9302      	str	r3, [sp, #8]
 8009006:	68ab      	ldr	r3, [r5, #8]
 8009008:	19ba      	adds	r2, r7, r6
 800900a:	4293      	cmp	r3, r2
 800900c:	da00      	bge.n	8009010 <__multiply+0x28>
 800900e:	3101      	adds	r1, #1
 8009010:	f7ff fee0 	bl	8008dd4 <_Balloc>
 8009014:	9001      	str	r0, [sp, #4]
 8009016:	2800      	cmp	r0, #0
 8009018:	d106      	bne.n	8009028 <__multiply+0x40>
 800901a:	215e      	movs	r1, #94	; 0x5e
 800901c:	0002      	movs	r2, r0
 800901e:	4b48      	ldr	r3, [pc, #288]	; (8009140 <__multiply+0x158>)
 8009020:	4848      	ldr	r0, [pc, #288]	; (8009144 <__multiply+0x15c>)
 8009022:	31ff      	adds	r1, #255	; 0xff
 8009024:	f7fe ffe0 	bl	8007fe8 <__assert_func>
 8009028:	9b01      	ldr	r3, [sp, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	3314      	adds	r3, #20
 800902e:	469c      	mov	ip, r3
 8009030:	19bb      	adds	r3, r7, r6
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	4463      	add	r3, ip
 8009036:	9303      	str	r3, [sp, #12]
 8009038:	4663      	mov	r3, ip
 800903a:	9903      	ldr	r1, [sp, #12]
 800903c:	428b      	cmp	r3, r1
 800903e:	d32c      	bcc.n	800909a <__multiply+0xb2>
 8009040:	002b      	movs	r3, r5
 8009042:	0022      	movs	r2, r4
 8009044:	3314      	adds	r3, #20
 8009046:	00bf      	lsls	r7, r7, #2
 8009048:	3214      	adds	r2, #20
 800904a:	9306      	str	r3, [sp, #24]
 800904c:	00b6      	lsls	r6, r6, #2
 800904e:	19db      	adds	r3, r3, r7
 8009050:	9304      	str	r3, [sp, #16]
 8009052:	1993      	adds	r3, r2, r6
 8009054:	9307      	str	r3, [sp, #28]
 8009056:	2304      	movs	r3, #4
 8009058:	9305      	str	r3, [sp, #20]
 800905a:	002b      	movs	r3, r5
 800905c:	9904      	ldr	r1, [sp, #16]
 800905e:	3315      	adds	r3, #21
 8009060:	9200      	str	r2, [sp, #0]
 8009062:	4299      	cmp	r1, r3
 8009064:	d305      	bcc.n	8009072 <__multiply+0x8a>
 8009066:	1b4b      	subs	r3, r1, r5
 8009068:	3b15      	subs	r3, #21
 800906a:	089b      	lsrs	r3, r3, #2
 800906c:	3301      	adds	r3, #1
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	9305      	str	r3, [sp, #20]
 8009072:	9b07      	ldr	r3, [sp, #28]
 8009074:	9a00      	ldr	r2, [sp, #0]
 8009076:	429a      	cmp	r2, r3
 8009078:	d311      	bcc.n	800909e <__multiply+0xb6>
 800907a:	9b02      	ldr	r3, [sp, #8]
 800907c:	2b00      	cmp	r3, #0
 800907e:	dd06      	ble.n	800908e <__multiply+0xa6>
 8009080:	9b03      	ldr	r3, [sp, #12]
 8009082:	3b04      	subs	r3, #4
 8009084:	9303      	str	r3, [sp, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	9300      	str	r3, [sp, #0]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d053      	beq.n	8009136 <__multiply+0x14e>
 800908e:	9b01      	ldr	r3, [sp, #4]
 8009090:	9a02      	ldr	r2, [sp, #8]
 8009092:	0018      	movs	r0, r3
 8009094:	611a      	str	r2, [r3, #16]
 8009096:	b009      	add	sp, #36	; 0x24
 8009098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800909a:	c304      	stmia	r3!, {r2}
 800909c:	e7cd      	b.n	800903a <__multiply+0x52>
 800909e:	9b00      	ldr	r3, [sp, #0]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	b298      	uxth	r0, r3
 80090a4:	2800      	cmp	r0, #0
 80090a6:	d01b      	beq.n	80090e0 <__multiply+0xf8>
 80090a8:	4667      	mov	r7, ip
 80090aa:	2400      	movs	r4, #0
 80090ac:	9e06      	ldr	r6, [sp, #24]
 80090ae:	ce02      	ldmia	r6!, {r1}
 80090b0:	683a      	ldr	r2, [r7, #0]
 80090b2:	b28b      	uxth	r3, r1
 80090b4:	4343      	muls	r3, r0
 80090b6:	b292      	uxth	r2, r2
 80090b8:	189b      	adds	r3, r3, r2
 80090ba:	191b      	adds	r3, r3, r4
 80090bc:	0c0c      	lsrs	r4, r1, #16
 80090be:	4344      	muls	r4, r0
 80090c0:	683a      	ldr	r2, [r7, #0]
 80090c2:	0c11      	lsrs	r1, r2, #16
 80090c4:	1861      	adds	r1, r4, r1
 80090c6:	0c1c      	lsrs	r4, r3, #16
 80090c8:	1909      	adds	r1, r1, r4
 80090ca:	0c0c      	lsrs	r4, r1, #16
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	0409      	lsls	r1, r1, #16
 80090d0:	430b      	orrs	r3, r1
 80090d2:	c708      	stmia	r7!, {r3}
 80090d4:	9b04      	ldr	r3, [sp, #16]
 80090d6:	42b3      	cmp	r3, r6
 80090d8:	d8e9      	bhi.n	80090ae <__multiply+0xc6>
 80090da:	4663      	mov	r3, ip
 80090dc:	9a05      	ldr	r2, [sp, #20]
 80090de:	509c      	str	r4, [r3, r2]
 80090e0:	9b00      	ldr	r3, [sp, #0]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	0c1e      	lsrs	r6, r3, #16
 80090e6:	d020      	beq.n	800912a <__multiply+0x142>
 80090e8:	4663      	mov	r3, ip
 80090ea:	002c      	movs	r4, r5
 80090ec:	4660      	mov	r0, ip
 80090ee:	2700      	movs	r7, #0
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	3414      	adds	r4, #20
 80090f4:	6822      	ldr	r2, [r4, #0]
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	b291      	uxth	r1, r2
 80090fa:	4371      	muls	r1, r6
 80090fc:	6802      	ldr	r2, [r0, #0]
 80090fe:	0c12      	lsrs	r2, r2, #16
 8009100:	1889      	adds	r1, r1, r2
 8009102:	19cf      	adds	r7, r1, r7
 8009104:	0439      	lsls	r1, r7, #16
 8009106:	430b      	orrs	r3, r1
 8009108:	6003      	str	r3, [r0, #0]
 800910a:	cc02      	ldmia	r4!, {r1}
 800910c:	6843      	ldr	r3, [r0, #4]
 800910e:	0c09      	lsrs	r1, r1, #16
 8009110:	4371      	muls	r1, r6
 8009112:	b29b      	uxth	r3, r3
 8009114:	0c3f      	lsrs	r7, r7, #16
 8009116:	18cb      	adds	r3, r1, r3
 8009118:	9a04      	ldr	r2, [sp, #16]
 800911a:	19db      	adds	r3, r3, r7
 800911c:	0c1f      	lsrs	r7, r3, #16
 800911e:	3004      	adds	r0, #4
 8009120:	42a2      	cmp	r2, r4
 8009122:	d8e7      	bhi.n	80090f4 <__multiply+0x10c>
 8009124:	4662      	mov	r2, ip
 8009126:	9905      	ldr	r1, [sp, #20]
 8009128:	5053      	str	r3, [r2, r1]
 800912a:	9b00      	ldr	r3, [sp, #0]
 800912c:	3304      	adds	r3, #4
 800912e:	9300      	str	r3, [sp, #0]
 8009130:	2304      	movs	r3, #4
 8009132:	449c      	add	ip, r3
 8009134:	e79d      	b.n	8009072 <__multiply+0x8a>
 8009136:	9b02      	ldr	r3, [sp, #8]
 8009138:	3b01      	subs	r3, #1
 800913a:	9302      	str	r3, [sp, #8]
 800913c:	e79d      	b.n	800907a <__multiply+0x92>
 800913e:	46c0      	nop			; (mov r8, r8)
 8009140:	0800aefe 	.word	0x0800aefe
 8009144:	0800af0f 	.word	0x0800af0f

08009148 <__pow5mult>:
 8009148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800914a:	2303      	movs	r3, #3
 800914c:	0015      	movs	r5, r2
 800914e:	0007      	movs	r7, r0
 8009150:	000e      	movs	r6, r1
 8009152:	401a      	ands	r2, r3
 8009154:	421d      	tst	r5, r3
 8009156:	d008      	beq.n	800916a <__pow5mult+0x22>
 8009158:	4925      	ldr	r1, [pc, #148]	; (80091f0 <__pow5mult+0xa8>)
 800915a:	3a01      	subs	r2, #1
 800915c:	0092      	lsls	r2, r2, #2
 800915e:	5852      	ldr	r2, [r2, r1]
 8009160:	2300      	movs	r3, #0
 8009162:	0031      	movs	r1, r6
 8009164:	f7ff fe9e 	bl	8008ea4 <__multadd>
 8009168:	0006      	movs	r6, r0
 800916a:	10ad      	asrs	r5, r5, #2
 800916c:	d03d      	beq.n	80091ea <__pow5mult+0xa2>
 800916e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009170:	2c00      	cmp	r4, #0
 8009172:	d10f      	bne.n	8009194 <__pow5mult+0x4c>
 8009174:	2010      	movs	r0, #16
 8009176:	f7ff fe0f 	bl	8008d98 <malloc>
 800917a:	1e02      	subs	r2, r0, #0
 800917c:	6278      	str	r0, [r7, #36]	; 0x24
 800917e:	d105      	bne.n	800918c <__pow5mult+0x44>
 8009180:	21d7      	movs	r1, #215	; 0xd7
 8009182:	4b1c      	ldr	r3, [pc, #112]	; (80091f4 <__pow5mult+0xac>)
 8009184:	481c      	ldr	r0, [pc, #112]	; (80091f8 <__pow5mult+0xb0>)
 8009186:	0049      	lsls	r1, r1, #1
 8009188:	f7fe ff2e 	bl	8007fe8 <__assert_func>
 800918c:	6044      	str	r4, [r0, #4]
 800918e:	6084      	str	r4, [r0, #8]
 8009190:	6004      	str	r4, [r0, #0]
 8009192:	60c4      	str	r4, [r0, #12]
 8009194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009196:	689c      	ldr	r4, [r3, #8]
 8009198:	9301      	str	r3, [sp, #4]
 800919a:	2c00      	cmp	r4, #0
 800919c:	d108      	bne.n	80091b0 <__pow5mult+0x68>
 800919e:	0038      	movs	r0, r7
 80091a0:	4916      	ldr	r1, [pc, #88]	; (80091fc <__pow5mult+0xb4>)
 80091a2:	f7ff ff0b 	bl	8008fbc <__i2b>
 80091a6:	9b01      	ldr	r3, [sp, #4]
 80091a8:	0004      	movs	r4, r0
 80091aa:	6098      	str	r0, [r3, #8]
 80091ac:	2300      	movs	r3, #0
 80091ae:	6003      	str	r3, [r0, #0]
 80091b0:	2301      	movs	r3, #1
 80091b2:	421d      	tst	r5, r3
 80091b4:	d00a      	beq.n	80091cc <__pow5mult+0x84>
 80091b6:	0031      	movs	r1, r6
 80091b8:	0022      	movs	r2, r4
 80091ba:	0038      	movs	r0, r7
 80091bc:	f7ff ff14 	bl	8008fe8 <__multiply>
 80091c0:	0031      	movs	r1, r6
 80091c2:	9001      	str	r0, [sp, #4]
 80091c4:	0038      	movs	r0, r7
 80091c6:	f7ff fe49 	bl	8008e5c <_Bfree>
 80091ca:	9e01      	ldr	r6, [sp, #4]
 80091cc:	106d      	asrs	r5, r5, #1
 80091ce:	d00c      	beq.n	80091ea <__pow5mult+0xa2>
 80091d0:	6820      	ldr	r0, [r4, #0]
 80091d2:	2800      	cmp	r0, #0
 80091d4:	d107      	bne.n	80091e6 <__pow5mult+0x9e>
 80091d6:	0022      	movs	r2, r4
 80091d8:	0021      	movs	r1, r4
 80091da:	0038      	movs	r0, r7
 80091dc:	f7ff ff04 	bl	8008fe8 <__multiply>
 80091e0:	2300      	movs	r3, #0
 80091e2:	6020      	str	r0, [r4, #0]
 80091e4:	6003      	str	r3, [r0, #0]
 80091e6:	0004      	movs	r4, r0
 80091e8:	e7e2      	b.n	80091b0 <__pow5mult+0x68>
 80091ea:	0030      	movs	r0, r6
 80091ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80091ee:	46c0      	nop			; (mov r8, r8)
 80091f0:	0800b060 	.word	0x0800b060
 80091f4:	0800ade8 	.word	0x0800ade8
 80091f8:	0800af0f 	.word	0x0800af0f
 80091fc:	00000271 	.word	0x00000271

08009200 <__lshift>:
 8009200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009202:	000c      	movs	r4, r1
 8009204:	0017      	movs	r7, r2
 8009206:	6923      	ldr	r3, [r4, #16]
 8009208:	1155      	asrs	r5, r2, #5
 800920a:	b087      	sub	sp, #28
 800920c:	18eb      	adds	r3, r5, r3
 800920e:	9302      	str	r3, [sp, #8]
 8009210:	3301      	adds	r3, #1
 8009212:	9301      	str	r3, [sp, #4]
 8009214:	6849      	ldr	r1, [r1, #4]
 8009216:	68a3      	ldr	r3, [r4, #8]
 8009218:	9004      	str	r0, [sp, #16]
 800921a:	9a01      	ldr	r2, [sp, #4]
 800921c:	4293      	cmp	r3, r2
 800921e:	db10      	blt.n	8009242 <__lshift+0x42>
 8009220:	9804      	ldr	r0, [sp, #16]
 8009222:	f7ff fdd7 	bl	8008dd4 <_Balloc>
 8009226:	2300      	movs	r3, #0
 8009228:	0002      	movs	r2, r0
 800922a:	0006      	movs	r6, r0
 800922c:	0019      	movs	r1, r3
 800922e:	3214      	adds	r2, #20
 8009230:	4298      	cmp	r0, r3
 8009232:	d10c      	bne.n	800924e <__lshift+0x4e>
 8009234:	21da      	movs	r1, #218	; 0xda
 8009236:	0002      	movs	r2, r0
 8009238:	4b26      	ldr	r3, [pc, #152]	; (80092d4 <__lshift+0xd4>)
 800923a:	4827      	ldr	r0, [pc, #156]	; (80092d8 <__lshift+0xd8>)
 800923c:	31ff      	adds	r1, #255	; 0xff
 800923e:	f7fe fed3 	bl	8007fe8 <__assert_func>
 8009242:	3101      	adds	r1, #1
 8009244:	005b      	lsls	r3, r3, #1
 8009246:	e7e8      	b.n	800921a <__lshift+0x1a>
 8009248:	0098      	lsls	r0, r3, #2
 800924a:	5011      	str	r1, [r2, r0]
 800924c:	3301      	adds	r3, #1
 800924e:	42ab      	cmp	r3, r5
 8009250:	dbfa      	blt.n	8009248 <__lshift+0x48>
 8009252:	43eb      	mvns	r3, r5
 8009254:	17db      	asrs	r3, r3, #31
 8009256:	401d      	ands	r5, r3
 8009258:	211f      	movs	r1, #31
 800925a:	0023      	movs	r3, r4
 800925c:	0038      	movs	r0, r7
 800925e:	00ad      	lsls	r5, r5, #2
 8009260:	1955      	adds	r5, r2, r5
 8009262:	6922      	ldr	r2, [r4, #16]
 8009264:	3314      	adds	r3, #20
 8009266:	0092      	lsls	r2, r2, #2
 8009268:	4008      	ands	r0, r1
 800926a:	4684      	mov	ip, r0
 800926c:	189a      	adds	r2, r3, r2
 800926e:	420f      	tst	r7, r1
 8009270:	d02a      	beq.n	80092c8 <__lshift+0xc8>
 8009272:	3101      	adds	r1, #1
 8009274:	1a09      	subs	r1, r1, r0
 8009276:	9105      	str	r1, [sp, #20]
 8009278:	2100      	movs	r1, #0
 800927a:	9503      	str	r5, [sp, #12]
 800927c:	4667      	mov	r7, ip
 800927e:	6818      	ldr	r0, [r3, #0]
 8009280:	40b8      	lsls	r0, r7
 8009282:	4301      	orrs	r1, r0
 8009284:	9803      	ldr	r0, [sp, #12]
 8009286:	c002      	stmia	r0!, {r1}
 8009288:	cb02      	ldmia	r3!, {r1}
 800928a:	9003      	str	r0, [sp, #12]
 800928c:	9805      	ldr	r0, [sp, #20]
 800928e:	40c1      	lsrs	r1, r0
 8009290:	429a      	cmp	r2, r3
 8009292:	d8f3      	bhi.n	800927c <__lshift+0x7c>
 8009294:	0020      	movs	r0, r4
 8009296:	3015      	adds	r0, #21
 8009298:	2304      	movs	r3, #4
 800929a:	4282      	cmp	r2, r0
 800929c:	d304      	bcc.n	80092a8 <__lshift+0xa8>
 800929e:	1b13      	subs	r3, r2, r4
 80092a0:	3b15      	subs	r3, #21
 80092a2:	089b      	lsrs	r3, r3, #2
 80092a4:	3301      	adds	r3, #1
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	50e9      	str	r1, [r5, r3]
 80092aa:	2900      	cmp	r1, #0
 80092ac:	d002      	beq.n	80092b4 <__lshift+0xb4>
 80092ae:	9b02      	ldr	r3, [sp, #8]
 80092b0:	3302      	adds	r3, #2
 80092b2:	9301      	str	r3, [sp, #4]
 80092b4:	9b01      	ldr	r3, [sp, #4]
 80092b6:	9804      	ldr	r0, [sp, #16]
 80092b8:	3b01      	subs	r3, #1
 80092ba:	0021      	movs	r1, r4
 80092bc:	6133      	str	r3, [r6, #16]
 80092be:	f7ff fdcd 	bl	8008e5c <_Bfree>
 80092c2:	0030      	movs	r0, r6
 80092c4:	b007      	add	sp, #28
 80092c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092c8:	cb02      	ldmia	r3!, {r1}
 80092ca:	c502      	stmia	r5!, {r1}
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d8fb      	bhi.n	80092c8 <__lshift+0xc8>
 80092d0:	e7f0      	b.n	80092b4 <__lshift+0xb4>
 80092d2:	46c0      	nop			; (mov r8, r8)
 80092d4:	0800aefe 	.word	0x0800aefe
 80092d8:	0800af0f 	.word	0x0800af0f

080092dc <__mcmp>:
 80092dc:	6902      	ldr	r2, [r0, #16]
 80092de:	690b      	ldr	r3, [r1, #16]
 80092e0:	b530      	push	{r4, r5, lr}
 80092e2:	0004      	movs	r4, r0
 80092e4:	1ad0      	subs	r0, r2, r3
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d10d      	bne.n	8009306 <__mcmp+0x2a>
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	3414      	adds	r4, #20
 80092ee:	3114      	adds	r1, #20
 80092f0:	18e2      	adds	r2, r4, r3
 80092f2:	18c9      	adds	r1, r1, r3
 80092f4:	3a04      	subs	r2, #4
 80092f6:	3904      	subs	r1, #4
 80092f8:	6815      	ldr	r5, [r2, #0]
 80092fa:	680b      	ldr	r3, [r1, #0]
 80092fc:	429d      	cmp	r5, r3
 80092fe:	d003      	beq.n	8009308 <__mcmp+0x2c>
 8009300:	2001      	movs	r0, #1
 8009302:	429d      	cmp	r5, r3
 8009304:	d303      	bcc.n	800930e <__mcmp+0x32>
 8009306:	bd30      	pop	{r4, r5, pc}
 8009308:	4294      	cmp	r4, r2
 800930a:	d3f3      	bcc.n	80092f4 <__mcmp+0x18>
 800930c:	e7fb      	b.n	8009306 <__mcmp+0x2a>
 800930e:	4240      	negs	r0, r0
 8009310:	e7f9      	b.n	8009306 <__mcmp+0x2a>
	...

08009314 <__mdiff>:
 8009314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009316:	000e      	movs	r6, r1
 8009318:	0007      	movs	r7, r0
 800931a:	0011      	movs	r1, r2
 800931c:	0030      	movs	r0, r6
 800931e:	b087      	sub	sp, #28
 8009320:	0014      	movs	r4, r2
 8009322:	f7ff ffdb 	bl	80092dc <__mcmp>
 8009326:	1e05      	subs	r5, r0, #0
 8009328:	d110      	bne.n	800934c <__mdiff+0x38>
 800932a:	0001      	movs	r1, r0
 800932c:	0038      	movs	r0, r7
 800932e:	f7ff fd51 	bl	8008dd4 <_Balloc>
 8009332:	1e02      	subs	r2, r0, #0
 8009334:	d104      	bne.n	8009340 <__mdiff+0x2c>
 8009336:	4b40      	ldr	r3, [pc, #256]	; (8009438 <__mdiff+0x124>)
 8009338:	4940      	ldr	r1, [pc, #256]	; (800943c <__mdiff+0x128>)
 800933a:	4841      	ldr	r0, [pc, #260]	; (8009440 <__mdiff+0x12c>)
 800933c:	f7fe fe54 	bl	8007fe8 <__assert_func>
 8009340:	2301      	movs	r3, #1
 8009342:	6145      	str	r5, [r0, #20]
 8009344:	6103      	str	r3, [r0, #16]
 8009346:	0010      	movs	r0, r2
 8009348:	b007      	add	sp, #28
 800934a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800934c:	2301      	movs	r3, #1
 800934e:	9301      	str	r3, [sp, #4]
 8009350:	2800      	cmp	r0, #0
 8009352:	db04      	blt.n	800935e <__mdiff+0x4a>
 8009354:	0023      	movs	r3, r4
 8009356:	0034      	movs	r4, r6
 8009358:	001e      	movs	r6, r3
 800935a:	2300      	movs	r3, #0
 800935c:	9301      	str	r3, [sp, #4]
 800935e:	0038      	movs	r0, r7
 8009360:	6861      	ldr	r1, [r4, #4]
 8009362:	f7ff fd37 	bl	8008dd4 <_Balloc>
 8009366:	1e02      	subs	r2, r0, #0
 8009368:	d103      	bne.n	8009372 <__mdiff+0x5e>
 800936a:	2190      	movs	r1, #144	; 0x90
 800936c:	4b32      	ldr	r3, [pc, #200]	; (8009438 <__mdiff+0x124>)
 800936e:	0089      	lsls	r1, r1, #2
 8009370:	e7e3      	b.n	800933a <__mdiff+0x26>
 8009372:	9b01      	ldr	r3, [sp, #4]
 8009374:	2700      	movs	r7, #0
 8009376:	60c3      	str	r3, [r0, #12]
 8009378:	6920      	ldr	r0, [r4, #16]
 800937a:	3414      	adds	r4, #20
 800937c:	9401      	str	r4, [sp, #4]
 800937e:	9b01      	ldr	r3, [sp, #4]
 8009380:	0084      	lsls	r4, r0, #2
 8009382:	191b      	adds	r3, r3, r4
 8009384:	0034      	movs	r4, r6
 8009386:	9302      	str	r3, [sp, #8]
 8009388:	6933      	ldr	r3, [r6, #16]
 800938a:	3414      	adds	r4, #20
 800938c:	0099      	lsls	r1, r3, #2
 800938e:	1863      	adds	r3, r4, r1
 8009390:	9303      	str	r3, [sp, #12]
 8009392:	0013      	movs	r3, r2
 8009394:	3314      	adds	r3, #20
 8009396:	469c      	mov	ip, r3
 8009398:	9305      	str	r3, [sp, #20]
 800939a:	9b01      	ldr	r3, [sp, #4]
 800939c:	9304      	str	r3, [sp, #16]
 800939e:	9b04      	ldr	r3, [sp, #16]
 80093a0:	cc02      	ldmia	r4!, {r1}
 80093a2:	cb20      	ldmia	r3!, {r5}
 80093a4:	9304      	str	r3, [sp, #16]
 80093a6:	b2ab      	uxth	r3, r5
 80093a8:	19df      	adds	r7, r3, r7
 80093aa:	b28b      	uxth	r3, r1
 80093ac:	1afb      	subs	r3, r7, r3
 80093ae:	0c09      	lsrs	r1, r1, #16
 80093b0:	0c2d      	lsrs	r5, r5, #16
 80093b2:	1a6d      	subs	r5, r5, r1
 80093b4:	1419      	asrs	r1, r3, #16
 80093b6:	186d      	adds	r5, r5, r1
 80093b8:	4661      	mov	r1, ip
 80093ba:	142f      	asrs	r7, r5, #16
 80093bc:	b29b      	uxth	r3, r3
 80093be:	042d      	lsls	r5, r5, #16
 80093c0:	432b      	orrs	r3, r5
 80093c2:	c108      	stmia	r1!, {r3}
 80093c4:	9b03      	ldr	r3, [sp, #12]
 80093c6:	468c      	mov	ip, r1
 80093c8:	42a3      	cmp	r3, r4
 80093ca:	d8e8      	bhi.n	800939e <__mdiff+0x8a>
 80093cc:	0031      	movs	r1, r6
 80093ce:	9c03      	ldr	r4, [sp, #12]
 80093d0:	3115      	adds	r1, #21
 80093d2:	2304      	movs	r3, #4
 80093d4:	428c      	cmp	r4, r1
 80093d6:	d304      	bcc.n	80093e2 <__mdiff+0xce>
 80093d8:	1ba3      	subs	r3, r4, r6
 80093da:	3b15      	subs	r3, #21
 80093dc:	089b      	lsrs	r3, r3, #2
 80093de:	3301      	adds	r3, #1
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	9901      	ldr	r1, [sp, #4]
 80093e4:	18cc      	adds	r4, r1, r3
 80093e6:	9905      	ldr	r1, [sp, #20]
 80093e8:	0026      	movs	r6, r4
 80093ea:	18cb      	adds	r3, r1, r3
 80093ec:	469c      	mov	ip, r3
 80093ee:	9902      	ldr	r1, [sp, #8]
 80093f0:	428e      	cmp	r6, r1
 80093f2:	d310      	bcc.n	8009416 <__mdiff+0x102>
 80093f4:	9e02      	ldr	r6, [sp, #8]
 80093f6:	1ee1      	subs	r1, r4, #3
 80093f8:	2500      	movs	r5, #0
 80093fa:	428e      	cmp	r6, r1
 80093fc:	d304      	bcc.n	8009408 <__mdiff+0xf4>
 80093fe:	0031      	movs	r1, r6
 8009400:	3103      	adds	r1, #3
 8009402:	1b0c      	subs	r4, r1, r4
 8009404:	08a4      	lsrs	r4, r4, #2
 8009406:	00a5      	lsls	r5, r4, #2
 8009408:	195b      	adds	r3, r3, r5
 800940a:	3b04      	subs	r3, #4
 800940c:	6819      	ldr	r1, [r3, #0]
 800940e:	2900      	cmp	r1, #0
 8009410:	d00f      	beq.n	8009432 <__mdiff+0x11e>
 8009412:	6110      	str	r0, [r2, #16]
 8009414:	e797      	b.n	8009346 <__mdiff+0x32>
 8009416:	ce02      	ldmia	r6!, {r1}
 8009418:	b28d      	uxth	r5, r1
 800941a:	19ed      	adds	r5, r5, r7
 800941c:	0c0f      	lsrs	r7, r1, #16
 800941e:	1429      	asrs	r1, r5, #16
 8009420:	1879      	adds	r1, r7, r1
 8009422:	140f      	asrs	r7, r1, #16
 8009424:	b2ad      	uxth	r5, r5
 8009426:	0409      	lsls	r1, r1, #16
 8009428:	430d      	orrs	r5, r1
 800942a:	4661      	mov	r1, ip
 800942c:	c120      	stmia	r1!, {r5}
 800942e:	468c      	mov	ip, r1
 8009430:	e7dd      	b.n	80093ee <__mdiff+0xda>
 8009432:	3801      	subs	r0, #1
 8009434:	e7e9      	b.n	800940a <__mdiff+0xf6>
 8009436:	46c0      	nop			; (mov r8, r8)
 8009438:	0800aefe 	.word	0x0800aefe
 800943c:	00000232 	.word	0x00000232
 8009440:	0800af0f 	.word	0x0800af0f

08009444 <__d2b>:
 8009444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009446:	2101      	movs	r1, #1
 8009448:	0014      	movs	r4, r2
 800944a:	001e      	movs	r6, r3
 800944c:	9f08      	ldr	r7, [sp, #32]
 800944e:	f7ff fcc1 	bl	8008dd4 <_Balloc>
 8009452:	1e05      	subs	r5, r0, #0
 8009454:	d105      	bne.n	8009462 <__d2b+0x1e>
 8009456:	0002      	movs	r2, r0
 8009458:	4b26      	ldr	r3, [pc, #152]	; (80094f4 <__d2b+0xb0>)
 800945a:	4927      	ldr	r1, [pc, #156]	; (80094f8 <__d2b+0xb4>)
 800945c:	4827      	ldr	r0, [pc, #156]	; (80094fc <__d2b+0xb8>)
 800945e:	f7fe fdc3 	bl	8007fe8 <__assert_func>
 8009462:	0333      	lsls	r3, r6, #12
 8009464:	0076      	lsls	r6, r6, #1
 8009466:	0b1b      	lsrs	r3, r3, #12
 8009468:	0d76      	lsrs	r6, r6, #21
 800946a:	d124      	bne.n	80094b6 <__d2b+0x72>
 800946c:	9301      	str	r3, [sp, #4]
 800946e:	2c00      	cmp	r4, #0
 8009470:	d027      	beq.n	80094c2 <__d2b+0x7e>
 8009472:	4668      	mov	r0, sp
 8009474:	9400      	str	r4, [sp, #0]
 8009476:	f7ff fd73 	bl	8008f60 <__lo0bits>
 800947a:	9c00      	ldr	r4, [sp, #0]
 800947c:	2800      	cmp	r0, #0
 800947e:	d01e      	beq.n	80094be <__d2b+0x7a>
 8009480:	9b01      	ldr	r3, [sp, #4]
 8009482:	2120      	movs	r1, #32
 8009484:	001a      	movs	r2, r3
 8009486:	1a09      	subs	r1, r1, r0
 8009488:	408a      	lsls	r2, r1
 800948a:	40c3      	lsrs	r3, r0
 800948c:	4322      	orrs	r2, r4
 800948e:	616a      	str	r2, [r5, #20]
 8009490:	9301      	str	r3, [sp, #4]
 8009492:	9c01      	ldr	r4, [sp, #4]
 8009494:	61ac      	str	r4, [r5, #24]
 8009496:	1e63      	subs	r3, r4, #1
 8009498:	419c      	sbcs	r4, r3
 800949a:	3401      	adds	r4, #1
 800949c:	612c      	str	r4, [r5, #16]
 800949e:	2e00      	cmp	r6, #0
 80094a0:	d018      	beq.n	80094d4 <__d2b+0x90>
 80094a2:	4b17      	ldr	r3, [pc, #92]	; (8009500 <__d2b+0xbc>)
 80094a4:	18f6      	adds	r6, r6, r3
 80094a6:	2335      	movs	r3, #53	; 0x35
 80094a8:	1836      	adds	r6, r6, r0
 80094aa:	1a18      	subs	r0, r3, r0
 80094ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ae:	603e      	str	r6, [r7, #0]
 80094b0:	6018      	str	r0, [r3, #0]
 80094b2:	0028      	movs	r0, r5
 80094b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80094b6:	2280      	movs	r2, #128	; 0x80
 80094b8:	0352      	lsls	r2, r2, #13
 80094ba:	4313      	orrs	r3, r2
 80094bc:	e7d6      	b.n	800946c <__d2b+0x28>
 80094be:	616c      	str	r4, [r5, #20]
 80094c0:	e7e7      	b.n	8009492 <__d2b+0x4e>
 80094c2:	a801      	add	r0, sp, #4
 80094c4:	f7ff fd4c 	bl	8008f60 <__lo0bits>
 80094c8:	2401      	movs	r4, #1
 80094ca:	9b01      	ldr	r3, [sp, #4]
 80094cc:	612c      	str	r4, [r5, #16]
 80094ce:	616b      	str	r3, [r5, #20]
 80094d0:	3020      	adds	r0, #32
 80094d2:	e7e4      	b.n	800949e <__d2b+0x5a>
 80094d4:	4b0b      	ldr	r3, [pc, #44]	; (8009504 <__d2b+0xc0>)
 80094d6:	18c0      	adds	r0, r0, r3
 80094d8:	4b0b      	ldr	r3, [pc, #44]	; (8009508 <__d2b+0xc4>)
 80094da:	6038      	str	r0, [r7, #0]
 80094dc:	18e3      	adds	r3, r4, r3
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	18eb      	adds	r3, r5, r3
 80094e2:	6958      	ldr	r0, [r3, #20]
 80094e4:	f7ff fd22 	bl	8008f2c <__hi0bits>
 80094e8:	0164      	lsls	r4, r4, #5
 80094ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ec:	1a24      	subs	r4, r4, r0
 80094ee:	601c      	str	r4, [r3, #0]
 80094f0:	e7df      	b.n	80094b2 <__d2b+0x6e>
 80094f2:	46c0      	nop			; (mov r8, r8)
 80094f4:	0800aefe 	.word	0x0800aefe
 80094f8:	0000030a 	.word	0x0000030a
 80094fc:	0800af0f 	.word	0x0800af0f
 8009500:	fffffbcd 	.word	0xfffffbcd
 8009504:	fffffbce 	.word	0xfffffbce
 8009508:	3fffffff 	.word	0x3fffffff

0800950c <_calloc_r>:
 800950c:	b570      	push	{r4, r5, r6, lr}
 800950e:	0c13      	lsrs	r3, r2, #16
 8009510:	0c0d      	lsrs	r5, r1, #16
 8009512:	d11e      	bne.n	8009552 <_calloc_r+0x46>
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10c      	bne.n	8009532 <_calloc_r+0x26>
 8009518:	b289      	uxth	r1, r1
 800951a:	b294      	uxth	r4, r2
 800951c:	434c      	muls	r4, r1
 800951e:	0021      	movs	r1, r4
 8009520:	f000 f88c 	bl	800963c <_malloc_r>
 8009524:	1e05      	subs	r5, r0, #0
 8009526:	d01b      	beq.n	8009560 <_calloc_r+0x54>
 8009528:	0022      	movs	r2, r4
 800952a:	2100      	movs	r1, #0
 800952c:	f7fe f84a 	bl	80075c4 <memset>
 8009530:	e016      	b.n	8009560 <_calloc_r+0x54>
 8009532:	1c1d      	adds	r5, r3, #0
 8009534:	1c0b      	adds	r3, r1, #0
 8009536:	b292      	uxth	r2, r2
 8009538:	b289      	uxth	r1, r1
 800953a:	b29c      	uxth	r4, r3
 800953c:	4351      	muls	r1, r2
 800953e:	b2ab      	uxth	r3, r5
 8009540:	4363      	muls	r3, r4
 8009542:	0c0c      	lsrs	r4, r1, #16
 8009544:	191c      	adds	r4, r3, r4
 8009546:	0c22      	lsrs	r2, r4, #16
 8009548:	d107      	bne.n	800955a <_calloc_r+0x4e>
 800954a:	0424      	lsls	r4, r4, #16
 800954c:	b289      	uxth	r1, r1
 800954e:	430c      	orrs	r4, r1
 8009550:	e7e5      	b.n	800951e <_calloc_r+0x12>
 8009552:	2b00      	cmp	r3, #0
 8009554:	d101      	bne.n	800955a <_calloc_r+0x4e>
 8009556:	1c13      	adds	r3, r2, #0
 8009558:	e7ed      	b.n	8009536 <_calloc_r+0x2a>
 800955a:	230c      	movs	r3, #12
 800955c:	2500      	movs	r5, #0
 800955e:	6003      	str	r3, [r0, #0]
 8009560:	0028      	movs	r0, r5
 8009562:	bd70      	pop	{r4, r5, r6, pc}

08009564 <_free_r>:
 8009564:	b570      	push	{r4, r5, r6, lr}
 8009566:	0005      	movs	r5, r0
 8009568:	2900      	cmp	r1, #0
 800956a:	d010      	beq.n	800958e <_free_r+0x2a>
 800956c:	1f0c      	subs	r4, r1, #4
 800956e:	6823      	ldr	r3, [r4, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	da00      	bge.n	8009576 <_free_r+0x12>
 8009574:	18e4      	adds	r4, r4, r3
 8009576:	0028      	movs	r0, r5
 8009578:	f000 fee6 	bl	800a348 <__malloc_lock>
 800957c:	4a1d      	ldr	r2, [pc, #116]	; (80095f4 <_free_r+0x90>)
 800957e:	6813      	ldr	r3, [r2, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d105      	bne.n	8009590 <_free_r+0x2c>
 8009584:	6063      	str	r3, [r4, #4]
 8009586:	6014      	str	r4, [r2, #0]
 8009588:	0028      	movs	r0, r5
 800958a:	f000 fee5 	bl	800a358 <__malloc_unlock>
 800958e:	bd70      	pop	{r4, r5, r6, pc}
 8009590:	42a3      	cmp	r3, r4
 8009592:	d908      	bls.n	80095a6 <_free_r+0x42>
 8009594:	6821      	ldr	r1, [r4, #0]
 8009596:	1860      	adds	r0, r4, r1
 8009598:	4283      	cmp	r3, r0
 800959a:	d1f3      	bne.n	8009584 <_free_r+0x20>
 800959c:	6818      	ldr	r0, [r3, #0]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	1841      	adds	r1, r0, r1
 80095a2:	6021      	str	r1, [r4, #0]
 80095a4:	e7ee      	b.n	8009584 <_free_r+0x20>
 80095a6:	001a      	movs	r2, r3
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d001      	beq.n	80095b2 <_free_r+0x4e>
 80095ae:	42a3      	cmp	r3, r4
 80095b0:	d9f9      	bls.n	80095a6 <_free_r+0x42>
 80095b2:	6811      	ldr	r1, [r2, #0]
 80095b4:	1850      	adds	r0, r2, r1
 80095b6:	42a0      	cmp	r0, r4
 80095b8:	d10b      	bne.n	80095d2 <_free_r+0x6e>
 80095ba:	6820      	ldr	r0, [r4, #0]
 80095bc:	1809      	adds	r1, r1, r0
 80095be:	1850      	adds	r0, r2, r1
 80095c0:	6011      	str	r1, [r2, #0]
 80095c2:	4283      	cmp	r3, r0
 80095c4:	d1e0      	bne.n	8009588 <_free_r+0x24>
 80095c6:	6818      	ldr	r0, [r3, #0]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	1841      	adds	r1, r0, r1
 80095cc:	6011      	str	r1, [r2, #0]
 80095ce:	6053      	str	r3, [r2, #4]
 80095d0:	e7da      	b.n	8009588 <_free_r+0x24>
 80095d2:	42a0      	cmp	r0, r4
 80095d4:	d902      	bls.n	80095dc <_free_r+0x78>
 80095d6:	230c      	movs	r3, #12
 80095d8:	602b      	str	r3, [r5, #0]
 80095da:	e7d5      	b.n	8009588 <_free_r+0x24>
 80095dc:	6821      	ldr	r1, [r4, #0]
 80095de:	1860      	adds	r0, r4, r1
 80095e0:	4283      	cmp	r3, r0
 80095e2:	d103      	bne.n	80095ec <_free_r+0x88>
 80095e4:	6818      	ldr	r0, [r3, #0]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	1841      	adds	r1, r0, r1
 80095ea:	6021      	str	r1, [r4, #0]
 80095ec:	6063      	str	r3, [r4, #4]
 80095ee:	6054      	str	r4, [r2, #4]
 80095f0:	e7ca      	b.n	8009588 <_free_r+0x24>
 80095f2:	46c0      	nop			; (mov r8, r8)
 80095f4:	20002b1c 	.word	0x20002b1c

080095f8 <sbrk_aligned>:
 80095f8:	b570      	push	{r4, r5, r6, lr}
 80095fa:	4e0f      	ldr	r6, [pc, #60]	; (8009638 <sbrk_aligned+0x40>)
 80095fc:	000d      	movs	r5, r1
 80095fe:	6831      	ldr	r1, [r6, #0]
 8009600:	0004      	movs	r4, r0
 8009602:	2900      	cmp	r1, #0
 8009604:	d102      	bne.n	800960c <sbrk_aligned+0x14>
 8009606:	f000 fb53 	bl	8009cb0 <_sbrk_r>
 800960a:	6030      	str	r0, [r6, #0]
 800960c:	0029      	movs	r1, r5
 800960e:	0020      	movs	r0, r4
 8009610:	f000 fb4e 	bl	8009cb0 <_sbrk_r>
 8009614:	1c43      	adds	r3, r0, #1
 8009616:	d00a      	beq.n	800962e <sbrk_aligned+0x36>
 8009618:	2303      	movs	r3, #3
 800961a:	1cc5      	adds	r5, r0, #3
 800961c:	439d      	bics	r5, r3
 800961e:	42a8      	cmp	r0, r5
 8009620:	d007      	beq.n	8009632 <sbrk_aligned+0x3a>
 8009622:	1a29      	subs	r1, r5, r0
 8009624:	0020      	movs	r0, r4
 8009626:	f000 fb43 	bl	8009cb0 <_sbrk_r>
 800962a:	1c43      	adds	r3, r0, #1
 800962c:	d101      	bne.n	8009632 <sbrk_aligned+0x3a>
 800962e:	2501      	movs	r5, #1
 8009630:	426d      	negs	r5, r5
 8009632:	0028      	movs	r0, r5
 8009634:	bd70      	pop	{r4, r5, r6, pc}
 8009636:	46c0      	nop			; (mov r8, r8)
 8009638:	20002b20 	.word	0x20002b20

0800963c <_malloc_r>:
 800963c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800963e:	2203      	movs	r2, #3
 8009640:	1ccb      	adds	r3, r1, #3
 8009642:	4393      	bics	r3, r2
 8009644:	3308      	adds	r3, #8
 8009646:	0006      	movs	r6, r0
 8009648:	001f      	movs	r7, r3
 800964a:	2b0c      	cmp	r3, #12
 800964c:	d232      	bcs.n	80096b4 <_malloc_r+0x78>
 800964e:	270c      	movs	r7, #12
 8009650:	42b9      	cmp	r1, r7
 8009652:	d831      	bhi.n	80096b8 <_malloc_r+0x7c>
 8009654:	0030      	movs	r0, r6
 8009656:	f000 fe77 	bl	800a348 <__malloc_lock>
 800965a:	4d32      	ldr	r5, [pc, #200]	; (8009724 <_malloc_r+0xe8>)
 800965c:	682b      	ldr	r3, [r5, #0]
 800965e:	001c      	movs	r4, r3
 8009660:	2c00      	cmp	r4, #0
 8009662:	d12e      	bne.n	80096c2 <_malloc_r+0x86>
 8009664:	0039      	movs	r1, r7
 8009666:	0030      	movs	r0, r6
 8009668:	f7ff ffc6 	bl	80095f8 <sbrk_aligned>
 800966c:	0004      	movs	r4, r0
 800966e:	1c43      	adds	r3, r0, #1
 8009670:	d11e      	bne.n	80096b0 <_malloc_r+0x74>
 8009672:	682c      	ldr	r4, [r5, #0]
 8009674:	0025      	movs	r5, r4
 8009676:	2d00      	cmp	r5, #0
 8009678:	d14a      	bne.n	8009710 <_malloc_r+0xd4>
 800967a:	6823      	ldr	r3, [r4, #0]
 800967c:	0029      	movs	r1, r5
 800967e:	18e3      	adds	r3, r4, r3
 8009680:	0030      	movs	r0, r6
 8009682:	9301      	str	r3, [sp, #4]
 8009684:	f000 fb14 	bl	8009cb0 <_sbrk_r>
 8009688:	9b01      	ldr	r3, [sp, #4]
 800968a:	4283      	cmp	r3, r0
 800968c:	d143      	bne.n	8009716 <_malloc_r+0xda>
 800968e:	6823      	ldr	r3, [r4, #0]
 8009690:	3703      	adds	r7, #3
 8009692:	1aff      	subs	r7, r7, r3
 8009694:	2303      	movs	r3, #3
 8009696:	439f      	bics	r7, r3
 8009698:	3708      	adds	r7, #8
 800969a:	2f0c      	cmp	r7, #12
 800969c:	d200      	bcs.n	80096a0 <_malloc_r+0x64>
 800969e:	270c      	movs	r7, #12
 80096a0:	0039      	movs	r1, r7
 80096a2:	0030      	movs	r0, r6
 80096a4:	f7ff ffa8 	bl	80095f8 <sbrk_aligned>
 80096a8:	1c43      	adds	r3, r0, #1
 80096aa:	d034      	beq.n	8009716 <_malloc_r+0xda>
 80096ac:	6823      	ldr	r3, [r4, #0]
 80096ae:	19df      	adds	r7, r3, r7
 80096b0:	6027      	str	r7, [r4, #0]
 80096b2:	e013      	b.n	80096dc <_malloc_r+0xa0>
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	dacb      	bge.n	8009650 <_malloc_r+0x14>
 80096b8:	230c      	movs	r3, #12
 80096ba:	2500      	movs	r5, #0
 80096bc:	6033      	str	r3, [r6, #0]
 80096be:	0028      	movs	r0, r5
 80096c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80096c2:	6822      	ldr	r2, [r4, #0]
 80096c4:	1bd1      	subs	r1, r2, r7
 80096c6:	d420      	bmi.n	800970a <_malloc_r+0xce>
 80096c8:	290b      	cmp	r1, #11
 80096ca:	d917      	bls.n	80096fc <_malloc_r+0xc0>
 80096cc:	19e2      	adds	r2, r4, r7
 80096ce:	6027      	str	r7, [r4, #0]
 80096d0:	42a3      	cmp	r3, r4
 80096d2:	d111      	bne.n	80096f8 <_malloc_r+0xbc>
 80096d4:	602a      	str	r2, [r5, #0]
 80096d6:	6863      	ldr	r3, [r4, #4]
 80096d8:	6011      	str	r1, [r2, #0]
 80096da:	6053      	str	r3, [r2, #4]
 80096dc:	0030      	movs	r0, r6
 80096de:	0025      	movs	r5, r4
 80096e0:	f000 fe3a 	bl	800a358 <__malloc_unlock>
 80096e4:	2207      	movs	r2, #7
 80096e6:	350b      	adds	r5, #11
 80096e8:	1d23      	adds	r3, r4, #4
 80096ea:	4395      	bics	r5, r2
 80096ec:	1aea      	subs	r2, r5, r3
 80096ee:	429d      	cmp	r5, r3
 80096f0:	d0e5      	beq.n	80096be <_malloc_r+0x82>
 80096f2:	1b5b      	subs	r3, r3, r5
 80096f4:	50a3      	str	r3, [r4, r2]
 80096f6:	e7e2      	b.n	80096be <_malloc_r+0x82>
 80096f8:	605a      	str	r2, [r3, #4]
 80096fa:	e7ec      	b.n	80096d6 <_malloc_r+0x9a>
 80096fc:	6862      	ldr	r2, [r4, #4]
 80096fe:	42a3      	cmp	r3, r4
 8009700:	d101      	bne.n	8009706 <_malloc_r+0xca>
 8009702:	602a      	str	r2, [r5, #0]
 8009704:	e7ea      	b.n	80096dc <_malloc_r+0xa0>
 8009706:	605a      	str	r2, [r3, #4]
 8009708:	e7e8      	b.n	80096dc <_malloc_r+0xa0>
 800970a:	0023      	movs	r3, r4
 800970c:	6864      	ldr	r4, [r4, #4]
 800970e:	e7a7      	b.n	8009660 <_malloc_r+0x24>
 8009710:	002c      	movs	r4, r5
 8009712:	686d      	ldr	r5, [r5, #4]
 8009714:	e7af      	b.n	8009676 <_malloc_r+0x3a>
 8009716:	230c      	movs	r3, #12
 8009718:	0030      	movs	r0, r6
 800971a:	6033      	str	r3, [r6, #0]
 800971c:	f000 fe1c 	bl	800a358 <__malloc_unlock>
 8009720:	e7cd      	b.n	80096be <_malloc_r+0x82>
 8009722:	46c0      	nop			; (mov r8, r8)
 8009724:	20002b1c 	.word	0x20002b1c

08009728 <__ssputs_r>:
 8009728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800972a:	688e      	ldr	r6, [r1, #8]
 800972c:	b085      	sub	sp, #20
 800972e:	0007      	movs	r7, r0
 8009730:	000c      	movs	r4, r1
 8009732:	9203      	str	r2, [sp, #12]
 8009734:	9301      	str	r3, [sp, #4]
 8009736:	429e      	cmp	r6, r3
 8009738:	d83c      	bhi.n	80097b4 <__ssputs_r+0x8c>
 800973a:	2390      	movs	r3, #144	; 0x90
 800973c:	898a      	ldrh	r2, [r1, #12]
 800973e:	00db      	lsls	r3, r3, #3
 8009740:	421a      	tst	r2, r3
 8009742:	d034      	beq.n	80097ae <__ssputs_r+0x86>
 8009744:	6909      	ldr	r1, [r1, #16]
 8009746:	6823      	ldr	r3, [r4, #0]
 8009748:	6960      	ldr	r0, [r4, #20]
 800974a:	1a5b      	subs	r3, r3, r1
 800974c:	9302      	str	r3, [sp, #8]
 800974e:	2303      	movs	r3, #3
 8009750:	4343      	muls	r3, r0
 8009752:	0fdd      	lsrs	r5, r3, #31
 8009754:	18ed      	adds	r5, r5, r3
 8009756:	9b01      	ldr	r3, [sp, #4]
 8009758:	9802      	ldr	r0, [sp, #8]
 800975a:	3301      	adds	r3, #1
 800975c:	181b      	adds	r3, r3, r0
 800975e:	106d      	asrs	r5, r5, #1
 8009760:	42ab      	cmp	r3, r5
 8009762:	d900      	bls.n	8009766 <__ssputs_r+0x3e>
 8009764:	001d      	movs	r5, r3
 8009766:	0553      	lsls	r3, r2, #21
 8009768:	d532      	bpl.n	80097d0 <__ssputs_r+0xa8>
 800976a:	0029      	movs	r1, r5
 800976c:	0038      	movs	r0, r7
 800976e:	f7ff ff65 	bl	800963c <_malloc_r>
 8009772:	1e06      	subs	r6, r0, #0
 8009774:	d109      	bne.n	800978a <__ssputs_r+0x62>
 8009776:	230c      	movs	r3, #12
 8009778:	603b      	str	r3, [r7, #0]
 800977a:	2340      	movs	r3, #64	; 0x40
 800977c:	2001      	movs	r0, #1
 800977e:	89a2      	ldrh	r2, [r4, #12]
 8009780:	4240      	negs	r0, r0
 8009782:	4313      	orrs	r3, r2
 8009784:	81a3      	strh	r3, [r4, #12]
 8009786:	b005      	add	sp, #20
 8009788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800978a:	9a02      	ldr	r2, [sp, #8]
 800978c:	6921      	ldr	r1, [r4, #16]
 800978e:	f7ff fb18 	bl	8008dc2 <memcpy>
 8009792:	89a3      	ldrh	r3, [r4, #12]
 8009794:	4a14      	ldr	r2, [pc, #80]	; (80097e8 <__ssputs_r+0xc0>)
 8009796:	401a      	ands	r2, r3
 8009798:	2380      	movs	r3, #128	; 0x80
 800979a:	4313      	orrs	r3, r2
 800979c:	81a3      	strh	r3, [r4, #12]
 800979e:	9b02      	ldr	r3, [sp, #8]
 80097a0:	6126      	str	r6, [r4, #16]
 80097a2:	18f6      	adds	r6, r6, r3
 80097a4:	6026      	str	r6, [r4, #0]
 80097a6:	6165      	str	r5, [r4, #20]
 80097a8:	9e01      	ldr	r6, [sp, #4]
 80097aa:	1aed      	subs	r5, r5, r3
 80097ac:	60a5      	str	r5, [r4, #8]
 80097ae:	9b01      	ldr	r3, [sp, #4]
 80097b0:	429e      	cmp	r6, r3
 80097b2:	d900      	bls.n	80097b6 <__ssputs_r+0x8e>
 80097b4:	9e01      	ldr	r6, [sp, #4]
 80097b6:	0032      	movs	r2, r6
 80097b8:	9903      	ldr	r1, [sp, #12]
 80097ba:	6820      	ldr	r0, [r4, #0]
 80097bc:	f000 fdb0 	bl	800a320 <memmove>
 80097c0:	68a3      	ldr	r3, [r4, #8]
 80097c2:	2000      	movs	r0, #0
 80097c4:	1b9b      	subs	r3, r3, r6
 80097c6:	60a3      	str	r3, [r4, #8]
 80097c8:	6823      	ldr	r3, [r4, #0]
 80097ca:	199e      	adds	r6, r3, r6
 80097cc:	6026      	str	r6, [r4, #0]
 80097ce:	e7da      	b.n	8009786 <__ssputs_r+0x5e>
 80097d0:	002a      	movs	r2, r5
 80097d2:	0038      	movs	r0, r7
 80097d4:	f000 fdc8 	bl	800a368 <_realloc_r>
 80097d8:	1e06      	subs	r6, r0, #0
 80097da:	d1e0      	bne.n	800979e <__ssputs_r+0x76>
 80097dc:	0038      	movs	r0, r7
 80097de:	6921      	ldr	r1, [r4, #16]
 80097e0:	f7ff fec0 	bl	8009564 <_free_r>
 80097e4:	e7c7      	b.n	8009776 <__ssputs_r+0x4e>
 80097e6:	46c0      	nop			; (mov r8, r8)
 80097e8:	fffffb7f 	.word	0xfffffb7f

080097ec <_svfiprintf_r>:
 80097ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097ee:	b0a1      	sub	sp, #132	; 0x84
 80097f0:	9003      	str	r0, [sp, #12]
 80097f2:	001d      	movs	r5, r3
 80097f4:	898b      	ldrh	r3, [r1, #12]
 80097f6:	000f      	movs	r7, r1
 80097f8:	0016      	movs	r6, r2
 80097fa:	061b      	lsls	r3, r3, #24
 80097fc:	d511      	bpl.n	8009822 <_svfiprintf_r+0x36>
 80097fe:	690b      	ldr	r3, [r1, #16]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d10e      	bne.n	8009822 <_svfiprintf_r+0x36>
 8009804:	2140      	movs	r1, #64	; 0x40
 8009806:	f7ff ff19 	bl	800963c <_malloc_r>
 800980a:	6038      	str	r0, [r7, #0]
 800980c:	6138      	str	r0, [r7, #16]
 800980e:	2800      	cmp	r0, #0
 8009810:	d105      	bne.n	800981e <_svfiprintf_r+0x32>
 8009812:	230c      	movs	r3, #12
 8009814:	9a03      	ldr	r2, [sp, #12]
 8009816:	3801      	subs	r0, #1
 8009818:	6013      	str	r3, [r2, #0]
 800981a:	b021      	add	sp, #132	; 0x84
 800981c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800981e:	2340      	movs	r3, #64	; 0x40
 8009820:	617b      	str	r3, [r7, #20]
 8009822:	2300      	movs	r3, #0
 8009824:	ac08      	add	r4, sp, #32
 8009826:	6163      	str	r3, [r4, #20]
 8009828:	3320      	adds	r3, #32
 800982a:	7663      	strb	r3, [r4, #25]
 800982c:	3310      	adds	r3, #16
 800982e:	76a3      	strb	r3, [r4, #26]
 8009830:	9507      	str	r5, [sp, #28]
 8009832:	0035      	movs	r5, r6
 8009834:	782b      	ldrb	r3, [r5, #0]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d001      	beq.n	800983e <_svfiprintf_r+0x52>
 800983a:	2b25      	cmp	r3, #37	; 0x25
 800983c:	d147      	bne.n	80098ce <_svfiprintf_r+0xe2>
 800983e:	1bab      	subs	r3, r5, r6
 8009840:	9305      	str	r3, [sp, #20]
 8009842:	42b5      	cmp	r5, r6
 8009844:	d00c      	beq.n	8009860 <_svfiprintf_r+0x74>
 8009846:	0032      	movs	r2, r6
 8009848:	0039      	movs	r1, r7
 800984a:	9803      	ldr	r0, [sp, #12]
 800984c:	f7ff ff6c 	bl	8009728 <__ssputs_r>
 8009850:	1c43      	adds	r3, r0, #1
 8009852:	d100      	bne.n	8009856 <_svfiprintf_r+0x6a>
 8009854:	e0ae      	b.n	80099b4 <_svfiprintf_r+0x1c8>
 8009856:	6962      	ldr	r2, [r4, #20]
 8009858:	9b05      	ldr	r3, [sp, #20]
 800985a:	4694      	mov	ip, r2
 800985c:	4463      	add	r3, ip
 800985e:	6163      	str	r3, [r4, #20]
 8009860:	782b      	ldrb	r3, [r5, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d100      	bne.n	8009868 <_svfiprintf_r+0x7c>
 8009866:	e0a5      	b.n	80099b4 <_svfiprintf_r+0x1c8>
 8009868:	2201      	movs	r2, #1
 800986a:	2300      	movs	r3, #0
 800986c:	4252      	negs	r2, r2
 800986e:	6062      	str	r2, [r4, #4]
 8009870:	a904      	add	r1, sp, #16
 8009872:	3254      	adds	r2, #84	; 0x54
 8009874:	1852      	adds	r2, r2, r1
 8009876:	1c6e      	adds	r6, r5, #1
 8009878:	6023      	str	r3, [r4, #0]
 800987a:	60e3      	str	r3, [r4, #12]
 800987c:	60a3      	str	r3, [r4, #8]
 800987e:	7013      	strb	r3, [r2, #0]
 8009880:	65a3      	str	r3, [r4, #88]	; 0x58
 8009882:	2205      	movs	r2, #5
 8009884:	7831      	ldrb	r1, [r6, #0]
 8009886:	4854      	ldr	r0, [pc, #336]	; (80099d8 <_svfiprintf_r+0x1ec>)
 8009888:	f7ff fa90 	bl	8008dac <memchr>
 800988c:	1c75      	adds	r5, r6, #1
 800988e:	2800      	cmp	r0, #0
 8009890:	d11f      	bne.n	80098d2 <_svfiprintf_r+0xe6>
 8009892:	6822      	ldr	r2, [r4, #0]
 8009894:	06d3      	lsls	r3, r2, #27
 8009896:	d504      	bpl.n	80098a2 <_svfiprintf_r+0xb6>
 8009898:	2353      	movs	r3, #83	; 0x53
 800989a:	a904      	add	r1, sp, #16
 800989c:	185b      	adds	r3, r3, r1
 800989e:	2120      	movs	r1, #32
 80098a0:	7019      	strb	r1, [r3, #0]
 80098a2:	0713      	lsls	r3, r2, #28
 80098a4:	d504      	bpl.n	80098b0 <_svfiprintf_r+0xc4>
 80098a6:	2353      	movs	r3, #83	; 0x53
 80098a8:	a904      	add	r1, sp, #16
 80098aa:	185b      	adds	r3, r3, r1
 80098ac:	212b      	movs	r1, #43	; 0x2b
 80098ae:	7019      	strb	r1, [r3, #0]
 80098b0:	7833      	ldrb	r3, [r6, #0]
 80098b2:	2b2a      	cmp	r3, #42	; 0x2a
 80098b4:	d016      	beq.n	80098e4 <_svfiprintf_r+0xf8>
 80098b6:	0035      	movs	r5, r6
 80098b8:	2100      	movs	r1, #0
 80098ba:	200a      	movs	r0, #10
 80098bc:	68e3      	ldr	r3, [r4, #12]
 80098be:	782a      	ldrb	r2, [r5, #0]
 80098c0:	1c6e      	adds	r6, r5, #1
 80098c2:	3a30      	subs	r2, #48	; 0x30
 80098c4:	2a09      	cmp	r2, #9
 80098c6:	d94e      	bls.n	8009966 <_svfiprintf_r+0x17a>
 80098c8:	2900      	cmp	r1, #0
 80098ca:	d111      	bne.n	80098f0 <_svfiprintf_r+0x104>
 80098cc:	e017      	b.n	80098fe <_svfiprintf_r+0x112>
 80098ce:	3501      	adds	r5, #1
 80098d0:	e7b0      	b.n	8009834 <_svfiprintf_r+0x48>
 80098d2:	4b41      	ldr	r3, [pc, #260]	; (80099d8 <_svfiprintf_r+0x1ec>)
 80098d4:	6822      	ldr	r2, [r4, #0]
 80098d6:	1ac0      	subs	r0, r0, r3
 80098d8:	2301      	movs	r3, #1
 80098da:	4083      	lsls	r3, r0
 80098dc:	4313      	orrs	r3, r2
 80098de:	002e      	movs	r6, r5
 80098e0:	6023      	str	r3, [r4, #0]
 80098e2:	e7ce      	b.n	8009882 <_svfiprintf_r+0x96>
 80098e4:	9b07      	ldr	r3, [sp, #28]
 80098e6:	1d19      	adds	r1, r3, #4
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	9107      	str	r1, [sp, #28]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	db01      	blt.n	80098f4 <_svfiprintf_r+0x108>
 80098f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80098f2:	e004      	b.n	80098fe <_svfiprintf_r+0x112>
 80098f4:	425b      	negs	r3, r3
 80098f6:	60e3      	str	r3, [r4, #12]
 80098f8:	2302      	movs	r3, #2
 80098fa:	4313      	orrs	r3, r2
 80098fc:	6023      	str	r3, [r4, #0]
 80098fe:	782b      	ldrb	r3, [r5, #0]
 8009900:	2b2e      	cmp	r3, #46	; 0x2e
 8009902:	d10a      	bne.n	800991a <_svfiprintf_r+0x12e>
 8009904:	786b      	ldrb	r3, [r5, #1]
 8009906:	2b2a      	cmp	r3, #42	; 0x2a
 8009908:	d135      	bne.n	8009976 <_svfiprintf_r+0x18a>
 800990a:	9b07      	ldr	r3, [sp, #28]
 800990c:	3502      	adds	r5, #2
 800990e:	1d1a      	adds	r2, r3, #4
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	9207      	str	r2, [sp, #28]
 8009914:	2b00      	cmp	r3, #0
 8009916:	db2b      	blt.n	8009970 <_svfiprintf_r+0x184>
 8009918:	9309      	str	r3, [sp, #36]	; 0x24
 800991a:	4e30      	ldr	r6, [pc, #192]	; (80099dc <_svfiprintf_r+0x1f0>)
 800991c:	2203      	movs	r2, #3
 800991e:	0030      	movs	r0, r6
 8009920:	7829      	ldrb	r1, [r5, #0]
 8009922:	f7ff fa43 	bl	8008dac <memchr>
 8009926:	2800      	cmp	r0, #0
 8009928:	d006      	beq.n	8009938 <_svfiprintf_r+0x14c>
 800992a:	2340      	movs	r3, #64	; 0x40
 800992c:	1b80      	subs	r0, r0, r6
 800992e:	4083      	lsls	r3, r0
 8009930:	6822      	ldr	r2, [r4, #0]
 8009932:	3501      	adds	r5, #1
 8009934:	4313      	orrs	r3, r2
 8009936:	6023      	str	r3, [r4, #0]
 8009938:	7829      	ldrb	r1, [r5, #0]
 800993a:	2206      	movs	r2, #6
 800993c:	4828      	ldr	r0, [pc, #160]	; (80099e0 <_svfiprintf_r+0x1f4>)
 800993e:	1c6e      	adds	r6, r5, #1
 8009940:	7621      	strb	r1, [r4, #24]
 8009942:	f7ff fa33 	bl	8008dac <memchr>
 8009946:	2800      	cmp	r0, #0
 8009948:	d03c      	beq.n	80099c4 <_svfiprintf_r+0x1d8>
 800994a:	4b26      	ldr	r3, [pc, #152]	; (80099e4 <_svfiprintf_r+0x1f8>)
 800994c:	2b00      	cmp	r3, #0
 800994e:	d125      	bne.n	800999c <_svfiprintf_r+0x1b0>
 8009950:	2207      	movs	r2, #7
 8009952:	9b07      	ldr	r3, [sp, #28]
 8009954:	3307      	adds	r3, #7
 8009956:	4393      	bics	r3, r2
 8009958:	3308      	adds	r3, #8
 800995a:	9307      	str	r3, [sp, #28]
 800995c:	6963      	ldr	r3, [r4, #20]
 800995e:	9a04      	ldr	r2, [sp, #16]
 8009960:	189b      	adds	r3, r3, r2
 8009962:	6163      	str	r3, [r4, #20]
 8009964:	e765      	b.n	8009832 <_svfiprintf_r+0x46>
 8009966:	4343      	muls	r3, r0
 8009968:	0035      	movs	r5, r6
 800996a:	2101      	movs	r1, #1
 800996c:	189b      	adds	r3, r3, r2
 800996e:	e7a6      	b.n	80098be <_svfiprintf_r+0xd2>
 8009970:	2301      	movs	r3, #1
 8009972:	425b      	negs	r3, r3
 8009974:	e7d0      	b.n	8009918 <_svfiprintf_r+0x12c>
 8009976:	2300      	movs	r3, #0
 8009978:	200a      	movs	r0, #10
 800997a:	001a      	movs	r2, r3
 800997c:	3501      	adds	r5, #1
 800997e:	6063      	str	r3, [r4, #4]
 8009980:	7829      	ldrb	r1, [r5, #0]
 8009982:	1c6e      	adds	r6, r5, #1
 8009984:	3930      	subs	r1, #48	; 0x30
 8009986:	2909      	cmp	r1, #9
 8009988:	d903      	bls.n	8009992 <_svfiprintf_r+0x1a6>
 800998a:	2b00      	cmp	r3, #0
 800998c:	d0c5      	beq.n	800991a <_svfiprintf_r+0x12e>
 800998e:	9209      	str	r2, [sp, #36]	; 0x24
 8009990:	e7c3      	b.n	800991a <_svfiprintf_r+0x12e>
 8009992:	4342      	muls	r2, r0
 8009994:	0035      	movs	r5, r6
 8009996:	2301      	movs	r3, #1
 8009998:	1852      	adds	r2, r2, r1
 800999a:	e7f1      	b.n	8009980 <_svfiprintf_r+0x194>
 800999c:	ab07      	add	r3, sp, #28
 800999e:	9300      	str	r3, [sp, #0]
 80099a0:	003a      	movs	r2, r7
 80099a2:	0021      	movs	r1, r4
 80099a4:	4b10      	ldr	r3, [pc, #64]	; (80099e8 <_svfiprintf_r+0x1fc>)
 80099a6:	9803      	ldr	r0, [sp, #12]
 80099a8:	f7fd febe 	bl	8007728 <_printf_float>
 80099ac:	9004      	str	r0, [sp, #16]
 80099ae:	9b04      	ldr	r3, [sp, #16]
 80099b0:	3301      	adds	r3, #1
 80099b2:	d1d3      	bne.n	800995c <_svfiprintf_r+0x170>
 80099b4:	89bb      	ldrh	r3, [r7, #12]
 80099b6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80099b8:	065b      	lsls	r3, r3, #25
 80099ba:	d400      	bmi.n	80099be <_svfiprintf_r+0x1d2>
 80099bc:	e72d      	b.n	800981a <_svfiprintf_r+0x2e>
 80099be:	2001      	movs	r0, #1
 80099c0:	4240      	negs	r0, r0
 80099c2:	e72a      	b.n	800981a <_svfiprintf_r+0x2e>
 80099c4:	ab07      	add	r3, sp, #28
 80099c6:	9300      	str	r3, [sp, #0]
 80099c8:	003a      	movs	r2, r7
 80099ca:	0021      	movs	r1, r4
 80099cc:	4b06      	ldr	r3, [pc, #24]	; (80099e8 <_svfiprintf_r+0x1fc>)
 80099ce:	9803      	ldr	r0, [sp, #12]
 80099d0:	f7fe f95c 	bl	8007c8c <_printf_i>
 80099d4:	e7ea      	b.n	80099ac <_svfiprintf_r+0x1c0>
 80099d6:	46c0      	nop			; (mov r8, r8)
 80099d8:	0800b06c 	.word	0x0800b06c
 80099dc:	0800b072 	.word	0x0800b072
 80099e0:	0800b076 	.word	0x0800b076
 80099e4:	08007729 	.word	0x08007729
 80099e8:	08009729 	.word	0x08009729

080099ec <__sfputc_r>:
 80099ec:	6893      	ldr	r3, [r2, #8]
 80099ee:	b510      	push	{r4, lr}
 80099f0:	3b01      	subs	r3, #1
 80099f2:	6093      	str	r3, [r2, #8]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	da04      	bge.n	8009a02 <__sfputc_r+0x16>
 80099f8:	6994      	ldr	r4, [r2, #24]
 80099fa:	42a3      	cmp	r3, r4
 80099fc:	db07      	blt.n	8009a0e <__sfputc_r+0x22>
 80099fe:	290a      	cmp	r1, #10
 8009a00:	d005      	beq.n	8009a0e <__sfputc_r+0x22>
 8009a02:	6813      	ldr	r3, [r2, #0]
 8009a04:	1c58      	adds	r0, r3, #1
 8009a06:	6010      	str	r0, [r2, #0]
 8009a08:	7019      	strb	r1, [r3, #0]
 8009a0a:	0008      	movs	r0, r1
 8009a0c:	bd10      	pop	{r4, pc}
 8009a0e:	f000 f961 	bl	8009cd4 <__swbuf_r>
 8009a12:	0001      	movs	r1, r0
 8009a14:	e7f9      	b.n	8009a0a <__sfputc_r+0x1e>

08009a16 <__sfputs_r>:
 8009a16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a18:	0006      	movs	r6, r0
 8009a1a:	000f      	movs	r7, r1
 8009a1c:	0014      	movs	r4, r2
 8009a1e:	18d5      	adds	r5, r2, r3
 8009a20:	42ac      	cmp	r4, r5
 8009a22:	d101      	bne.n	8009a28 <__sfputs_r+0x12>
 8009a24:	2000      	movs	r0, #0
 8009a26:	e007      	b.n	8009a38 <__sfputs_r+0x22>
 8009a28:	7821      	ldrb	r1, [r4, #0]
 8009a2a:	003a      	movs	r2, r7
 8009a2c:	0030      	movs	r0, r6
 8009a2e:	f7ff ffdd 	bl	80099ec <__sfputc_r>
 8009a32:	3401      	adds	r4, #1
 8009a34:	1c43      	adds	r3, r0, #1
 8009a36:	d1f3      	bne.n	8009a20 <__sfputs_r+0xa>
 8009a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a3c <_vfiprintf_r>:
 8009a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a3e:	b0a1      	sub	sp, #132	; 0x84
 8009a40:	0006      	movs	r6, r0
 8009a42:	000c      	movs	r4, r1
 8009a44:	001f      	movs	r7, r3
 8009a46:	9203      	str	r2, [sp, #12]
 8009a48:	2800      	cmp	r0, #0
 8009a4a:	d004      	beq.n	8009a56 <_vfiprintf_r+0x1a>
 8009a4c:	6983      	ldr	r3, [r0, #24]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d101      	bne.n	8009a56 <_vfiprintf_r+0x1a>
 8009a52:	f000 fb43 	bl	800a0dc <__sinit>
 8009a56:	4b8e      	ldr	r3, [pc, #568]	; (8009c90 <_vfiprintf_r+0x254>)
 8009a58:	429c      	cmp	r4, r3
 8009a5a:	d11c      	bne.n	8009a96 <_vfiprintf_r+0x5a>
 8009a5c:	6874      	ldr	r4, [r6, #4]
 8009a5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a60:	07db      	lsls	r3, r3, #31
 8009a62:	d405      	bmi.n	8009a70 <_vfiprintf_r+0x34>
 8009a64:	89a3      	ldrh	r3, [r4, #12]
 8009a66:	059b      	lsls	r3, r3, #22
 8009a68:	d402      	bmi.n	8009a70 <_vfiprintf_r+0x34>
 8009a6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a6c:	f000 fbd7 	bl	800a21e <__retarget_lock_acquire_recursive>
 8009a70:	89a3      	ldrh	r3, [r4, #12]
 8009a72:	071b      	lsls	r3, r3, #28
 8009a74:	d502      	bpl.n	8009a7c <_vfiprintf_r+0x40>
 8009a76:	6923      	ldr	r3, [r4, #16]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d11d      	bne.n	8009ab8 <_vfiprintf_r+0x7c>
 8009a7c:	0021      	movs	r1, r4
 8009a7e:	0030      	movs	r0, r6
 8009a80:	f000 f97e 	bl	8009d80 <__swsetup_r>
 8009a84:	2800      	cmp	r0, #0
 8009a86:	d017      	beq.n	8009ab8 <_vfiprintf_r+0x7c>
 8009a88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a8a:	07db      	lsls	r3, r3, #31
 8009a8c:	d50d      	bpl.n	8009aaa <_vfiprintf_r+0x6e>
 8009a8e:	2001      	movs	r0, #1
 8009a90:	4240      	negs	r0, r0
 8009a92:	b021      	add	sp, #132	; 0x84
 8009a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a96:	4b7f      	ldr	r3, [pc, #508]	; (8009c94 <_vfiprintf_r+0x258>)
 8009a98:	429c      	cmp	r4, r3
 8009a9a:	d101      	bne.n	8009aa0 <_vfiprintf_r+0x64>
 8009a9c:	68b4      	ldr	r4, [r6, #8]
 8009a9e:	e7de      	b.n	8009a5e <_vfiprintf_r+0x22>
 8009aa0:	4b7d      	ldr	r3, [pc, #500]	; (8009c98 <_vfiprintf_r+0x25c>)
 8009aa2:	429c      	cmp	r4, r3
 8009aa4:	d1db      	bne.n	8009a5e <_vfiprintf_r+0x22>
 8009aa6:	68f4      	ldr	r4, [r6, #12]
 8009aa8:	e7d9      	b.n	8009a5e <_vfiprintf_r+0x22>
 8009aaa:	89a3      	ldrh	r3, [r4, #12]
 8009aac:	059b      	lsls	r3, r3, #22
 8009aae:	d4ee      	bmi.n	8009a8e <_vfiprintf_r+0x52>
 8009ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ab2:	f000 fbb5 	bl	800a220 <__retarget_lock_release_recursive>
 8009ab6:	e7ea      	b.n	8009a8e <_vfiprintf_r+0x52>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	ad08      	add	r5, sp, #32
 8009abc:	616b      	str	r3, [r5, #20]
 8009abe:	3320      	adds	r3, #32
 8009ac0:	766b      	strb	r3, [r5, #25]
 8009ac2:	3310      	adds	r3, #16
 8009ac4:	76ab      	strb	r3, [r5, #26]
 8009ac6:	9707      	str	r7, [sp, #28]
 8009ac8:	9f03      	ldr	r7, [sp, #12]
 8009aca:	783b      	ldrb	r3, [r7, #0]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d001      	beq.n	8009ad4 <_vfiprintf_r+0x98>
 8009ad0:	2b25      	cmp	r3, #37	; 0x25
 8009ad2:	d14e      	bne.n	8009b72 <_vfiprintf_r+0x136>
 8009ad4:	9b03      	ldr	r3, [sp, #12]
 8009ad6:	1afb      	subs	r3, r7, r3
 8009ad8:	9305      	str	r3, [sp, #20]
 8009ada:	9b03      	ldr	r3, [sp, #12]
 8009adc:	429f      	cmp	r7, r3
 8009ade:	d00d      	beq.n	8009afc <_vfiprintf_r+0xc0>
 8009ae0:	9b05      	ldr	r3, [sp, #20]
 8009ae2:	0021      	movs	r1, r4
 8009ae4:	0030      	movs	r0, r6
 8009ae6:	9a03      	ldr	r2, [sp, #12]
 8009ae8:	f7ff ff95 	bl	8009a16 <__sfputs_r>
 8009aec:	1c43      	adds	r3, r0, #1
 8009aee:	d100      	bne.n	8009af2 <_vfiprintf_r+0xb6>
 8009af0:	e0b5      	b.n	8009c5e <_vfiprintf_r+0x222>
 8009af2:	696a      	ldr	r2, [r5, #20]
 8009af4:	9b05      	ldr	r3, [sp, #20]
 8009af6:	4694      	mov	ip, r2
 8009af8:	4463      	add	r3, ip
 8009afa:	616b      	str	r3, [r5, #20]
 8009afc:	783b      	ldrb	r3, [r7, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d100      	bne.n	8009b04 <_vfiprintf_r+0xc8>
 8009b02:	e0ac      	b.n	8009c5e <_vfiprintf_r+0x222>
 8009b04:	2201      	movs	r2, #1
 8009b06:	1c7b      	adds	r3, r7, #1
 8009b08:	9303      	str	r3, [sp, #12]
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	4252      	negs	r2, r2
 8009b0e:	606a      	str	r2, [r5, #4]
 8009b10:	a904      	add	r1, sp, #16
 8009b12:	3254      	adds	r2, #84	; 0x54
 8009b14:	1852      	adds	r2, r2, r1
 8009b16:	602b      	str	r3, [r5, #0]
 8009b18:	60eb      	str	r3, [r5, #12]
 8009b1a:	60ab      	str	r3, [r5, #8]
 8009b1c:	7013      	strb	r3, [r2, #0]
 8009b1e:	65ab      	str	r3, [r5, #88]	; 0x58
 8009b20:	9b03      	ldr	r3, [sp, #12]
 8009b22:	2205      	movs	r2, #5
 8009b24:	7819      	ldrb	r1, [r3, #0]
 8009b26:	485d      	ldr	r0, [pc, #372]	; (8009c9c <_vfiprintf_r+0x260>)
 8009b28:	f7ff f940 	bl	8008dac <memchr>
 8009b2c:	9b03      	ldr	r3, [sp, #12]
 8009b2e:	1c5f      	adds	r7, r3, #1
 8009b30:	2800      	cmp	r0, #0
 8009b32:	d120      	bne.n	8009b76 <_vfiprintf_r+0x13a>
 8009b34:	682a      	ldr	r2, [r5, #0]
 8009b36:	06d3      	lsls	r3, r2, #27
 8009b38:	d504      	bpl.n	8009b44 <_vfiprintf_r+0x108>
 8009b3a:	2353      	movs	r3, #83	; 0x53
 8009b3c:	a904      	add	r1, sp, #16
 8009b3e:	185b      	adds	r3, r3, r1
 8009b40:	2120      	movs	r1, #32
 8009b42:	7019      	strb	r1, [r3, #0]
 8009b44:	0713      	lsls	r3, r2, #28
 8009b46:	d504      	bpl.n	8009b52 <_vfiprintf_r+0x116>
 8009b48:	2353      	movs	r3, #83	; 0x53
 8009b4a:	a904      	add	r1, sp, #16
 8009b4c:	185b      	adds	r3, r3, r1
 8009b4e:	212b      	movs	r1, #43	; 0x2b
 8009b50:	7019      	strb	r1, [r3, #0]
 8009b52:	9b03      	ldr	r3, [sp, #12]
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	2b2a      	cmp	r3, #42	; 0x2a
 8009b58:	d016      	beq.n	8009b88 <_vfiprintf_r+0x14c>
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	68eb      	ldr	r3, [r5, #12]
 8009b5e:	9f03      	ldr	r7, [sp, #12]
 8009b60:	783a      	ldrb	r2, [r7, #0]
 8009b62:	1c78      	adds	r0, r7, #1
 8009b64:	3a30      	subs	r2, #48	; 0x30
 8009b66:	4684      	mov	ip, r0
 8009b68:	2a09      	cmp	r2, #9
 8009b6a:	d94f      	bls.n	8009c0c <_vfiprintf_r+0x1d0>
 8009b6c:	2900      	cmp	r1, #0
 8009b6e:	d111      	bne.n	8009b94 <_vfiprintf_r+0x158>
 8009b70:	e017      	b.n	8009ba2 <_vfiprintf_r+0x166>
 8009b72:	3701      	adds	r7, #1
 8009b74:	e7a9      	b.n	8009aca <_vfiprintf_r+0x8e>
 8009b76:	4b49      	ldr	r3, [pc, #292]	; (8009c9c <_vfiprintf_r+0x260>)
 8009b78:	682a      	ldr	r2, [r5, #0]
 8009b7a:	1ac0      	subs	r0, r0, r3
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	4083      	lsls	r3, r0
 8009b80:	4313      	orrs	r3, r2
 8009b82:	602b      	str	r3, [r5, #0]
 8009b84:	9703      	str	r7, [sp, #12]
 8009b86:	e7cb      	b.n	8009b20 <_vfiprintf_r+0xe4>
 8009b88:	9b07      	ldr	r3, [sp, #28]
 8009b8a:	1d19      	adds	r1, r3, #4
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	9107      	str	r1, [sp, #28]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	db01      	blt.n	8009b98 <_vfiprintf_r+0x15c>
 8009b94:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b96:	e004      	b.n	8009ba2 <_vfiprintf_r+0x166>
 8009b98:	425b      	negs	r3, r3
 8009b9a:	60eb      	str	r3, [r5, #12]
 8009b9c:	2302      	movs	r3, #2
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	602b      	str	r3, [r5, #0]
 8009ba2:	783b      	ldrb	r3, [r7, #0]
 8009ba4:	2b2e      	cmp	r3, #46	; 0x2e
 8009ba6:	d10a      	bne.n	8009bbe <_vfiprintf_r+0x182>
 8009ba8:	787b      	ldrb	r3, [r7, #1]
 8009baa:	2b2a      	cmp	r3, #42	; 0x2a
 8009bac:	d137      	bne.n	8009c1e <_vfiprintf_r+0x1e2>
 8009bae:	9b07      	ldr	r3, [sp, #28]
 8009bb0:	3702      	adds	r7, #2
 8009bb2:	1d1a      	adds	r2, r3, #4
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	9207      	str	r2, [sp, #28]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	db2d      	blt.n	8009c18 <_vfiprintf_r+0x1dc>
 8009bbc:	9309      	str	r3, [sp, #36]	; 0x24
 8009bbe:	2203      	movs	r2, #3
 8009bc0:	7839      	ldrb	r1, [r7, #0]
 8009bc2:	4837      	ldr	r0, [pc, #220]	; (8009ca0 <_vfiprintf_r+0x264>)
 8009bc4:	f7ff f8f2 	bl	8008dac <memchr>
 8009bc8:	2800      	cmp	r0, #0
 8009bca:	d007      	beq.n	8009bdc <_vfiprintf_r+0x1a0>
 8009bcc:	4b34      	ldr	r3, [pc, #208]	; (8009ca0 <_vfiprintf_r+0x264>)
 8009bce:	682a      	ldr	r2, [r5, #0]
 8009bd0:	1ac0      	subs	r0, r0, r3
 8009bd2:	2340      	movs	r3, #64	; 0x40
 8009bd4:	4083      	lsls	r3, r0
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	3701      	adds	r7, #1
 8009bda:	602b      	str	r3, [r5, #0]
 8009bdc:	7839      	ldrb	r1, [r7, #0]
 8009bde:	1c7b      	adds	r3, r7, #1
 8009be0:	2206      	movs	r2, #6
 8009be2:	4830      	ldr	r0, [pc, #192]	; (8009ca4 <_vfiprintf_r+0x268>)
 8009be4:	9303      	str	r3, [sp, #12]
 8009be6:	7629      	strb	r1, [r5, #24]
 8009be8:	f7ff f8e0 	bl	8008dac <memchr>
 8009bec:	2800      	cmp	r0, #0
 8009bee:	d045      	beq.n	8009c7c <_vfiprintf_r+0x240>
 8009bf0:	4b2d      	ldr	r3, [pc, #180]	; (8009ca8 <_vfiprintf_r+0x26c>)
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d127      	bne.n	8009c46 <_vfiprintf_r+0x20a>
 8009bf6:	2207      	movs	r2, #7
 8009bf8:	9b07      	ldr	r3, [sp, #28]
 8009bfa:	3307      	adds	r3, #7
 8009bfc:	4393      	bics	r3, r2
 8009bfe:	3308      	adds	r3, #8
 8009c00:	9307      	str	r3, [sp, #28]
 8009c02:	696b      	ldr	r3, [r5, #20]
 8009c04:	9a04      	ldr	r2, [sp, #16]
 8009c06:	189b      	adds	r3, r3, r2
 8009c08:	616b      	str	r3, [r5, #20]
 8009c0a:	e75d      	b.n	8009ac8 <_vfiprintf_r+0x8c>
 8009c0c:	210a      	movs	r1, #10
 8009c0e:	434b      	muls	r3, r1
 8009c10:	4667      	mov	r7, ip
 8009c12:	189b      	adds	r3, r3, r2
 8009c14:	3909      	subs	r1, #9
 8009c16:	e7a3      	b.n	8009b60 <_vfiprintf_r+0x124>
 8009c18:	2301      	movs	r3, #1
 8009c1a:	425b      	negs	r3, r3
 8009c1c:	e7ce      	b.n	8009bbc <_vfiprintf_r+0x180>
 8009c1e:	2300      	movs	r3, #0
 8009c20:	001a      	movs	r2, r3
 8009c22:	3701      	adds	r7, #1
 8009c24:	606b      	str	r3, [r5, #4]
 8009c26:	7839      	ldrb	r1, [r7, #0]
 8009c28:	1c78      	adds	r0, r7, #1
 8009c2a:	3930      	subs	r1, #48	; 0x30
 8009c2c:	4684      	mov	ip, r0
 8009c2e:	2909      	cmp	r1, #9
 8009c30:	d903      	bls.n	8009c3a <_vfiprintf_r+0x1fe>
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d0c3      	beq.n	8009bbe <_vfiprintf_r+0x182>
 8009c36:	9209      	str	r2, [sp, #36]	; 0x24
 8009c38:	e7c1      	b.n	8009bbe <_vfiprintf_r+0x182>
 8009c3a:	230a      	movs	r3, #10
 8009c3c:	435a      	muls	r2, r3
 8009c3e:	4667      	mov	r7, ip
 8009c40:	1852      	adds	r2, r2, r1
 8009c42:	3b09      	subs	r3, #9
 8009c44:	e7ef      	b.n	8009c26 <_vfiprintf_r+0x1ea>
 8009c46:	ab07      	add	r3, sp, #28
 8009c48:	9300      	str	r3, [sp, #0]
 8009c4a:	0022      	movs	r2, r4
 8009c4c:	0029      	movs	r1, r5
 8009c4e:	0030      	movs	r0, r6
 8009c50:	4b16      	ldr	r3, [pc, #88]	; (8009cac <_vfiprintf_r+0x270>)
 8009c52:	f7fd fd69 	bl	8007728 <_printf_float>
 8009c56:	9004      	str	r0, [sp, #16]
 8009c58:	9b04      	ldr	r3, [sp, #16]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	d1d1      	bne.n	8009c02 <_vfiprintf_r+0x1c6>
 8009c5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c60:	07db      	lsls	r3, r3, #31
 8009c62:	d405      	bmi.n	8009c70 <_vfiprintf_r+0x234>
 8009c64:	89a3      	ldrh	r3, [r4, #12]
 8009c66:	059b      	lsls	r3, r3, #22
 8009c68:	d402      	bmi.n	8009c70 <_vfiprintf_r+0x234>
 8009c6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c6c:	f000 fad8 	bl	800a220 <__retarget_lock_release_recursive>
 8009c70:	89a3      	ldrh	r3, [r4, #12]
 8009c72:	065b      	lsls	r3, r3, #25
 8009c74:	d500      	bpl.n	8009c78 <_vfiprintf_r+0x23c>
 8009c76:	e70a      	b.n	8009a8e <_vfiprintf_r+0x52>
 8009c78:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009c7a:	e70a      	b.n	8009a92 <_vfiprintf_r+0x56>
 8009c7c:	ab07      	add	r3, sp, #28
 8009c7e:	9300      	str	r3, [sp, #0]
 8009c80:	0022      	movs	r2, r4
 8009c82:	0029      	movs	r1, r5
 8009c84:	0030      	movs	r0, r6
 8009c86:	4b09      	ldr	r3, [pc, #36]	; (8009cac <_vfiprintf_r+0x270>)
 8009c88:	f7fe f800 	bl	8007c8c <_printf_i>
 8009c8c:	e7e3      	b.n	8009c56 <_vfiprintf_r+0x21a>
 8009c8e:	46c0      	nop			; (mov r8, r8)
 8009c90:	0800b0a0 	.word	0x0800b0a0
 8009c94:	0800b0c0 	.word	0x0800b0c0
 8009c98:	0800b080 	.word	0x0800b080
 8009c9c:	0800b06c 	.word	0x0800b06c
 8009ca0:	0800b072 	.word	0x0800b072
 8009ca4:	0800b076 	.word	0x0800b076
 8009ca8:	08007729 	.word	0x08007729
 8009cac:	08009a17 	.word	0x08009a17

08009cb0 <_sbrk_r>:
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	b570      	push	{r4, r5, r6, lr}
 8009cb4:	4d06      	ldr	r5, [pc, #24]	; (8009cd0 <_sbrk_r+0x20>)
 8009cb6:	0004      	movs	r4, r0
 8009cb8:	0008      	movs	r0, r1
 8009cba:	602b      	str	r3, [r5, #0]
 8009cbc:	f7fb fabc 	bl	8005238 <_sbrk>
 8009cc0:	1c43      	adds	r3, r0, #1
 8009cc2:	d103      	bne.n	8009ccc <_sbrk_r+0x1c>
 8009cc4:	682b      	ldr	r3, [r5, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d000      	beq.n	8009ccc <_sbrk_r+0x1c>
 8009cca:	6023      	str	r3, [r4, #0]
 8009ccc:	bd70      	pop	{r4, r5, r6, pc}
 8009cce:	46c0      	nop			; (mov r8, r8)
 8009cd0:	20002b28 	.word	0x20002b28

08009cd4 <__swbuf_r>:
 8009cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd6:	0005      	movs	r5, r0
 8009cd8:	000e      	movs	r6, r1
 8009cda:	0014      	movs	r4, r2
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	d004      	beq.n	8009cea <__swbuf_r+0x16>
 8009ce0:	6983      	ldr	r3, [r0, #24]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d101      	bne.n	8009cea <__swbuf_r+0x16>
 8009ce6:	f000 f9f9 	bl	800a0dc <__sinit>
 8009cea:	4b22      	ldr	r3, [pc, #136]	; (8009d74 <__swbuf_r+0xa0>)
 8009cec:	429c      	cmp	r4, r3
 8009cee:	d12e      	bne.n	8009d4e <__swbuf_r+0x7a>
 8009cf0:	686c      	ldr	r4, [r5, #4]
 8009cf2:	69a3      	ldr	r3, [r4, #24]
 8009cf4:	60a3      	str	r3, [r4, #8]
 8009cf6:	89a3      	ldrh	r3, [r4, #12]
 8009cf8:	071b      	lsls	r3, r3, #28
 8009cfa:	d532      	bpl.n	8009d62 <__swbuf_r+0x8e>
 8009cfc:	6923      	ldr	r3, [r4, #16]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d02f      	beq.n	8009d62 <__swbuf_r+0x8e>
 8009d02:	6823      	ldr	r3, [r4, #0]
 8009d04:	6922      	ldr	r2, [r4, #16]
 8009d06:	b2f7      	uxtb	r7, r6
 8009d08:	1a98      	subs	r0, r3, r2
 8009d0a:	6963      	ldr	r3, [r4, #20]
 8009d0c:	b2f6      	uxtb	r6, r6
 8009d0e:	4283      	cmp	r3, r0
 8009d10:	dc05      	bgt.n	8009d1e <__swbuf_r+0x4a>
 8009d12:	0021      	movs	r1, r4
 8009d14:	0028      	movs	r0, r5
 8009d16:	f000 f93f 	bl	8009f98 <_fflush_r>
 8009d1a:	2800      	cmp	r0, #0
 8009d1c:	d127      	bne.n	8009d6e <__swbuf_r+0x9a>
 8009d1e:	68a3      	ldr	r3, [r4, #8]
 8009d20:	3001      	adds	r0, #1
 8009d22:	3b01      	subs	r3, #1
 8009d24:	60a3      	str	r3, [r4, #8]
 8009d26:	6823      	ldr	r3, [r4, #0]
 8009d28:	1c5a      	adds	r2, r3, #1
 8009d2a:	6022      	str	r2, [r4, #0]
 8009d2c:	701f      	strb	r7, [r3, #0]
 8009d2e:	6963      	ldr	r3, [r4, #20]
 8009d30:	4283      	cmp	r3, r0
 8009d32:	d004      	beq.n	8009d3e <__swbuf_r+0x6a>
 8009d34:	89a3      	ldrh	r3, [r4, #12]
 8009d36:	07db      	lsls	r3, r3, #31
 8009d38:	d507      	bpl.n	8009d4a <__swbuf_r+0x76>
 8009d3a:	2e0a      	cmp	r6, #10
 8009d3c:	d105      	bne.n	8009d4a <__swbuf_r+0x76>
 8009d3e:	0021      	movs	r1, r4
 8009d40:	0028      	movs	r0, r5
 8009d42:	f000 f929 	bl	8009f98 <_fflush_r>
 8009d46:	2800      	cmp	r0, #0
 8009d48:	d111      	bne.n	8009d6e <__swbuf_r+0x9a>
 8009d4a:	0030      	movs	r0, r6
 8009d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d4e:	4b0a      	ldr	r3, [pc, #40]	; (8009d78 <__swbuf_r+0xa4>)
 8009d50:	429c      	cmp	r4, r3
 8009d52:	d101      	bne.n	8009d58 <__swbuf_r+0x84>
 8009d54:	68ac      	ldr	r4, [r5, #8]
 8009d56:	e7cc      	b.n	8009cf2 <__swbuf_r+0x1e>
 8009d58:	4b08      	ldr	r3, [pc, #32]	; (8009d7c <__swbuf_r+0xa8>)
 8009d5a:	429c      	cmp	r4, r3
 8009d5c:	d1c9      	bne.n	8009cf2 <__swbuf_r+0x1e>
 8009d5e:	68ec      	ldr	r4, [r5, #12]
 8009d60:	e7c7      	b.n	8009cf2 <__swbuf_r+0x1e>
 8009d62:	0021      	movs	r1, r4
 8009d64:	0028      	movs	r0, r5
 8009d66:	f000 f80b 	bl	8009d80 <__swsetup_r>
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	d0c9      	beq.n	8009d02 <__swbuf_r+0x2e>
 8009d6e:	2601      	movs	r6, #1
 8009d70:	4276      	negs	r6, r6
 8009d72:	e7ea      	b.n	8009d4a <__swbuf_r+0x76>
 8009d74:	0800b0a0 	.word	0x0800b0a0
 8009d78:	0800b0c0 	.word	0x0800b0c0
 8009d7c:	0800b080 	.word	0x0800b080

08009d80 <__swsetup_r>:
 8009d80:	4b37      	ldr	r3, [pc, #220]	; (8009e60 <__swsetup_r+0xe0>)
 8009d82:	b570      	push	{r4, r5, r6, lr}
 8009d84:	681d      	ldr	r5, [r3, #0]
 8009d86:	0006      	movs	r6, r0
 8009d88:	000c      	movs	r4, r1
 8009d8a:	2d00      	cmp	r5, #0
 8009d8c:	d005      	beq.n	8009d9a <__swsetup_r+0x1a>
 8009d8e:	69ab      	ldr	r3, [r5, #24]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d102      	bne.n	8009d9a <__swsetup_r+0x1a>
 8009d94:	0028      	movs	r0, r5
 8009d96:	f000 f9a1 	bl	800a0dc <__sinit>
 8009d9a:	4b32      	ldr	r3, [pc, #200]	; (8009e64 <__swsetup_r+0xe4>)
 8009d9c:	429c      	cmp	r4, r3
 8009d9e:	d10f      	bne.n	8009dc0 <__swsetup_r+0x40>
 8009da0:	686c      	ldr	r4, [r5, #4]
 8009da2:	230c      	movs	r3, #12
 8009da4:	5ee2      	ldrsh	r2, [r4, r3]
 8009da6:	b293      	uxth	r3, r2
 8009da8:	0711      	lsls	r1, r2, #28
 8009daa:	d42d      	bmi.n	8009e08 <__swsetup_r+0x88>
 8009dac:	06d9      	lsls	r1, r3, #27
 8009dae:	d411      	bmi.n	8009dd4 <__swsetup_r+0x54>
 8009db0:	2309      	movs	r3, #9
 8009db2:	2001      	movs	r0, #1
 8009db4:	6033      	str	r3, [r6, #0]
 8009db6:	3337      	adds	r3, #55	; 0x37
 8009db8:	4313      	orrs	r3, r2
 8009dba:	81a3      	strh	r3, [r4, #12]
 8009dbc:	4240      	negs	r0, r0
 8009dbe:	bd70      	pop	{r4, r5, r6, pc}
 8009dc0:	4b29      	ldr	r3, [pc, #164]	; (8009e68 <__swsetup_r+0xe8>)
 8009dc2:	429c      	cmp	r4, r3
 8009dc4:	d101      	bne.n	8009dca <__swsetup_r+0x4a>
 8009dc6:	68ac      	ldr	r4, [r5, #8]
 8009dc8:	e7eb      	b.n	8009da2 <__swsetup_r+0x22>
 8009dca:	4b28      	ldr	r3, [pc, #160]	; (8009e6c <__swsetup_r+0xec>)
 8009dcc:	429c      	cmp	r4, r3
 8009dce:	d1e8      	bne.n	8009da2 <__swsetup_r+0x22>
 8009dd0:	68ec      	ldr	r4, [r5, #12]
 8009dd2:	e7e6      	b.n	8009da2 <__swsetup_r+0x22>
 8009dd4:	075b      	lsls	r3, r3, #29
 8009dd6:	d513      	bpl.n	8009e00 <__swsetup_r+0x80>
 8009dd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dda:	2900      	cmp	r1, #0
 8009ddc:	d008      	beq.n	8009df0 <__swsetup_r+0x70>
 8009dde:	0023      	movs	r3, r4
 8009de0:	3344      	adds	r3, #68	; 0x44
 8009de2:	4299      	cmp	r1, r3
 8009de4:	d002      	beq.n	8009dec <__swsetup_r+0x6c>
 8009de6:	0030      	movs	r0, r6
 8009de8:	f7ff fbbc 	bl	8009564 <_free_r>
 8009dec:	2300      	movs	r3, #0
 8009dee:	6363      	str	r3, [r4, #52]	; 0x34
 8009df0:	2224      	movs	r2, #36	; 0x24
 8009df2:	89a3      	ldrh	r3, [r4, #12]
 8009df4:	4393      	bics	r3, r2
 8009df6:	81a3      	strh	r3, [r4, #12]
 8009df8:	2300      	movs	r3, #0
 8009dfa:	6063      	str	r3, [r4, #4]
 8009dfc:	6923      	ldr	r3, [r4, #16]
 8009dfe:	6023      	str	r3, [r4, #0]
 8009e00:	2308      	movs	r3, #8
 8009e02:	89a2      	ldrh	r2, [r4, #12]
 8009e04:	4313      	orrs	r3, r2
 8009e06:	81a3      	strh	r3, [r4, #12]
 8009e08:	6923      	ldr	r3, [r4, #16]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d10b      	bne.n	8009e26 <__swsetup_r+0xa6>
 8009e0e:	21a0      	movs	r1, #160	; 0xa0
 8009e10:	2280      	movs	r2, #128	; 0x80
 8009e12:	89a3      	ldrh	r3, [r4, #12]
 8009e14:	0089      	lsls	r1, r1, #2
 8009e16:	0092      	lsls	r2, r2, #2
 8009e18:	400b      	ands	r3, r1
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d003      	beq.n	8009e26 <__swsetup_r+0xa6>
 8009e1e:	0021      	movs	r1, r4
 8009e20:	0030      	movs	r0, r6
 8009e22:	f000 fa27 	bl	800a274 <__smakebuf_r>
 8009e26:	220c      	movs	r2, #12
 8009e28:	5ea3      	ldrsh	r3, [r4, r2]
 8009e2a:	2001      	movs	r0, #1
 8009e2c:	001a      	movs	r2, r3
 8009e2e:	b299      	uxth	r1, r3
 8009e30:	4002      	ands	r2, r0
 8009e32:	4203      	tst	r3, r0
 8009e34:	d00f      	beq.n	8009e56 <__swsetup_r+0xd6>
 8009e36:	2200      	movs	r2, #0
 8009e38:	60a2      	str	r2, [r4, #8]
 8009e3a:	6962      	ldr	r2, [r4, #20]
 8009e3c:	4252      	negs	r2, r2
 8009e3e:	61a2      	str	r2, [r4, #24]
 8009e40:	2000      	movs	r0, #0
 8009e42:	6922      	ldr	r2, [r4, #16]
 8009e44:	4282      	cmp	r2, r0
 8009e46:	d1ba      	bne.n	8009dbe <__swsetup_r+0x3e>
 8009e48:	060a      	lsls	r2, r1, #24
 8009e4a:	d5b8      	bpl.n	8009dbe <__swsetup_r+0x3e>
 8009e4c:	2240      	movs	r2, #64	; 0x40
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	81a3      	strh	r3, [r4, #12]
 8009e52:	3801      	subs	r0, #1
 8009e54:	e7b3      	b.n	8009dbe <__swsetup_r+0x3e>
 8009e56:	0788      	lsls	r0, r1, #30
 8009e58:	d400      	bmi.n	8009e5c <__swsetup_r+0xdc>
 8009e5a:	6962      	ldr	r2, [r4, #20]
 8009e5c:	60a2      	str	r2, [r4, #8]
 8009e5e:	e7ef      	b.n	8009e40 <__swsetup_r+0xc0>
 8009e60:	2000282c 	.word	0x2000282c
 8009e64:	0800b0a0 	.word	0x0800b0a0
 8009e68:	0800b0c0 	.word	0x0800b0c0
 8009e6c:	0800b080 	.word	0x0800b080

08009e70 <abort>:
 8009e70:	2006      	movs	r0, #6
 8009e72:	b510      	push	{r4, lr}
 8009e74:	f000 fad2 	bl	800a41c <raise>
 8009e78:	2001      	movs	r0, #1
 8009e7a:	f7fb f96c 	bl	8005156 <_exit>
	...

08009e80 <__sflush_r>:
 8009e80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e82:	898b      	ldrh	r3, [r1, #12]
 8009e84:	0005      	movs	r5, r0
 8009e86:	000c      	movs	r4, r1
 8009e88:	071a      	lsls	r2, r3, #28
 8009e8a:	d45f      	bmi.n	8009f4c <__sflush_r+0xcc>
 8009e8c:	684a      	ldr	r2, [r1, #4]
 8009e8e:	2a00      	cmp	r2, #0
 8009e90:	dc04      	bgt.n	8009e9c <__sflush_r+0x1c>
 8009e92:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8009e94:	2a00      	cmp	r2, #0
 8009e96:	dc01      	bgt.n	8009e9c <__sflush_r+0x1c>
 8009e98:	2000      	movs	r0, #0
 8009e9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009e9c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009e9e:	2f00      	cmp	r7, #0
 8009ea0:	d0fa      	beq.n	8009e98 <__sflush_r+0x18>
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	2180      	movs	r1, #128	; 0x80
 8009ea6:	682e      	ldr	r6, [r5, #0]
 8009ea8:	602a      	str	r2, [r5, #0]
 8009eaa:	001a      	movs	r2, r3
 8009eac:	0149      	lsls	r1, r1, #5
 8009eae:	400a      	ands	r2, r1
 8009eb0:	420b      	tst	r3, r1
 8009eb2:	d034      	beq.n	8009f1e <__sflush_r+0x9e>
 8009eb4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009eb6:	89a3      	ldrh	r3, [r4, #12]
 8009eb8:	075b      	lsls	r3, r3, #29
 8009eba:	d506      	bpl.n	8009eca <__sflush_r+0x4a>
 8009ebc:	6863      	ldr	r3, [r4, #4]
 8009ebe:	1ac0      	subs	r0, r0, r3
 8009ec0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d001      	beq.n	8009eca <__sflush_r+0x4a>
 8009ec6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ec8:	1ac0      	subs	r0, r0, r3
 8009eca:	0002      	movs	r2, r0
 8009ecc:	6a21      	ldr	r1, [r4, #32]
 8009ece:	2300      	movs	r3, #0
 8009ed0:	0028      	movs	r0, r5
 8009ed2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009ed4:	47b8      	blx	r7
 8009ed6:	89a1      	ldrh	r1, [r4, #12]
 8009ed8:	1c43      	adds	r3, r0, #1
 8009eda:	d106      	bne.n	8009eea <__sflush_r+0x6a>
 8009edc:	682b      	ldr	r3, [r5, #0]
 8009ede:	2b1d      	cmp	r3, #29
 8009ee0:	d831      	bhi.n	8009f46 <__sflush_r+0xc6>
 8009ee2:	4a2c      	ldr	r2, [pc, #176]	; (8009f94 <__sflush_r+0x114>)
 8009ee4:	40da      	lsrs	r2, r3
 8009ee6:	07d3      	lsls	r3, r2, #31
 8009ee8:	d52d      	bpl.n	8009f46 <__sflush_r+0xc6>
 8009eea:	2300      	movs	r3, #0
 8009eec:	6063      	str	r3, [r4, #4]
 8009eee:	6923      	ldr	r3, [r4, #16]
 8009ef0:	6023      	str	r3, [r4, #0]
 8009ef2:	04cb      	lsls	r3, r1, #19
 8009ef4:	d505      	bpl.n	8009f02 <__sflush_r+0x82>
 8009ef6:	1c43      	adds	r3, r0, #1
 8009ef8:	d102      	bne.n	8009f00 <__sflush_r+0x80>
 8009efa:	682b      	ldr	r3, [r5, #0]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d100      	bne.n	8009f02 <__sflush_r+0x82>
 8009f00:	6560      	str	r0, [r4, #84]	; 0x54
 8009f02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f04:	602e      	str	r6, [r5, #0]
 8009f06:	2900      	cmp	r1, #0
 8009f08:	d0c6      	beq.n	8009e98 <__sflush_r+0x18>
 8009f0a:	0023      	movs	r3, r4
 8009f0c:	3344      	adds	r3, #68	; 0x44
 8009f0e:	4299      	cmp	r1, r3
 8009f10:	d002      	beq.n	8009f18 <__sflush_r+0x98>
 8009f12:	0028      	movs	r0, r5
 8009f14:	f7ff fb26 	bl	8009564 <_free_r>
 8009f18:	2000      	movs	r0, #0
 8009f1a:	6360      	str	r0, [r4, #52]	; 0x34
 8009f1c:	e7bd      	b.n	8009e9a <__sflush_r+0x1a>
 8009f1e:	2301      	movs	r3, #1
 8009f20:	0028      	movs	r0, r5
 8009f22:	6a21      	ldr	r1, [r4, #32]
 8009f24:	47b8      	blx	r7
 8009f26:	1c43      	adds	r3, r0, #1
 8009f28:	d1c5      	bne.n	8009eb6 <__sflush_r+0x36>
 8009f2a:	682b      	ldr	r3, [r5, #0]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d0c2      	beq.n	8009eb6 <__sflush_r+0x36>
 8009f30:	2b1d      	cmp	r3, #29
 8009f32:	d001      	beq.n	8009f38 <__sflush_r+0xb8>
 8009f34:	2b16      	cmp	r3, #22
 8009f36:	d101      	bne.n	8009f3c <__sflush_r+0xbc>
 8009f38:	602e      	str	r6, [r5, #0]
 8009f3a:	e7ad      	b.n	8009e98 <__sflush_r+0x18>
 8009f3c:	2340      	movs	r3, #64	; 0x40
 8009f3e:	89a2      	ldrh	r2, [r4, #12]
 8009f40:	4313      	orrs	r3, r2
 8009f42:	81a3      	strh	r3, [r4, #12]
 8009f44:	e7a9      	b.n	8009e9a <__sflush_r+0x1a>
 8009f46:	2340      	movs	r3, #64	; 0x40
 8009f48:	430b      	orrs	r3, r1
 8009f4a:	e7fa      	b.n	8009f42 <__sflush_r+0xc2>
 8009f4c:	690f      	ldr	r7, [r1, #16]
 8009f4e:	2f00      	cmp	r7, #0
 8009f50:	d0a2      	beq.n	8009e98 <__sflush_r+0x18>
 8009f52:	680a      	ldr	r2, [r1, #0]
 8009f54:	600f      	str	r7, [r1, #0]
 8009f56:	1bd2      	subs	r2, r2, r7
 8009f58:	9201      	str	r2, [sp, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	079b      	lsls	r3, r3, #30
 8009f5e:	d100      	bne.n	8009f62 <__sflush_r+0xe2>
 8009f60:	694a      	ldr	r2, [r1, #20]
 8009f62:	60a2      	str	r2, [r4, #8]
 8009f64:	9b01      	ldr	r3, [sp, #4]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	dc00      	bgt.n	8009f6c <__sflush_r+0xec>
 8009f6a:	e795      	b.n	8009e98 <__sflush_r+0x18>
 8009f6c:	003a      	movs	r2, r7
 8009f6e:	0028      	movs	r0, r5
 8009f70:	9b01      	ldr	r3, [sp, #4]
 8009f72:	6a21      	ldr	r1, [r4, #32]
 8009f74:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f76:	47b0      	blx	r6
 8009f78:	2800      	cmp	r0, #0
 8009f7a:	dc06      	bgt.n	8009f8a <__sflush_r+0x10a>
 8009f7c:	2340      	movs	r3, #64	; 0x40
 8009f7e:	2001      	movs	r0, #1
 8009f80:	89a2      	ldrh	r2, [r4, #12]
 8009f82:	4240      	negs	r0, r0
 8009f84:	4313      	orrs	r3, r2
 8009f86:	81a3      	strh	r3, [r4, #12]
 8009f88:	e787      	b.n	8009e9a <__sflush_r+0x1a>
 8009f8a:	9b01      	ldr	r3, [sp, #4]
 8009f8c:	183f      	adds	r7, r7, r0
 8009f8e:	1a1b      	subs	r3, r3, r0
 8009f90:	9301      	str	r3, [sp, #4]
 8009f92:	e7e7      	b.n	8009f64 <__sflush_r+0xe4>
 8009f94:	20400001 	.word	0x20400001

08009f98 <_fflush_r>:
 8009f98:	690b      	ldr	r3, [r1, #16]
 8009f9a:	b570      	push	{r4, r5, r6, lr}
 8009f9c:	0005      	movs	r5, r0
 8009f9e:	000c      	movs	r4, r1
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d102      	bne.n	8009faa <_fflush_r+0x12>
 8009fa4:	2500      	movs	r5, #0
 8009fa6:	0028      	movs	r0, r5
 8009fa8:	bd70      	pop	{r4, r5, r6, pc}
 8009faa:	2800      	cmp	r0, #0
 8009fac:	d004      	beq.n	8009fb8 <_fflush_r+0x20>
 8009fae:	6983      	ldr	r3, [r0, #24]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d101      	bne.n	8009fb8 <_fflush_r+0x20>
 8009fb4:	f000 f892 	bl	800a0dc <__sinit>
 8009fb8:	4b14      	ldr	r3, [pc, #80]	; (800a00c <_fflush_r+0x74>)
 8009fba:	429c      	cmp	r4, r3
 8009fbc:	d11b      	bne.n	8009ff6 <_fflush_r+0x5e>
 8009fbe:	686c      	ldr	r4, [r5, #4]
 8009fc0:	220c      	movs	r2, #12
 8009fc2:	5ea3      	ldrsh	r3, [r4, r2]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d0ed      	beq.n	8009fa4 <_fflush_r+0xc>
 8009fc8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009fca:	07d2      	lsls	r2, r2, #31
 8009fcc:	d404      	bmi.n	8009fd8 <_fflush_r+0x40>
 8009fce:	059b      	lsls	r3, r3, #22
 8009fd0:	d402      	bmi.n	8009fd8 <_fflush_r+0x40>
 8009fd2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fd4:	f000 f923 	bl	800a21e <__retarget_lock_acquire_recursive>
 8009fd8:	0028      	movs	r0, r5
 8009fda:	0021      	movs	r1, r4
 8009fdc:	f7ff ff50 	bl	8009e80 <__sflush_r>
 8009fe0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fe2:	0005      	movs	r5, r0
 8009fe4:	07db      	lsls	r3, r3, #31
 8009fe6:	d4de      	bmi.n	8009fa6 <_fflush_r+0xe>
 8009fe8:	89a3      	ldrh	r3, [r4, #12]
 8009fea:	059b      	lsls	r3, r3, #22
 8009fec:	d4db      	bmi.n	8009fa6 <_fflush_r+0xe>
 8009fee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ff0:	f000 f916 	bl	800a220 <__retarget_lock_release_recursive>
 8009ff4:	e7d7      	b.n	8009fa6 <_fflush_r+0xe>
 8009ff6:	4b06      	ldr	r3, [pc, #24]	; (800a010 <_fflush_r+0x78>)
 8009ff8:	429c      	cmp	r4, r3
 8009ffa:	d101      	bne.n	800a000 <_fflush_r+0x68>
 8009ffc:	68ac      	ldr	r4, [r5, #8]
 8009ffe:	e7df      	b.n	8009fc0 <_fflush_r+0x28>
 800a000:	4b04      	ldr	r3, [pc, #16]	; (800a014 <_fflush_r+0x7c>)
 800a002:	429c      	cmp	r4, r3
 800a004:	d1dc      	bne.n	8009fc0 <_fflush_r+0x28>
 800a006:	68ec      	ldr	r4, [r5, #12]
 800a008:	e7da      	b.n	8009fc0 <_fflush_r+0x28>
 800a00a:	46c0      	nop			; (mov r8, r8)
 800a00c:	0800b0a0 	.word	0x0800b0a0
 800a010:	0800b0c0 	.word	0x0800b0c0
 800a014:	0800b080 	.word	0x0800b080

0800a018 <std>:
 800a018:	2300      	movs	r3, #0
 800a01a:	b510      	push	{r4, lr}
 800a01c:	0004      	movs	r4, r0
 800a01e:	6003      	str	r3, [r0, #0]
 800a020:	6043      	str	r3, [r0, #4]
 800a022:	6083      	str	r3, [r0, #8]
 800a024:	8181      	strh	r1, [r0, #12]
 800a026:	6643      	str	r3, [r0, #100]	; 0x64
 800a028:	0019      	movs	r1, r3
 800a02a:	81c2      	strh	r2, [r0, #14]
 800a02c:	6103      	str	r3, [r0, #16]
 800a02e:	6143      	str	r3, [r0, #20]
 800a030:	6183      	str	r3, [r0, #24]
 800a032:	2208      	movs	r2, #8
 800a034:	305c      	adds	r0, #92	; 0x5c
 800a036:	f7fd fac5 	bl	80075c4 <memset>
 800a03a:	4b05      	ldr	r3, [pc, #20]	; (800a050 <std+0x38>)
 800a03c:	6224      	str	r4, [r4, #32]
 800a03e:	6263      	str	r3, [r4, #36]	; 0x24
 800a040:	4b04      	ldr	r3, [pc, #16]	; (800a054 <std+0x3c>)
 800a042:	62a3      	str	r3, [r4, #40]	; 0x28
 800a044:	4b04      	ldr	r3, [pc, #16]	; (800a058 <std+0x40>)
 800a046:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a048:	4b04      	ldr	r3, [pc, #16]	; (800a05c <std+0x44>)
 800a04a:	6323      	str	r3, [r4, #48]	; 0x30
 800a04c:	bd10      	pop	{r4, pc}
 800a04e:	46c0      	nop			; (mov r8, r8)
 800a050:	0800a45d 	.word	0x0800a45d
 800a054:	0800a485 	.word	0x0800a485
 800a058:	0800a4bd 	.word	0x0800a4bd
 800a05c:	0800a4e9 	.word	0x0800a4e9

0800a060 <_cleanup_r>:
 800a060:	b510      	push	{r4, lr}
 800a062:	4902      	ldr	r1, [pc, #8]	; (800a06c <_cleanup_r+0xc>)
 800a064:	f000 f8ba 	bl	800a1dc <_fwalk_reent>
 800a068:	bd10      	pop	{r4, pc}
 800a06a:	46c0      	nop			; (mov r8, r8)
 800a06c:	08009f99 	.word	0x08009f99

0800a070 <__sfmoreglue>:
 800a070:	b570      	push	{r4, r5, r6, lr}
 800a072:	2568      	movs	r5, #104	; 0x68
 800a074:	1e4a      	subs	r2, r1, #1
 800a076:	4355      	muls	r5, r2
 800a078:	000e      	movs	r6, r1
 800a07a:	0029      	movs	r1, r5
 800a07c:	3174      	adds	r1, #116	; 0x74
 800a07e:	f7ff fadd 	bl	800963c <_malloc_r>
 800a082:	1e04      	subs	r4, r0, #0
 800a084:	d008      	beq.n	800a098 <__sfmoreglue+0x28>
 800a086:	2100      	movs	r1, #0
 800a088:	002a      	movs	r2, r5
 800a08a:	6001      	str	r1, [r0, #0]
 800a08c:	6046      	str	r6, [r0, #4]
 800a08e:	300c      	adds	r0, #12
 800a090:	60a0      	str	r0, [r4, #8]
 800a092:	3268      	adds	r2, #104	; 0x68
 800a094:	f7fd fa96 	bl	80075c4 <memset>
 800a098:	0020      	movs	r0, r4
 800a09a:	bd70      	pop	{r4, r5, r6, pc}

0800a09c <__sfp_lock_acquire>:
 800a09c:	b510      	push	{r4, lr}
 800a09e:	4802      	ldr	r0, [pc, #8]	; (800a0a8 <__sfp_lock_acquire+0xc>)
 800a0a0:	f000 f8bd 	bl	800a21e <__retarget_lock_acquire_recursive>
 800a0a4:	bd10      	pop	{r4, pc}
 800a0a6:	46c0      	nop			; (mov r8, r8)
 800a0a8:	20002b25 	.word	0x20002b25

0800a0ac <__sfp_lock_release>:
 800a0ac:	b510      	push	{r4, lr}
 800a0ae:	4802      	ldr	r0, [pc, #8]	; (800a0b8 <__sfp_lock_release+0xc>)
 800a0b0:	f000 f8b6 	bl	800a220 <__retarget_lock_release_recursive>
 800a0b4:	bd10      	pop	{r4, pc}
 800a0b6:	46c0      	nop			; (mov r8, r8)
 800a0b8:	20002b25 	.word	0x20002b25

0800a0bc <__sinit_lock_acquire>:
 800a0bc:	b510      	push	{r4, lr}
 800a0be:	4802      	ldr	r0, [pc, #8]	; (800a0c8 <__sinit_lock_acquire+0xc>)
 800a0c0:	f000 f8ad 	bl	800a21e <__retarget_lock_acquire_recursive>
 800a0c4:	bd10      	pop	{r4, pc}
 800a0c6:	46c0      	nop			; (mov r8, r8)
 800a0c8:	20002b26 	.word	0x20002b26

0800a0cc <__sinit_lock_release>:
 800a0cc:	b510      	push	{r4, lr}
 800a0ce:	4802      	ldr	r0, [pc, #8]	; (800a0d8 <__sinit_lock_release+0xc>)
 800a0d0:	f000 f8a6 	bl	800a220 <__retarget_lock_release_recursive>
 800a0d4:	bd10      	pop	{r4, pc}
 800a0d6:	46c0      	nop			; (mov r8, r8)
 800a0d8:	20002b26 	.word	0x20002b26

0800a0dc <__sinit>:
 800a0dc:	b513      	push	{r0, r1, r4, lr}
 800a0de:	0004      	movs	r4, r0
 800a0e0:	f7ff ffec 	bl	800a0bc <__sinit_lock_acquire>
 800a0e4:	69a3      	ldr	r3, [r4, #24]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d002      	beq.n	800a0f0 <__sinit+0x14>
 800a0ea:	f7ff ffef 	bl	800a0cc <__sinit_lock_release>
 800a0ee:	bd13      	pop	{r0, r1, r4, pc}
 800a0f0:	64a3      	str	r3, [r4, #72]	; 0x48
 800a0f2:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a0f4:	6523      	str	r3, [r4, #80]	; 0x50
 800a0f6:	4b13      	ldr	r3, [pc, #76]	; (800a144 <__sinit+0x68>)
 800a0f8:	4a13      	ldr	r2, [pc, #76]	; (800a148 <__sinit+0x6c>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a0fe:	9301      	str	r3, [sp, #4]
 800a100:	42a3      	cmp	r3, r4
 800a102:	d101      	bne.n	800a108 <__sinit+0x2c>
 800a104:	2301      	movs	r3, #1
 800a106:	61a3      	str	r3, [r4, #24]
 800a108:	0020      	movs	r0, r4
 800a10a:	f000 f81f 	bl	800a14c <__sfp>
 800a10e:	6060      	str	r0, [r4, #4]
 800a110:	0020      	movs	r0, r4
 800a112:	f000 f81b 	bl	800a14c <__sfp>
 800a116:	60a0      	str	r0, [r4, #8]
 800a118:	0020      	movs	r0, r4
 800a11a:	f000 f817 	bl	800a14c <__sfp>
 800a11e:	2200      	movs	r2, #0
 800a120:	2104      	movs	r1, #4
 800a122:	60e0      	str	r0, [r4, #12]
 800a124:	6860      	ldr	r0, [r4, #4]
 800a126:	f7ff ff77 	bl	800a018 <std>
 800a12a:	2201      	movs	r2, #1
 800a12c:	2109      	movs	r1, #9
 800a12e:	68a0      	ldr	r0, [r4, #8]
 800a130:	f7ff ff72 	bl	800a018 <std>
 800a134:	2202      	movs	r2, #2
 800a136:	2112      	movs	r1, #18
 800a138:	68e0      	ldr	r0, [r4, #12]
 800a13a:	f7ff ff6d 	bl	800a018 <std>
 800a13e:	2301      	movs	r3, #1
 800a140:	61a3      	str	r3, [r4, #24]
 800a142:	e7d2      	b.n	800a0ea <__sinit+0xe>
 800a144:	0800adb0 	.word	0x0800adb0
 800a148:	0800a061 	.word	0x0800a061

0800a14c <__sfp>:
 800a14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a14e:	0007      	movs	r7, r0
 800a150:	f7ff ffa4 	bl	800a09c <__sfp_lock_acquire>
 800a154:	4b1f      	ldr	r3, [pc, #124]	; (800a1d4 <__sfp+0x88>)
 800a156:	681e      	ldr	r6, [r3, #0]
 800a158:	69b3      	ldr	r3, [r6, #24]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d102      	bne.n	800a164 <__sfp+0x18>
 800a15e:	0030      	movs	r0, r6
 800a160:	f7ff ffbc 	bl	800a0dc <__sinit>
 800a164:	3648      	adds	r6, #72	; 0x48
 800a166:	68b4      	ldr	r4, [r6, #8]
 800a168:	6873      	ldr	r3, [r6, #4]
 800a16a:	3b01      	subs	r3, #1
 800a16c:	d504      	bpl.n	800a178 <__sfp+0x2c>
 800a16e:	6833      	ldr	r3, [r6, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d022      	beq.n	800a1ba <__sfp+0x6e>
 800a174:	6836      	ldr	r6, [r6, #0]
 800a176:	e7f6      	b.n	800a166 <__sfp+0x1a>
 800a178:	220c      	movs	r2, #12
 800a17a:	5ea5      	ldrsh	r5, [r4, r2]
 800a17c:	2d00      	cmp	r5, #0
 800a17e:	d11a      	bne.n	800a1b6 <__sfp+0x6a>
 800a180:	0020      	movs	r0, r4
 800a182:	4b15      	ldr	r3, [pc, #84]	; (800a1d8 <__sfp+0x8c>)
 800a184:	3058      	adds	r0, #88	; 0x58
 800a186:	60e3      	str	r3, [r4, #12]
 800a188:	6665      	str	r5, [r4, #100]	; 0x64
 800a18a:	f000 f847 	bl	800a21c <__retarget_lock_init_recursive>
 800a18e:	f7ff ff8d 	bl	800a0ac <__sfp_lock_release>
 800a192:	0020      	movs	r0, r4
 800a194:	2208      	movs	r2, #8
 800a196:	0029      	movs	r1, r5
 800a198:	6025      	str	r5, [r4, #0]
 800a19a:	60a5      	str	r5, [r4, #8]
 800a19c:	6065      	str	r5, [r4, #4]
 800a19e:	6125      	str	r5, [r4, #16]
 800a1a0:	6165      	str	r5, [r4, #20]
 800a1a2:	61a5      	str	r5, [r4, #24]
 800a1a4:	305c      	adds	r0, #92	; 0x5c
 800a1a6:	f7fd fa0d 	bl	80075c4 <memset>
 800a1aa:	6365      	str	r5, [r4, #52]	; 0x34
 800a1ac:	63a5      	str	r5, [r4, #56]	; 0x38
 800a1ae:	64a5      	str	r5, [r4, #72]	; 0x48
 800a1b0:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a1b2:	0020      	movs	r0, r4
 800a1b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1b6:	3468      	adds	r4, #104	; 0x68
 800a1b8:	e7d7      	b.n	800a16a <__sfp+0x1e>
 800a1ba:	2104      	movs	r1, #4
 800a1bc:	0038      	movs	r0, r7
 800a1be:	f7ff ff57 	bl	800a070 <__sfmoreglue>
 800a1c2:	1e04      	subs	r4, r0, #0
 800a1c4:	6030      	str	r0, [r6, #0]
 800a1c6:	d1d5      	bne.n	800a174 <__sfp+0x28>
 800a1c8:	f7ff ff70 	bl	800a0ac <__sfp_lock_release>
 800a1cc:	230c      	movs	r3, #12
 800a1ce:	603b      	str	r3, [r7, #0]
 800a1d0:	e7ef      	b.n	800a1b2 <__sfp+0x66>
 800a1d2:	46c0      	nop			; (mov r8, r8)
 800a1d4:	0800adb0 	.word	0x0800adb0
 800a1d8:	ffff0001 	.word	0xffff0001

0800a1dc <_fwalk_reent>:
 800a1dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1de:	0004      	movs	r4, r0
 800a1e0:	0006      	movs	r6, r0
 800a1e2:	2700      	movs	r7, #0
 800a1e4:	9101      	str	r1, [sp, #4]
 800a1e6:	3448      	adds	r4, #72	; 0x48
 800a1e8:	6863      	ldr	r3, [r4, #4]
 800a1ea:	68a5      	ldr	r5, [r4, #8]
 800a1ec:	9300      	str	r3, [sp, #0]
 800a1ee:	9b00      	ldr	r3, [sp, #0]
 800a1f0:	3b01      	subs	r3, #1
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	d504      	bpl.n	800a200 <_fwalk_reent+0x24>
 800a1f6:	6824      	ldr	r4, [r4, #0]
 800a1f8:	2c00      	cmp	r4, #0
 800a1fa:	d1f5      	bne.n	800a1e8 <_fwalk_reent+0xc>
 800a1fc:	0038      	movs	r0, r7
 800a1fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a200:	89ab      	ldrh	r3, [r5, #12]
 800a202:	2b01      	cmp	r3, #1
 800a204:	d908      	bls.n	800a218 <_fwalk_reent+0x3c>
 800a206:	220e      	movs	r2, #14
 800a208:	5eab      	ldrsh	r3, [r5, r2]
 800a20a:	3301      	adds	r3, #1
 800a20c:	d004      	beq.n	800a218 <_fwalk_reent+0x3c>
 800a20e:	0029      	movs	r1, r5
 800a210:	0030      	movs	r0, r6
 800a212:	9b01      	ldr	r3, [sp, #4]
 800a214:	4798      	blx	r3
 800a216:	4307      	orrs	r7, r0
 800a218:	3568      	adds	r5, #104	; 0x68
 800a21a:	e7e8      	b.n	800a1ee <_fwalk_reent+0x12>

0800a21c <__retarget_lock_init_recursive>:
 800a21c:	4770      	bx	lr

0800a21e <__retarget_lock_acquire_recursive>:
 800a21e:	4770      	bx	lr

0800a220 <__retarget_lock_release_recursive>:
 800a220:	4770      	bx	lr
	...

0800a224 <__swhatbuf_r>:
 800a224:	b570      	push	{r4, r5, r6, lr}
 800a226:	000e      	movs	r6, r1
 800a228:	001d      	movs	r5, r3
 800a22a:	230e      	movs	r3, #14
 800a22c:	5ec9      	ldrsh	r1, [r1, r3]
 800a22e:	0014      	movs	r4, r2
 800a230:	b096      	sub	sp, #88	; 0x58
 800a232:	2900      	cmp	r1, #0
 800a234:	da08      	bge.n	800a248 <__swhatbuf_r+0x24>
 800a236:	220c      	movs	r2, #12
 800a238:	5eb3      	ldrsh	r3, [r6, r2]
 800a23a:	2200      	movs	r2, #0
 800a23c:	602a      	str	r2, [r5, #0]
 800a23e:	061b      	lsls	r3, r3, #24
 800a240:	d411      	bmi.n	800a266 <__swhatbuf_r+0x42>
 800a242:	2380      	movs	r3, #128	; 0x80
 800a244:	00db      	lsls	r3, r3, #3
 800a246:	e00f      	b.n	800a268 <__swhatbuf_r+0x44>
 800a248:	466a      	mov	r2, sp
 800a24a:	f000 f987 	bl	800a55c <_fstat_r>
 800a24e:	2800      	cmp	r0, #0
 800a250:	dbf1      	blt.n	800a236 <__swhatbuf_r+0x12>
 800a252:	23f0      	movs	r3, #240	; 0xf0
 800a254:	9901      	ldr	r1, [sp, #4]
 800a256:	021b      	lsls	r3, r3, #8
 800a258:	4019      	ands	r1, r3
 800a25a:	4b05      	ldr	r3, [pc, #20]	; (800a270 <__swhatbuf_r+0x4c>)
 800a25c:	18c9      	adds	r1, r1, r3
 800a25e:	424b      	negs	r3, r1
 800a260:	4159      	adcs	r1, r3
 800a262:	6029      	str	r1, [r5, #0]
 800a264:	e7ed      	b.n	800a242 <__swhatbuf_r+0x1e>
 800a266:	2340      	movs	r3, #64	; 0x40
 800a268:	2000      	movs	r0, #0
 800a26a:	6023      	str	r3, [r4, #0]
 800a26c:	b016      	add	sp, #88	; 0x58
 800a26e:	bd70      	pop	{r4, r5, r6, pc}
 800a270:	ffffe000 	.word	0xffffe000

0800a274 <__smakebuf_r>:
 800a274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a276:	2602      	movs	r6, #2
 800a278:	898b      	ldrh	r3, [r1, #12]
 800a27a:	0005      	movs	r5, r0
 800a27c:	000c      	movs	r4, r1
 800a27e:	4233      	tst	r3, r6
 800a280:	d006      	beq.n	800a290 <__smakebuf_r+0x1c>
 800a282:	0023      	movs	r3, r4
 800a284:	3347      	adds	r3, #71	; 0x47
 800a286:	6023      	str	r3, [r4, #0]
 800a288:	6123      	str	r3, [r4, #16]
 800a28a:	2301      	movs	r3, #1
 800a28c:	6163      	str	r3, [r4, #20]
 800a28e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a290:	466a      	mov	r2, sp
 800a292:	ab01      	add	r3, sp, #4
 800a294:	f7ff ffc6 	bl	800a224 <__swhatbuf_r>
 800a298:	9900      	ldr	r1, [sp, #0]
 800a29a:	0007      	movs	r7, r0
 800a29c:	0028      	movs	r0, r5
 800a29e:	f7ff f9cd 	bl	800963c <_malloc_r>
 800a2a2:	2800      	cmp	r0, #0
 800a2a4:	d108      	bne.n	800a2b8 <__smakebuf_r+0x44>
 800a2a6:	220c      	movs	r2, #12
 800a2a8:	5ea3      	ldrsh	r3, [r4, r2]
 800a2aa:	059a      	lsls	r2, r3, #22
 800a2ac:	d4ef      	bmi.n	800a28e <__smakebuf_r+0x1a>
 800a2ae:	2203      	movs	r2, #3
 800a2b0:	4393      	bics	r3, r2
 800a2b2:	431e      	orrs	r6, r3
 800a2b4:	81a6      	strh	r6, [r4, #12]
 800a2b6:	e7e4      	b.n	800a282 <__smakebuf_r+0xe>
 800a2b8:	4b0f      	ldr	r3, [pc, #60]	; (800a2f8 <__smakebuf_r+0x84>)
 800a2ba:	62ab      	str	r3, [r5, #40]	; 0x28
 800a2bc:	2380      	movs	r3, #128	; 0x80
 800a2be:	89a2      	ldrh	r2, [r4, #12]
 800a2c0:	6020      	str	r0, [r4, #0]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	81a3      	strh	r3, [r4, #12]
 800a2c6:	9b00      	ldr	r3, [sp, #0]
 800a2c8:	6120      	str	r0, [r4, #16]
 800a2ca:	6163      	str	r3, [r4, #20]
 800a2cc:	9b01      	ldr	r3, [sp, #4]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00d      	beq.n	800a2ee <__smakebuf_r+0x7a>
 800a2d2:	0028      	movs	r0, r5
 800a2d4:	230e      	movs	r3, #14
 800a2d6:	5ee1      	ldrsh	r1, [r4, r3]
 800a2d8:	f000 f952 	bl	800a580 <_isatty_r>
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	d006      	beq.n	800a2ee <__smakebuf_r+0x7a>
 800a2e0:	2203      	movs	r2, #3
 800a2e2:	89a3      	ldrh	r3, [r4, #12]
 800a2e4:	4393      	bics	r3, r2
 800a2e6:	001a      	movs	r2, r3
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	81a3      	strh	r3, [r4, #12]
 800a2ee:	89a0      	ldrh	r0, [r4, #12]
 800a2f0:	4307      	orrs	r7, r0
 800a2f2:	81a7      	strh	r7, [r4, #12]
 800a2f4:	e7cb      	b.n	800a28e <__smakebuf_r+0x1a>
 800a2f6:	46c0      	nop			; (mov r8, r8)
 800a2f8:	0800a061 	.word	0x0800a061

0800a2fc <__ascii_mbtowc>:
 800a2fc:	b082      	sub	sp, #8
 800a2fe:	2900      	cmp	r1, #0
 800a300:	d100      	bne.n	800a304 <__ascii_mbtowc+0x8>
 800a302:	a901      	add	r1, sp, #4
 800a304:	1e10      	subs	r0, r2, #0
 800a306:	d006      	beq.n	800a316 <__ascii_mbtowc+0x1a>
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d006      	beq.n	800a31a <__ascii_mbtowc+0x1e>
 800a30c:	7813      	ldrb	r3, [r2, #0]
 800a30e:	600b      	str	r3, [r1, #0]
 800a310:	7810      	ldrb	r0, [r2, #0]
 800a312:	1e43      	subs	r3, r0, #1
 800a314:	4198      	sbcs	r0, r3
 800a316:	b002      	add	sp, #8
 800a318:	4770      	bx	lr
 800a31a:	2002      	movs	r0, #2
 800a31c:	4240      	negs	r0, r0
 800a31e:	e7fa      	b.n	800a316 <__ascii_mbtowc+0x1a>

0800a320 <memmove>:
 800a320:	b510      	push	{r4, lr}
 800a322:	4288      	cmp	r0, r1
 800a324:	d902      	bls.n	800a32c <memmove+0xc>
 800a326:	188b      	adds	r3, r1, r2
 800a328:	4298      	cmp	r0, r3
 800a32a:	d303      	bcc.n	800a334 <memmove+0x14>
 800a32c:	2300      	movs	r3, #0
 800a32e:	e007      	b.n	800a340 <memmove+0x20>
 800a330:	5c8b      	ldrb	r3, [r1, r2]
 800a332:	5483      	strb	r3, [r0, r2]
 800a334:	3a01      	subs	r2, #1
 800a336:	d2fb      	bcs.n	800a330 <memmove+0x10>
 800a338:	bd10      	pop	{r4, pc}
 800a33a:	5ccc      	ldrb	r4, [r1, r3]
 800a33c:	54c4      	strb	r4, [r0, r3]
 800a33e:	3301      	adds	r3, #1
 800a340:	429a      	cmp	r2, r3
 800a342:	d1fa      	bne.n	800a33a <memmove+0x1a>
 800a344:	e7f8      	b.n	800a338 <memmove+0x18>
	...

0800a348 <__malloc_lock>:
 800a348:	b510      	push	{r4, lr}
 800a34a:	4802      	ldr	r0, [pc, #8]	; (800a354 <__malloc_lock+0xc>)
 800a34c:	f7ff ff67 	bl	800a21e <__retarget_lock_acquire_recursive>
 800a350:	bd10      	pop	{r4, pc}
 800a352:	46c0      	nop			; (mov r8, r8)
 800a354:	20002b24 	.word	0x20002b24

0800a358 <__malloc_unlock>:
 800a358:	b510      	push	{r4, lr}
 800a35a:	4802      	ldr	r0, [pc, #8]	; (800a364 <__malloc_unlock+0xc>)
 800a35c:	f7ff ff60 	bl	800a220 <__retarget_lock_release_recursive>
 800a360:	bd10      	pop	{r4, pc}
 800a362:	46c0      	nop			; (mov r8, r8)
 800a364:	20002b24 	.word	0x20002b24

0800a368 <_realloc_r>:
 800a368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a36a:	0007      	movs	r7, r0
 800a36c:	000e      	movs	r6, r1
 800a36e:	0014      	movs	r4, r2
 800a370:	2900      	cmp	r1, #0
 800a372:	d105      	bne.n	800a380 <_realloc_r+0x18>
 800a374:	0011      	movs	r1, r2
 800a376:	f7ff f961 	bl	800963c <_malloc_r>
 800a37a:	0005      	movs	r5, r0
 800a37c:	0028      	movs	r0, r5
 800a37e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a380:	2a00      	cmp	r2, #0
 800a382:	d103      	bne.n	800a38c <_realloc_r+0x24>
 800a384:	f7ff f8ee 	bl	8009564 <_free_r>
 800a388:	0025      	movs	r5, r4
 800a38a:	e7f7      	b.n	800a37c <_realloc_r+0x14>
 800a38c:	f000 f91e 	bl	800a5cc <_malloc_usable_size_r>
 800a390:	9001      	str	r0, [sp, #4]
 800a392:	4284      	cmp	r4, r0
 800a394:	d803      	bhi.n	800a39e <_realloc_r+0x36>
 800a396:	0035      	movs	r5, r6
 800a398:	0843      	lsrs	r3, r0, #1
 800a39a:	42a3      	cmp	r3, r4
 800a39c:	d3ee      	bcc.n	800a37c <_realloc_r+0x14>
 800a39e:	0021      	movs	r1, r4
 800a3a0:	0038      	movs	r0, r7
 800a3a2:	f7ff f94b 	bl	800963c <_malloc_r>
 800a3a6:	1e05      	subs	r5, r0, #0
 800a3a8:	d0e8      	beq.n	800a37c <_realloc_r+0x14>
 800a3aa:	9b01      	ldr	r3, [sp, #4]
 800a3ac:	0022      	movs	r2, r4
 800a3ae:	429c      	cmp	r4, r3
 800a3b0:	d900      	bls.n	800a3b4 <_realloc_r+0x4c>
 800a3b2:	001a      	movs	r2, r3
 800a3b4:	0031      	movs	r1, r6
 800a3b6:	0028      	movs	r0, r5
 800a3b8:	f7fe fd03 	bl	8008dc2 <memcpy>
 800a3bc:	0031      	movs	r1, r6
 800a3be:	0038      	movs	r0, r7
 800a3c0:	f7ff f8d0 	bl	8009564 <_free_r>
 800a3c4:	e7da      	b.n	800a37c <_realloc_r+0x14>

0800a3c6 <_raise_r>:
 800a3c6:	b570      	push	{r4, r5, r6, lr}
 800a3c8:	0004      	movs	r4, r0
 800a3ca:	000d      	movs	r5, r1
 800a3cc:	291f      	cmp	r1, #31
 800a3ce:	d904      	bls.n	800a3da <_raise_r+0x14>
 800a3d0:	2316      	movs	r3, #22
 800a3d2:	6003      	str	r3, [r0, #0]
 800a3d4:	2001      	movs	r0, #1
 800a3d6:	4240      	negs	r0, r0
 800a3d8:	bd70      	pop	{r4, r5, r6, pc}
 800a3da:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d004      	beq.n	800a3ea <_raise_r+0x24>
 800a3e0:	008a      	lsls	r2, r1, #2
 800a3e2:	189b      	adds	r3, r3, r2
 800a3e4:	681a      	ldr	r2, [r3, #0]
 800a3e6:	2a00      	cmp	r2, #0
 800a3e8:	d108      	bne.n	800a3fc <_raise_r+0x36>
 800a3ea:	0020      	movs	r0, r4
 800a3ec:	f000 f832 	bl	800a454 <_getpid_r>
 800a3f0:	002a      	movs	r2, r5
 800a3f2:	0001      	movs	r1, r0
 800a3f4:	0020      	movs	r0, r4
 800a3f6:	f000 f81b 	bl	800a430 <_kill_r>
 800a3fa:	e7ed      	b.n	800a3d8 <_raise_r+0x12>
 800a3fc:	2000      	movs	r0, #0
 800a3fe:	2a01      	cmp	r2, #1
 800a400:	d0ea      	beq.n	800a3d8 <_raise_r+0x12>
 800a402:	1c51      	adds	r1, r2, #1
 800a404:	d103      	bne.n	800a40e <_raise_r+0x48>
 800a406:	2316      	movs	r3, #22
 800a408:	3001      	adds	r0, #1
 800a40a:	6023      	str	r3, [r4, #0]
 800a40c:	e7e4      	b.n	800a3d8 <_raise_r+0x12>
 800a40e:	2400      	movs	r4, #0
 800a410:	0028      	movs	r0, r5
 800a412:	601c      	str	r4, [r3, #0]
 800a414:	4790      	blx	r2
 800a416:	0020      	movs	r0, r4
 800a418:	e7de      	b.n	800a3d8 <_raise_r+0x12>
	...

0800a41c <raise>:
 800a41c:	b510      	push	{r4, lr}
 800a41e:	4b03      	ldr	r3, [pc, #12]	; (800a42c <raise+0x10>)
 800a420:	0001      	movs	r1, r0
 800a422:	6818      	ldr	r0, [r3, #0]
 800a424:	f7ff ffcf 	bl	800a3c6 <_raise_r>
 800a428:	bd10      	pop	{r4, pc}
 800a42a:	46c0      	nop			; (mov r8, r8)
 800a42c:	2000282c 	.word	0x2000282c

0800a430 <_kill_r>:
 800a430:	2300      	movs	r3, #0
 800a432:	b570      	push	{r4, r5, r6, lr}
 800a434:	4d06      	ldr	r5, [pc, #24]	; (800a450 <_kill_r+0x20>)
 800a436:	0004      	movs	r4, r0
 800a438:	0008      	movs	r0, r1
 800a43a:	0011      	movs	r1, r2
 800a43c:	602b      	str	r3, [r5, #0]
 800a43e:	f7fa fe7a 	bl	8005136 <_kill>
 800a442:	1c43      	adds	r3, r0, #1
 800a444:	d103      	bne.n	800a44e <_kill_r+0x1e>
 800a446:	682b      	ldr	r3, [r5, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d000      	beq.n	800a44e <_kill_r+0x1e>
 800a44c:	6023      	str	r3, [r4, #0]
 800a44e:	bd70      	pop	{r4, r5, r6, pc}
 800a450:	20002b28 	.word	0x20002b28

0800a454 <_getpid_r>:
 800a454:	b510      	push	{r4, lr}
 800a456:	f7fa fe68 	bl	800512a <_getpid>
 800a45a:	bd10      	pop	{r4, pc}

0800a45c <__sread>:
 800a45c:	b570      	push	{r4, r5, r6, lr}
 800a45e:	000c      	movs	r4, r1
 800a460:	250e      	movs	r5, #14
 800a462:	5f49      	ldrsh	r1, [r1, r5]
 800a464:	f000 f8ba 	bl	800a5dc <_read_r>
 800a468:	2800      	cmp	r0, #0
 800a46a:	db03      	blt.n	800a474 <__sread+0x18>
 800a46c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a46e:	181b      	adds	r3, r3, r0
 800a470:	6563      	str	r3, [r4, #84]	; 0x54
 800a472:	bd70      	pop	{r4, r5, r6, pc}
 800a474:	89a3      	ldrh	r3, [r4, #12]
 800a476:	4a02      	ldr	r2, [pc, #8]	; (800a480 <__sread+0x24>)
 800a478:	4013      	ands	r3, r2
 800a47a:	81a3      	strh	r3, [r4, #12]
 800a47c:	e7f9      	b.n	800a472 <__sread+0x16>
 800a47e:	46c0      	nop			; (mov r8, r8)
 800a480:	ffffefff 	.word	0xffffefff

0800a484 <__swrite>:
 800a484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a486:	001f      	movs	r7, r3
 800a488:	898b      	ldrh	r3, [r1, #12]
 800a48a:	0005      	movs	r5, r0
 800a48c:	000c      	movs	r4, r1
 800a48e:	0016      	movs	r6, r2
 800a490:	05db      	lsls	r3, r3, #23
 800a492:	d505      	bpl.n	800a4a0 <__swrite+0x1c>
 800a494:	230e      	movs	r3, #14
 800a496:	5ec9      	ldrsh	r1, [r1, r3]
 800a498:	2200      	movs	r2, #0
 800a49a:	2302      	movs	r3, #2
 800a49c:	f000 f882 	bl	800a5a4 <_lseek_r>
 800a4a0:	89a3      	ldrh	r3, [r4, #12]
 800a4a2:	4a05      	ldr	r2, [pc, #20]	; (800a4b8 <__swrite+0x34>)
 800a4a4:	0028      	movs	r0, r5
 800a4a6:	4013      	ands	r3, r2
 800a4a8:	81a3      	strh	r3, [r4, #12]
 800a4aa:	0032      	movs	r2, r6
 800a4ac:	230e      	movs	r3, #14
 800a4ae:	5ee1      	ldrsh	r1, [r4, r3]
 800a4b0:	003b      	movs	r3, r7
 800a4b2:	f000 f82d 	bl	800a510 <_write_r>
 800a4b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4b8:	ffffefff 	.word	0xffffefff

0800a4bc <__sseek>:
 800a4bc:	b570      	push	{r4, r5, r6, lr}
 800a4be:	000c      	movs	r4, r1
 800a4c0:	250e      	movs	r5, #14
 800a4c2:	5f49      	ldrsh	r1, [r1, r5]
 800a4c4:	f000 f86e 	bl	800a5a4 <_lseek_r>
 800a4c8:	89a3      	ldrh	r3, [r4, #12]
 800a4ca:	1c42      	adds	r2, r0, #1
 800a4cc:	d103      	bne.n	800a4d6 <__sseek+0x1a>
 800a4ce:	4a05      	ldr	r2, [pc, #20]	; (800a4e4 <__sseek+0x28>)
 800a4d0:	4013      	ands	r3, r2
 800a4d2:	81a3      	strh	r3, [r4, #12]
 800a4d4:	bd70      	pop	{r4, r5, r6, pc}
 800a4d6:	2280      	movs	r2, #128	; 0x80
 800a4d8:	0152      	lsls	r2, r2, #5
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	81a3      	strh	r3, [r4, #12]
 800a4de:	6560      	str	r0, [r4, #84]	; 0x54
 800a4e0:	e7f8      	b.n	800a4d4 <__sseek+0x18>
 800a4e2:	46c0      	nop			; (mov r8, r8)
 800a4e4:	ffffefff 	.word	0xffffefff

0800a4e8 <__sclose>:
 800a4e8:	b510      	push	{r4, lr}
 800a4ea:	230e      	movs	r3, #14
 800a4ec:	5ec9      	ldrsh	r1, [r1, r3]
 800a4ee:	f000 f823 	bl	800a538 <_close_r>
 800a4f2:	bd10      	pop	{r4, pc}

0800a4f4 <__ascii_wctomb>:
 800a4f4:	0003      	movs	r3, r0
 800a4f6:	1e08      	subs	r0, r1, #0
 800a4f8:	d005      	beq.n	800a506 <__ascii_wctomb+0x12>
 800a4fa:	2aff      	cmp	r2, #255	; 0xff
 800a4fc:	d904      	bls.n	800a508 <__ascii_wctomb+0x14>
 800a4fe:	228a      	movs	r2, #138	; 0x8a
 800a500:	2001      	movs	r0, #1
 800a502:	601a      	str	r2, [r3, #0]
 800a504:	4240      	negs	r0, r0
 800a506:	4770      	bx	lr
 800a508:	2001      	movs	r0, #1
 800a50a:	700a      	strb	r2, [r1, #0]
 800a50c:	e7fb      	b.n	800a506 <__ascii_wctomb+0x12>
	...

0800a510 <_write_r>:
 800a510:	b570      	push	{r4, r5, r6, lr}
 800a512:	0004      	movs	r4, r0
 800a514:	0008      	movs	r0, r1
 800a516:	0011      	movs	r1, r2
 800a518:	001a      	movs	r2, r3
 800a51a:	2300      	movs	r3, #0
 800a51c:	4d05      	ldr	r5, [pc, #20]	; (800a534 <_write_r+0x24>)
 800a51e:	602b      	str	r3, [r5, #0]
 800a520:	f7fa fe42 	bl	80051a8 <_write>
 800a524:	1c43      	adds	r3, r0, #1
 800a526:	d103      	bne.n	800a530 <_write_r+0x20>
 800a528:	682b      	ldr	r3, [r5, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d000      	beq.n	800a530 <_write_r+0x20>
 800a52e:	6023      	str	r3, [r4, #0]
 800a530:	bd70      	pop	{r4, r5, r6, pc}
 800a532:	46c0      	nop			; (mov r8, r8)
 800a534:	20002b28 	.word	0x20002b28

0800a538 <_close_r>:
 800a538:	2300      	movs	r3, #0
 800a53a:	b570      	push	{r4, r5, r6, lr}
 800a53c:	4d06      	ldr	r5, [pc, #24]	; (800a558 <_close_r+0x20>)
 800a53e:	0004      	movs	r4, r0
 800a540:	0008      	movs	r0, r1
 800a542:	602b      	str	r3, [r5, #0]
 800a544:	f7fa fe4c 	bl	80051e0 <_close>
 800a548:	1c43      	adds	r3, r0, #1
 800a54a:	d103      	bne.n	800a554 <_close_r+0x1c>
 800a54c:	682b      	ldr	r3, [r5, #0]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d000      	beq.n	800a554 <_close_r+0x1c>
 800a552:	6023      	str	r3, [r4, #0]
 800a554:	bd70      	pop	{r4, r5, r6, pc}
 800a556:	46c0      	nop			; (mov r8, r8)
 800a558:	20002b28 	.word	0x20002b28

0800a55c <_fstat_r>:
 800a55c:	2300      	movs	r3, #0
 800a55e:	b570      	push	{r4, r5, r6, lr}
 800a560:	4d06      	ldr	r5, [pc, #24]	; (800a57c <_fstat_r+0x20>)
 800a562:	0004      	movs	r4, r0
 800a564:	0008      	movs	r0, r1
 800a566:	0011      	movs	r1, r2
 800a568:	602b      	str	r3, [r5, #0]
 800a56a:	f7fa fe43 	bl	80051f4 <_fstat>
 800a56e:	1c43      	adds	r3, r0, #1
 800a570:	d103      	bne.n	800a57a <_fstat_r+0x1e>
 800a572:	682b      	ldr	r3, [r5, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d000      	beq.n	800a57a <_fstat_r+0x1e>
 800a578:	6023      	str	r3, [r4, #0]
 800a57a:	bd70      	pop	{r4, r5, r6, pc}
 800a57c:	20002b28 	.word	0x20002b28

0800a580 <_isatty_r>:
 800a580:	2300      	movs	r3, #0
 800a582:	b570      	push	{r4, r5, r6, lr}
 800a584:	4d06      	ldr	r5, [pc, #24]	; (800a5a0 <_isatty_r+0x20>)
 800a586:	0004      	movs	r4, r0
 800a588:	0008      	movs	r0, r1
 800a58a:	602b      	str	r3, [r5, #0]
 800a58c:	f7fa fe40 	bl	8005210 <_isatty>
 800a590:	1c43      	adds	r3, r0, #1
 800a592:	d103      	bne.n	800a59c <_isatty_r+0x1c>
 800a594:	682b      	ldr	r3, [r5, #0]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d000      	beq.n	800a59c <_isatty_r+0x1c>
 800a59a:	6023      	str	r3, [r4, #0]
 800a59c:	bd70      	pop	{r4, r5, r6, pc}
 800a59e:	46c0      	nop			; (mov r8, r8)
 800a5a0:	20002b28 	.word	0x20002b28

0800a5a4 <_lseek_r>:
 800a5a4:	b570      	push	{r4, r5, r6, lr}
 800a5a6:	0004      	movs	r4, r0
 800a5a8:	0008      	movs	r0, r1
 800a5aa:	0011      	movs	r1, r2
 800a5ac:	001a      	movs	r2, r3
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	4d05      	ldr	r5, [pc, #20]	; (800a5c8 <_lseek_r+0x24>)
 800a5b2:	602b      	str	r3, [r5, #0]
 800a5b4:	f7fa fe35 	bl	8005222 <_lseek>
 800a5b8:	1c43      	adds	r3, r0, #1
 800a5ba:	d103      	bne.n	800a5c4 <_lseek_r+0x20>
 800a5bc:	682b      	ldr	r3, [r5, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d000      	beq.n	800a5c4 <_lseek_r+0x20>
 800a5c2:	6023      	str	r3, [r4, #0]
 800a5c4:	bd70      	pop	{r4, r5, r6, pc}
 800a5c6:	46c0      	nop			; (mov r8, r8)
 800a5c8:	20002b28 	.word	0x20002b28

0800a5cc <_malloc_usable_size_r>:
 800a5cc:	1f0b      	subs	r3, r1, #4
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	1f18      	subs	r0, r3, #4
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	da01      	bge.n	800a5da <_malloc_usable_size_r+0xe>
 800a5d6:	580b      	ldr	r3, [r1, r0]
 800a5d8:	18c0      	adds	r0, r0, r3
 800a5da:	4770      	bx	lr

0800a5dc <_read_r>:
 800a5dc:	b570      	push	{r4, r5, r6, lr}
 800a5de:	0004      	movs	r4, r0
 800a5e0:	0008      	movs	r0, r1
 800a5e2:	0011      	movs	r1, r2
 800a5e4:	001a      	movs	r2, r3
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	4d05      	ldr	r5, [pc, #20]	; (800a600 <_read_r+0x24>)
 800a5ea:	602b      	str	r3, [r5, #0]
 800a5ec:	f7fa fdbf 	bl	800516e <_read>
 800a5f0:	1c43      	adds	r3, r0, #1
 800a5f2:	d103      	bne.n	800a5fc <_read_r+0x20>
 800a5f4:	682b      	ldr	r3, [r5, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d000      	beq.n	800a5fc <_read_r+0x20>
 800a5fa:	6023      	str	r3, [r4, #0]
 800a5fc:	bd70      	pop	{r4, r5, r6, pc}
 800a5fe:	46c0      	nop			; (mov r8, r8)
 800a600:	20002b28 	.word	0x20002b28

0800a604 <_init>:
 800a604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a606:	46c0      	nop			; (mov r8, r8)
 800a608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a60a:	bc08      	pop	{r3}
 800a60c:	469e      	mov	lr, r3
 800a60e:	4770      	bx	lr

0800a610 <_fini>:
 800a610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a612:	46c0      	nop			; (mov r8, r8)
 800a614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a616:	bc08      	pop	{r3}
 800a618:	469e      	mov	lr, r3
 800a61a:	4770      	bx	lr
